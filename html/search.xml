<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>用 TypeScript 做一个 UE4 游戏</title>
      <link href="/posts/2023-12-11919/"/>
      <url>/posts/2023-12-11919/</url>
      
        <content type="html"><![CDATA[<h2 id="起步入门"><a href="#起步入门" class="headerlink" title="起步入门"></a>起步入门</h2><p>下载<a href="https://koenig-media.raywenderlich.com/uploads/2018/01/BlockBreakerStarter.zip">示例项目</a>并解压。进入项目文件夹（BlockBreakerStarter），双击 BlockBreaker.uproject 打开项目，我们能看到以下场景：</p><p><img src="/images/cos-file-url(2).png" alt="xxx"></p><p>绿色墙上包含着多个目标，当目标受到伤害时会变红。一旦血量值降为零，目标就会消失。红色按钮可以重置所有的目标。</p><h2 id="TypeScript-编程环境搭建"><a href="#TypeScript-编程环境搭建" class="headerlink" title="TypeScript 编程环境搭建"></a>TypeScript 编程环境搭建</h2><p>目前步骤略显复杂，所幸一个项目只需做一次，而且后续会通过在 UE 商城上架组件来简化。</p><ul><li>下载（或 clone）<a href="https://github.com/Tencent/puerts">puerts</a>；</li><li>拷贝 unreal&#x2F;Puerts 目录到到 BlockBreakerStarter&#x2F;Plugins 目录下；</li><li>命令行进入 BlockBreakerStarter&#x2F;Plugins&#x2F;Puerts，执行<code>node enable_puerts_module.js</code></li><li>双击 BlockBreaker.uproject 打开项目，点击 puerts 的生成按钮，这步骤会生成 UE API 的 TypeScript 声明</li></ul><p><img src="/images/cos-file-url(3).png" alt="xxx"></p><h2 id="创建玩家角色"><a href="#创建玩家角色" class="headerlink" title="创建玩家角色"></a>创建玩家角色</h2><p>vscode 打开 BlockBreakerStarter 目录，在 TypeScript 目录新建 TS_Player.ts 文件，输入如下代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">UE</span> <span class="keyword">from</span> <span class="string">&quot;ue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TS_Player</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UE.Character</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TS_Player;</span><br></pre></td></tr></table></figure><p>这样就新建了个能在 UE 编辑器下使用的 TypeScript 类。<br>注意：要满足以下三点，一个类才能被 UE 编辑器使用：</p><ol><li>这个类继承自 UE 的类或者另一继承 UE 的类；</li><li>类名和去掉.ts 后缀的文件名相同；</li><li>把这个类 export default。</li></ol><p>Character 本身是 Pawn 的一种，额外多了一些其他功能，比如 CharacterMovement 组件。</p><p>该组件会自动处理如走动跑跳等移动功能，我们只要简单调用对应函数就可以移动角色。我们也可以在该组件设置走路速度，起跳速度等变量。</p><p>在实现移动功能前，Character 需要知道玩家的按键情况，所以我们先将移动映射到 W，A，S 和 D 键上。</p><h3 id="创建移动映射"><a href="#创建移动映射" class="headerlink" title="创建移动映射"></a>创建移动映射</h3><p>选择 Edit\Project Settings，打开 Input 设置。</p><p>创建两个名为 MoveForward 和 MoveRight 的轴映射。MoveForward 控制前后移动，MoveRight 控制左右移动。</p><p><img src="/images/1797904-818764a9f7d6b150.webp" alt="xxx"></p><p>对于 MoveForward，将按键改为 W，随后，创建多一个键位插槽，将其设置为 S，并将 Scale 改为-1.0。<br><img src="/images/cos-file-url(5).png" alt="xxx"></p><p>随后，我们会将 Scale 值跟角色朝向向量相乘，当 Scale 值是正数时，向量方向朝前，当 Scale 值是负数时，向量方向朝后。通过得出的向量结果，我们就可以让角色朝前朝后移动了。</p><p><img src="/images/cos-file-url(6).png" alt="xxx"></p><p>接着，我们要对左右移动做同样的设置，将 MoveRight 设为 D，新建键位插槽设为 A，Scale 值设为-1.0。</p><p><img src="/images/1797904-cfa8126887023d46.webp" alt="xxx"></p><p>现在我们设置好了键位映射，就可以用它们来进行移动了。</p><h3 id="实现移动"><a href="#实现移动" class="headerlink" title="实现移动"></a>实现移动</h3><p>在 TS_Player 输入 MoveForward 和 MoveRight 的处理代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TS_Player</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UE.Character</span> &#123;</span><br><span class="line">  <span class="title class_">MoveForward</span>(<span class="attr">axisValue</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title class_">AddMovementInput</span>(<span class="variable language_">this</span>.<span class="title class_">GetActorForwardVector</span>(), axisValue, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">MoveRight</span>(<span class="attr">axisValue</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title class_">AddMovementInput</span>(<span class="variable language_">this</span>.<span class="title class_">GetActorRightVector</span>(), axisValue, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释：</p><ol><li>MoveForward 回调的 axisValue 参数，当按下 W 时为 1，当按下 S 时为-1，什么都不按，是 0</li><li>AddMovementInput 函数将玩家朝向向量与 ScaleValue 相乘，使得不同按键控制输出不同方向的向量。什么都不按，意味着向量并没有方向，角色原地不动</li><li>CharacterMovement 组件获得 AddMovementInput 节点的输出，驱动角色朝指定方向移动</li><li>MoveRight 类似，不通的是输入的方向，MoveForward 用的是 GetActorForwardVector，而 MoveRight 用的是 GetActorRightVector。</li></ol><h3 id="设置默认-Pawn"><a href="#设置默认-Pawn" class="headerlink" title="设置默认 Pawn"></a>设置默认 Pawn</h3><p>保存 TS_Player.ts，打开 World Settings 面板并找到 Game Mode 设置，将 Default Pawn Class 改为 TS_Player。</p><p><img src="/images/1797904-990f13349977794a.webp" alt="xxx"></p><blockquote><p>注意：如果你的主编辑器面板还没有 World Settings 面板，在 Toolbar 选择 Settings\World Settings 调出面板。</p></blockquote><p>现在运行游戏你就能控制 TS_Player 了，按下 Play 并使用 W，S，A 和 D 来进行移动。</p><p><img src="/images/a502f2754507d852f2e05bde9dee9_w637_h356.gif" alt="xxx"></p><p>我们接着创建输入映射来观察四周。</p><h2 id="创建观察映射"><a href="#创建观察映射" class="headerlink" title="创建观察映射"></a>创建观察映射</h2><p>打开 Project Settings，再创建两个轴映射，分别命名为 LookHorizontal 和 LookVertical。<br><img src="/images/cos-file-url(9).png" alt="xxx"></p><p>将 LookHorizontal 的键位改为 Mouse X。</p><p><img src="/images/cos-file-url(10).png" alt="xxx"></p><p>这样当鼠标向右滑动时会输出正数，反之亦然。</p><p>接着，将 LookVertical 的键位改为 Mouse Y。</p><p><img src="/images/cos-file-url(11).png" alt="xxx"></p><p>这样当鼠标向上滑动时会输出正数，反之亦然。</p><p>现在，我们要写点逻辑来实现转动视角。</p><h3 id="实现转动视角"><a href="#实现转动视角" class="headerlink" title="实现转动视角"></a>实现转动视角</h3><p>如果一个 Pawn 上没有 Camera 组件，Unreal 会自动为你创建一个摄像机。默认情况下，摄像机会使用控制器的旋转。</p><blockquote><p>注意：如果你想了解更多关于控制器的内容，可以查看 AI 部分教程。</p></blockquote><p>虽然控制器并没有物理实体，它仍旧有自己的旋转。这意味着我们可以让角色和摄像机面向不同方向。比如，在第三人称游戏里，角色和摄像机并不总是处于同一方向。</p><p><img src="/images/880130939fe0a65a9f3d2873f5e78_w637_h356.gif" alt="xxx"></p><p>要在第一人称视角里转动摄像机，我们所要做的就是修改控制器的旋转。</p><p>在 TS_Player 输入 LookHorizontal 和 LookVertical 的处理代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TS_Player</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UE.Character</span> &#123;</span><br><span class="line">  <span class="comment">// ... other code</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">LookHorizontal</span>(<span class="attr">axisValue</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title class_">AddControllerYawInput</span>(axisValue);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">LookVertical</span>(<span class="attr">axisValue</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title class_">AddControllerPitchInput</span>(axisValue * -<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和之前左右移动类似，有点差异的是 LookVertical 会将 axisValue 乘以-1，如果不这么处理，视角上下移动和大多数人的习惯不太一致。</p><p>点击 Compile 并按下 Play 运行游戏，使用鼠标来转动视角吧。</p><p><img src="/images/1829eb3d7711fc31522e43d2ba4cf_w632_h353.gif" alt="xxx"></p><p>现在移动和视角转动都实现了，是时候搞把枪了！</p><h2 id="创建枪支"><a href="#创建枪支" class="headerlink" title="创建枪支"></a>创建枪支</h2><h3 id="创建枪支基类"><a href="#创建枪支基类" class="headerlink" title="创建枪支基类"></a>创建枪支基类</h3><p>在 TypeScript 目录下新建 TS_BaseGun.ts，输入如下代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">UE</span> <span class="keyword">from</span> <span class="string">&quot;ue&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TS_BaseGun</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UE.Actor</span> &#123;</span><br><span class="line">  <span class="title class_">MaxBulletDistance</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title class_">Damage</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title class_">FireRate</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title class_">GunMesh</span>: <span class="variable constant_">UE</span>.<span class="property">StaticMeshComponent</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TS_BaseGun;</span><br></pre></td></tr></table></figure><p>我们在 TS_BaseGun 类里头定义了几个 number 类型的变量，它们含义分别是：</p><ul><li>MaxBulletDistance：子弹最远飞行距离</li><li>Damage：子弹伤害</li><li>FireRate：子弹发射间隔（秒）</li></ul><blockquote><p>注意：每个变量的默认值都是 0，对本例来说没什么问题。然而，如果你希望新的枪支类有别的默认值，你需要在 BP_BaseGun 设置下。</p></blockquote><p>GunMesh 是 StaticMeshComponent 类型的变量，是枪支的外形，我们会在创建枪械子类时初始化它。</p><h3 id="创建枪械子类"><a href="#创建枪械子类" class="headerlink" title="创建枪械子类"></a>创建枪械子类</h3><p>保存后，添加 TS_Rifle.ts，输入如下代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> TS_BaseGun <span class="keyword">from</span> <span class="string">&quot;./TS_BaseGun&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">UE</span> <span class="keyword">from</span> <span class="string">&quot;ue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./ObjectExt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TS_Rifle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">TS_BaseGun</span> &#123;</span><br><span class="line">  <span class="title class_">Constructor</span>() &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">MaxBulletDistance</span> = <span class="number">5000</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">Damage</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">FireRate</span> = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">GunMesh</span> = <span class="variable language_">this</span>.<span class="property">CreateDefaultSubobjectGeneric</span>&lt;<span class="variable constant_">UE</span>.<span class="property">StaticMeshComponent</span>&gt;(</span><br><span class="line">      <span class="string">&quot;GunMesh&quot;</span>,</span><br><span class="line">      <span class="variable constant_">UE</span>.<span class="property">StaticMeshComponent</span>.<span class="title class_">StaticClass</span>()</span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">GunMesh</span>.<span class="property">StaticMesh</span> = <span class="variable constant_">UE</span>.<span class="property">StaticMesh</span>.<span class="title class_">Load</span>(</span><br><span class="line">      <span class="string">&quot;/Game/BlockBreaker/Meshes/SM_Rifle&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">RootComponent</span> = <span class="variable language_">this</span>.<span class="property">GunMesh</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TS_Rifle;</span><br></pre></td></tr></table></figure><p>代码多起来了，别慌，听我一一道来：</p><ol><li>那几个 number 变量在 TS_BaseGun 的子类 TS_Rifle 的子类初始化，意味着来复枪每颗子弹能最远飞行 5000 单位的距离。如果子弹命中 Actor，能对其造成 2 点伤害。当持续开火射击时，射击间隔不少于 0.1 秒。</li><li>我们通过 CreateDefaultSubobjectGeneric，创建了个 StaticMeshComponent 对象，并加载它的 StaticMesh 属性</li></ol><p>注：Object 的 CreateDefaultSubobject 方法用于创建子对象，但鉴于该方法参数较多，而且返回的是基类 Object，不便于使用，我们稍稍封装了一下（CreateDefaultSubobjectGeneric），封装的实现在 ObjectExt.ts，代码如下</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">UE</span> <span class="keyword">from</span> <span class="string">&quot;ue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;ue&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">    <span class="title class_">CreateDefaultSubobjectGeneric</span>&lt;T <span class="keyword">extends</span> <span class="variable constant_">UE</span>.<span class="property">Object</span>&gt;(</span><br><span class="line">      <span class="title class_">SubobjectFName</span>: <span class="built_in">string</span>,</span><br><span class="line">      <span class="title class_">ReturnType</span>: <span class="variable constant_">UE</span>.<span class="property">Class</span></span><br><span class="line">    ): T;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable constant_">UE</span>.<span class="property">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">CreateDefaultSubobjectGeneric</span> =</span><br><span class="line">  <span class="keyword">function</span> <span class="title class_">CreateDefaultSubobjectGeneric</span>&lt;T <span class="keyword">extends</span> <span class="variable constant_">UE</span>.<span class="property">Object</span>&gt;(</span><br><span class="line">    <span class="title class_">SubobjectFName</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="title class_">ReturnType</span>: <span class="variable constant_">UE</span>.<span class="property">Class</span></span><br><span class="line">  ): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title class_">CreateDefaultSubobject</span>(</span><br><span class="line">      <span class="title class_">SubobjectFName</span>,</span><br><span class="line">      <span class="title class_">ReturnType</span>,</span><br><span class="line">      <span class="title class_">ReturnType</span>,</span><br><span class="line">      <span class="comment">/*bIsRequired =*/</span> <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">/*bIsAbstract =*/</span> <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">/*bTransient =*/</span> <span class="literal">false</span></span><br><span class="line">    ) <span class="keyword">as</span> T;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>这把枪现在就完成了。</p><p>接着，我们要创建自己的摄像机组件了。这样能够更好地控制摄像机位置，我们还可以将枪支跟摄像机绑定在一起，这样枪支就能始终保持在摄像机的正面了。</p><h2 id="创建摄像机"><a href="#创建摄像机" class="headerlink" title="创建摄像机"></a>创建摄像机</h2><p>打开 TS_Player.ts 并新增几个变量</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">UE</span> <span class="keyword">from</span> <span class="string">&quot;ue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> TS_BaseGun <span class="keyword">from</span> <span class="string">&quot;./TS_BaseGun&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; $ref, $unref &#125; <span class="keyword">from</span> <span class="string">&quot;puerts&quot;</span>; <span class="comment">//和本节无关，但后面要用到</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./ObjectExt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TS_Player</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UE.Character</span> &#123;</span><br><span class="line">  <span class="title class_">FpsCamera</span>: <span class="variable constant_">UE</span>.<span class="property">CameraComponent</span>;</span><br><span class="line">  <span class="title class_">EquippedGun</span>: TS_BaseGun;</span><br><span class="line">  <span class="title class_">GunLocation</span>: <span class="variable constant_">UE</span>.<span class="property">SceneComponent</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// other code...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TS_Player;</span><br></pre></td></tr></table></figure><p>这几个变量的含义分别是</p><ul><li>FpsCamera: 摄像机;</li><li>EquippedGun:枪的引用;</li><li>GunLocation:枪的位置;</li></ul><p>添加构造函数，初始化 FpsCamera，GunLocation：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TS_Player</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UE.Character</span> &#123;</span><br><span class="line">  <span class="comment">// other code...</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">Constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">FpsCamera</span> = <span class="variable language_">this</span>.<span class="property">CreateDefaultSubobjectGeneric</span>&lt;<span class="variable constant_">UE</span>.<span class="property">CameraComponent</span>&gt;(</span><br><span class="line">      <span class="string">&quot;FpsCamera&quot;</span>,</span><br><span class="line">      <span class="variable constant_">UE</span>.<span class="property">CameraComponent</span>.<span class="title class_">StaticClass</span>()</span><br><span class="line">    );</span><br><span class="line">    <span class="title class_">FpsCamera</span>.<span class="title class_">SetupAttachment</span>(<span class="variable language_">this</span>.<span class="property">CapsuleComponent</span>, <span class="string">&quot;FpsCamera&quot;</span>);</span><br><span class="line">    <span class="title class_">FpsCamera</span>.<span class="title function_">K2_SetRelativeLocationAndRotation</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">UE</span>.<span class="title class_">Vector</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">90</span>),</span><br><span class="line">      <span class="literal">undefined</span>,</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      $ref&lt;<span class="variable constant_">UE</span>.<span class="property">HitResult</span>&gt;(<span class="literal">undefined</span>),</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">    <span class="title class_">FpsCamera</span>.<span class="property">bUsePawnControlRotation</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">FpsCamera</span> = <span class="title class_">FpsCamera</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">GunLocation</span> = <span class="variable language_">this</span>.<span class="property">CreateDefaultSubobjectGeneric</span>&lt;<span class="variable constant_">UE</span>.<span class="property">SceneComponent</span>&gt;(</span><br><span class="line">      <span class="string">&quot;GunLocation&quot;</span>,</span><br><span class="line">      <span class="variable constant_">UE</span>.<span class="property">SceneComponent</span>.<span class="title class_">StaticClass</span>()</span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">GunLocation</span>.<span class="title class_">SetupAttachment</span>(<span class="variable language_">this</span>.<span class="property">FpsCamera</span>, <span class="string">&quot;GunLocation&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">GunLocation</span>.<span class="title function_">K2_SetRelativeLocationAndRotation</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">UE</span>.<span class="title class_">Vector</span>(<span class="number">30</span>, <span class="number">14</span>, -<span class="number">12</span>),</span><br><span class="line">      <span class="keyword">new</span> <span class="variable constant_">UE</span>.<span class="title class_">Rotator</span>(<span class="number">0</span>, <span class="number">95</span>, <span class="number">0</span>),</span><br><span class="line">      <span class="literal">false</span>,</span><br><span class="line">      $ref&lt;<span class="variable constant_">UE</span>.<span class="property">HitResult</span>&gt;(<span class="literal">undefined</span>),</span><br><span class="line">      <span class="literal">false</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// other code...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释</p><ol><li>创建名为 FpsCamera 的相机，并 attach 到 CapsuleComponent 下</li><li>设置相机的位置</li><li>默认情况下，摄像机组件并不使用控制器的旋转。要修正这点，bUsePawnControlRotation 设置为 true</li><li>创建一个 SceneComponent 作为枪支的位置，将其 attach 到相机下</li><li>设置 GunLocation 的位置和旋转</li></ol><h3 id="生成并绑定枪支"><a href="#生成并绑定枪支" class="headerlink" title="生成并绑定枪支"></a>生成并绑定枪支</h3><p>TS_Player 下添加 ReceiveBeginPlay 方法，这个函数会在游戏开始的时候被引擎调用，在该方法添加来复枪的生成和绑定逻辑</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TS_Player</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UE.Character</span> &#123;</span><br><span class="line">  <span class="comment">// other code...</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">ReceiveBeginPlay</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ucls = <span class="variable constant_">UE</span>.<span class="property">Class</span>.<span class="title class_">Load</span>(<span class="string">&quot;/Game/Blueprints/TypeScript/TS_Rifle.TS_Rifle_C&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">EquippedGun</span> = <span class="variable constant_">UE</span>.<span class="property">GameplayStatics</span>.<span class="title class_">BeginDeferredActorSpawnFromClass</span>(</span><br><span class="line">      <span class="variable language_">this</span>,</span><br><span class="line">      ucls,</span><br><span class="line">      <span class="literal">undefined</span>,</span><br><span class="line">      <span class="variable constant_">UE</span>.<span class="property">ESpawnActorCollisionHandlingMethod</span>.<span class="property">Undefined</span>,</span><br><span class="line">      <span class="variable language_">this</span></span><br><span class="line">    ) <span class="keyword">as</span> TS_BaseGun;</span><br><span class="line">    <span class="variable constant_">UE</span>.<span class="property">GameplayStatics</span>.<span class="title class_">FinishSpawningActor</span>(<span class="variable language_">this</span>.<span class="property">EquippedGun</span>, <span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">EquippedGun</span>.<span class="title function_">K2_AttachToComponent</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">GunLocation</span>,</span><br><span class="line">      <span class="literal">undefined</span>,</span><br><span class="line">      <span class="variable constant_">UE</span>.<span class="property">EAttachmentRule</span>.<span class="property">SnapToTarget</span>,</span><br><span class="line">      <span class="variable constant_">UE</span>.<span class="property">EAttachmentRule</span>.<span class="property">SnapToTarget</span>,</span><br><span class="line">      <span class="variable constant_">UE</span>.<span class="property">EAttachmentRule</span>.<span class="property">SnapToTarget</span>,</span><br><span class="line">      <span class="literal">true</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后点击运行，这时可以看到我们有了枪。</p><p>现在有趣的地方来了：射击子弹！要检测子弹是否打中东西，我们要用上射线检测（line trace）。</p><h2 id="射击子弹"><a href="#射击子弹" class="headerlink" title="射击子弹"></a>射击子弹</h2><p>射线检测是一个包含开始点和结束点（两点成线）的函数，它会检测这条线上的每个点，看是否碰到其他物体。在游戏中，这是用于检测子弹是否打中东西的最普遍做法。</p><p>由于射击是属于枪支的特性，射击函数应该设计在枪支类里，而不是角色类。在 TS_BaseGun 类中添加创建名为 Shoot 的函数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TS_BaseGun</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UE.Actor</span> &#123;</span><br><span class="line">  <span class="comment">//other code</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//@no-blueprint</span></span><br><span class="line">  <span class="title class_">Shoot</span>(<span class="title class_">StartLocation</span>: <span class="variable constant_">UE</span>.<span class="property">Vector</span>, <span class="title class_">EndLocation</span>: <span class="variable constant_">UE</span>.<span class="property">Vector</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> hitResultOut = $ref&lt;<span class="variable constant_">UE</span>.<span class="property">HitResult</span>&gt;(<span class="literal">undefined</span>);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable constant_">UE</span>.<span class="property">KismetSystemLibrary</span>.<span class="title class_">LineTraceSingle</span>(</span><br><span class="line">        <span class="variable language_">this</span>,</span><br><span class="line">        <span class="title class_">StartLocation</span>,</span><br><span class="line">        <span class="title class_">EndLocation</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="literal">undefined</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        hitResultOut,</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        <span class="literal">undefined</span>,</span><br><span class="line">        <span class="literal">undefined</span>,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">      )</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">let</span> hitResult = $unref(hitResultOut);</span><br><span class="line">      <span class="variable constant_">UE</span>.<span class="property">GameplayStatics</span>.<span class="title class_">SpawnEmitterAtLocation</span>(</span><br><span class="line">        <span class="variable language_">this</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">PS_BulletImpact</span>,</span><br><span class="line">        hitResult.<span class="property">Location</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="variable constant_">UE</span>.<span class="title class_">Rotator</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="variable constant_">UE</span>.<span class="title class_">Vector</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        <span class="variable constant_">UE</span>.<span class="property">EPSCPoolMethod</span>.<span class="property">AutoRelease</span>,</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释</p><ol><li>使用 LineTraceByChannel 函数来执行射线检测。这个节点会使用可视力（Visibility）或者摄像机（Camera）碰撞通道来进行碰撞检测。</li><li>通过$ref 创建引用类型，用于碰撞信息的输出</li><li>如果检测到碰撞到碰撞（LineTraceByChannel 返回值为 true），则使用 SpawnEmitteratLocation 函数在碰撞位置生成粒子特效 PS_BulletImpact</li><li>@no-blueprint 告诉系统别生成对应的蓝图方法，因为这个方法我们只在 TypeScript 里头调用</li></ol><h3 id="调用射击函数"><a href="#调用射击函数" class="headerlink" title="调用射击函数"></a>调用射击函数</h3><p>首先，我们需要创建射击的按键映射。点击 Compile 并打开 Project Settings。创建一个新的 Axis Mapping 并命名为 Shoot，将其按键设为 Left Mouse Button，然后关闭 Project Settings。</p><p><img src="/images/1797904-eec81d48d1ecdf7b.webp" alt="xxx"></p><p>打开 TS_Player.ts，添加 Shoot 事件处理</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TS_Player</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UE.Character</span> &#123;</span><br><span class="line">  <span class="comment">//other code...</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">Shoot</span>(<span class="attr">axisValue</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (axisValue == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> cameraLocation = <span class="variable language_">this</span>.<span class="property">FpsCamera</span>.<span class="title function_">K2_GetComponentLocation</span>();</span><br><span class="line">      <span class="keyword">let</span> endLocation = cameraLocation.<span class="title function_">op_Addition</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">FpsCamera</span>.<span class="title class_">GetForwardVector</span>().<span class="title function_">op_Multiply</span>(</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">EquippedGun</span>.<span class="property">MaxBulletDistance</span></span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">EquippedGun</span>.<span class="title class_">Shoot</span>(cameraLocation, endLocation);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释</p><ol><li>如果玩家按下了鼠标左键，则调用枪支的 Shoot 函数</li><li>Shoot 函数射线检测的起始点是相机的位置，终点&#x3D; 相机位置 + 相机朝向 * 枪支射程</li></ol><p>保存文件，按下 Play 运行游戏，按住鼠标左键开始发射子弹吧！</p><p><img src="/images/cos-file-url(13).gif" alt="xxx"></p><p>现在，枪支是每帧都在射击的，射速实在是有点太快了，所以下一步要降低枪支的开火速度。</p><h2 id="降低开火速度"><a href="#降低开火速度" class="headerlink" title="降低开火速度"></a>降低开火速度</h2><p>首先，我们需要一个变量检测玩家是否正在射击。打开 TS_Player 创建 boolean 类型变量，命名为 CanShoot，将其默认值设为 true。如果 CanShoot 等于 true，说明玩家正在射击。</p><p>另外，将 Shoot 逻辑稍作改造</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TS_Player</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UE.Character</span> &#123;</span><br><span class="line">  <span class="comment">// other code ..</span></span><br><span class="line">  <span class="title class_">CanShoot</span>: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// other code ..</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">CanShoot</span> = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// other code ..</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//@no-blueprint</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title class_">AShoot</span>(<span class="attr">axisValue</span>: <span class="built_in">number</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (axisValue == <span class="number">1</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">CanShoot</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> cameraLocation = <span class="variable language_">this</span>.<span class="property">FpsCamera</span>.<span class="title function_">K2_GetComponentLocation</span>();</span><br><span class="line">      <span class="keyword">let</span> endLocation = cameraLocation.<span class="title function_">op_Addition</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">FpsCamera</span>.<span class="title class_">GetForwardVector</span>().<span class="title function_">op_Multiply</span>(</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">EquippedGun</span>.<span class="property">MaxBulletDistance</span></span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">EquippedGun</span>.<span class="title class_">Shoot</span>(cameraLocation, endLocation);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">CanShoot</span> = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="variable language_">this</span>.<span class="property">EquippedGun</span>.<span class="property">FireRate</span> * <span class="number">1000</span>); <span class="comment">//<span class="doctag">TODO:</span> 支持Latent方法转async方法后，可以用KismetSystemLibrary.Delay</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">CanShoot</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Shoot</span>(<span class="attr">axisValue</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title class_">AShoot</span>(axisValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释：</p><ol><li>由于我们要用到异步的等待，我们把前面的 Shoot 逻辑移动到一个 async 版本的 AShoot 函数，添加@no-blueprint 声明其只在 TypeScript 中使用</li><li>只有按下鼠标而且 CanShoot 变量为 true 时才允许射击</li><li>调用 EquippedGun 射击后，把 CanShoot 改为 false，按枪支的射速延时后设置 CanShoot 为 true<br>里头用到的 delay 函数时用 setTimeout 的简单封装，熟悉 TypeScript 的同学应该都知道怎么写。</li></ol><p>保存后，按下 Play 运行游戏测试下枪支的射速吧！<br><img src="/images/cos-file-url(14).gif" alt="xxx"></p><h2 id="实现受击"><a href="#实现受击" class="headerlink" title="实现受击"></a>实现受击</h2><p>在 Unreal 里，每个 Actor 都能受击。然而，Actor 要对受击伤害做出什么处理是可以自由定义的。</p><p>比如，当战斗中的游戏角色当受击时，会扣除血量。然而，像气球一类物体是没有血量概念的。取而代之的，我们会编写逻辑让气球在受击时爆炸。</p><p>打开 TS_BaseGun.ts，在 Shoot 函数添加受击逻辑</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TS_BaseGun</span> <span class="keyword">extends</span> <span class="title class_ inherited__">UE.Actor</span> &#123;</span><br><span class="line">  <span class="comment">// other code ..</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//@no-blueprint</span></span><br><span class="line">  <span class="title class_">Shoot</span>(<span class="title class_">StartLocation</span>: <span class="variable constant_">UE</span>.<span class="property">Vector</span>, <span class="title class_">EndLocation</span>: <span class="variable constant_">UE</span>.<span class="property">Vector</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> hitResultOut = $ref&lt;<span class="variable constant_">UE</span>.<span class="property">HitResult</span>&gt;(<span class="literal">undefined</span>);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="variable constant_">UE</span>.<span class="property">KismetSystemLibrary</span>.<span class="title class_">LineTraceSingle</span>(</span><br><span class="line">        <span class="variable language_">this</span>,</span><br><span class="line">        <span class="title class_">StartLocation</span>,</span><br><span class="line">        <span class="title class_">EndLocation</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="literal">undefined</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        hitResultOut,</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        <span class="literal">undefined</span>,</span><br><span class="line">        <span class="literal">undefined</span>,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">      )</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">let</span> hitResult = $unref(hitResultOut);</span><br><span class="line">      <span class="variable constant_">UE</span>.<span class="property">GameplayStatics</span>.<span class="title class_">SpawnEmitterAtLocation</span>(</span><br><span class="line">        <span class="variable language_">this</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">PS_BulletImpact</span>,</span><br><span class="line">        hitResult.<span class="property">Location</span>,</span><br><span class="line">        <span class="keyword">new</span> <span class="variable constant_">UE</span>.<span class="title class_">Rotator</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="variable constant_">UE</span>.<span class="title class_">Vector</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        <span class="variable constant_">UE</span>.<span class="property">EPSCPoolMethod</span>.<span class="property">AutoRelease</span>,</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (hitResult.<span class="property">Actor</span>) &#123;</span><br><span class="line">        <span class="variable constant_">UE</span>.<span class="property">GameplayStatics</span>.<span class="title class_">ApplyDamage</span>(</span><br><span class="line">          hitResult.<span class="property">Actor</span>,</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">Damage</span>,</span><br><span class="line">          <span class="literal">undefined</span>,</span><br><span class="line">          <span class="literal">undefined</span>,</span><br><span class="line">          <span class="literal">undefined</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增的只是 if (hitResult.Actor) {}这段，简单的对碰撞到的 Actor 调用下 ApplyDamage，把枪支的伤害值传过去。</p><p>现在我们需要处理每种 Actor 对于受击伤害的反馈。这部分内容原来的蓝图教程很简单，只是简单调用了下封装好的逻辑，我就不改造成 TypeScript 了，保留原文，有兴趣的同学可以继续实现；要改造需要用 TypeScript 实现其例子已经封装好的逻辑，而且要把地图里头的绿墙上方块，红色按钮都换成 TypeScript 模块。</p><h3 id="处理受击"><a href="#处理受击" class="headerlink" title="处理受击"></a>处理受击</h3><p>首先，我们需要处理目标获得伤害数据，打开 BP_Target 并创建 Event AnyDamage 事件节点，这个节点会在受到伤害且其数值不为零时触发执行。</p><p><img src="/images/cos-file-url(15).png" alt="xxx"></p><p>随后，调用 TakeDamage 函数并连接 Damage 引脚。这个函数会将目标的 Health 变量减去 Damage 数值，并更新目标的颜色。</p><p><img src="/images/cos-file-url(16).png" alt="xxx"></p><p>现在，当目标受到伤害时，它就会扣除血量了。点击 Compile 并关闭 BP_Target。</p><p>接着，我们需要处理按钮对伤害的反馈。打开 BP_ResetButton 并创建 Event AnyDamage。随后，调用 ResetTargets 函数。</p><p><img src="/images/cos-file-url(17).png" alt="xxx"></p><p>这个函数会在按钮受击时调用并重置所有目标的状态。点击 Compile 并关闭 BP_ResetButton。</p><p>按下 Play 运行游戏开始射击目标。如果你想要重置所有目标，就朝按钮射击。</p><p><img src="/images/d08c608f20ce180f01ca9d3a610f7_w632_h345.gif" alt="xxx"></p><h2 id="后续学习"><a href="#后续学习" class="headerlink" title="后续学习"></a>后续学习</h2><p>虽然本篇教程中所制作是一个非常简单的 FPS 游戏，你可以在此基础上进一步扩展，试着创建更多具有不用射速和伤害的枪械，也可以尝试添加装弹功能！</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> UE4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Strapi Controllers 自定义 UserId 过滤数据</title>
      <link href="/posts/2023-09-24794/"/>
      <url>/posts/2023-09-24794/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在使用 Strapi 进行开发时，我们经常需要使用控制器进行业务逻辑的处理。如果涉及到数据查询，则需要在控制器中调用 Service 来获取数据。当我们需要根据用户 ID 来查询数据时，可以使用一些方法来实现自定义过滤器。</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><p>下面介绍如何通过自定义 UserId 来过滤数据。</p><h3 id="第一步：复写控制器"><a href="#第一步：复写控制器" class="headerlink" title="第一步：复写控制器"></a>第一步：复写控制器</h3><p>首先，需要在 src 下新建公共方法，如 <code>src\utils\controllers\apiUserFilter.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">apiUserFilter</span>: <span class="function">(<span class="params">strapi, api</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">getIsUserData</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> item = <span class="keyword">await</span> strapi.<span class="property">entityService</span>.<span class="title function_">findOne</span>(api, ctx.<span class="property">params</span>.<span class="property">id</span>, &#123;</span><br><span class="line">          <span class="attr">fields</span>: [<span class="string">&quot;userID&quot;</span>],</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          item == <span class="literal">null</span> ||</span><br><span class="line">          item.<span class="property">userID</span> == <span class="literal">null</span> ||</span><br><span class="line">          <span class="title class_">Number</span>(item.<span class="property">userID</span>) !== ctx.<span class="property">state</span>.<span class="property">user</span>.<span class="property">id</span></span><br><span class="line">        ) &#123;</span><br><span class="line">          ctx.<span class="property">response</span>.<span class="property">status</span> = <span class="number">403</span>;</span><br><span class="line">          ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">data</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">error</span>: &#123;</span><br><span class="line">              <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&quot;ForbiddenError&quot;</span>,</span><br><span class="line">              <span class="attr">message</span>: <span class="string">&quot;Forbidden&quot;</span>,</span><br><span class="line">              <span class="attr">details</span>: &#123;&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">create</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">        ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">data</span> = &#123;</span><br><span class="line">          ...ctx.<span class="property">request</span>.<span class="property">body</span>.<span class="property">data</span>,</span><br><span class="line">          <span class="attr">userID</span>: ctx.<span class="property">state</span>.<span class="property">user</span>.<span class="property">id</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">super</span>.<span class="title function_">create</span>(ctx);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">find</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">        ctx.<span class="property">query</span> = &#123;</span><br><span class="line">          ...ctx.<span class="property">query</span>,</span><br><span class="line">          <span class="attr">filters</span>: &#123;</span><br><span class="line">            <span class="attr">userID</span>: &#123;</span><br><span class="line">              <span class="attr">$eq</span>: ctx.<span class="property">state</span>.<span class="property">user</span>.<span class="property">id</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; data, meta &#125; = <span class="keyword">await</span> <span class="variable language_">super</span>.<span class="title function_">find</span>(ctx);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; data, meta &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">findOne</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">super</span>.<span class="title function_">findOne</span>(ctx);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          response &amp;&amp;</span><br><span class="line">          <span class="title class_">Number</span>(response.<span class="property">data</span>.<span class="property">attributes</span>.<span class="property">userID</span>) !== ctx.<span class="property">state</span>.<span class="property">user</span>.<span class="property">id</span></span><br><span class="line">        ) &#123;</span><br><span class="line">          ctx.<span class="property">response</span>.<span class="property">status</span> = <span class="number">403</span>;</span><br><span class="line">          ctx.<span class="property">response</span>.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">data</span>: <span class="literal">null</span>,</span><br><span class="line">            <span class="attr">error</span>: &#123;</span><br><span class="line">              <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&quot;ForbiddenError&quot;</span>,</span><br><span class="line">              <span class="attr">message</span>: <span class="string">&quot;Forbidden&quot;</span>,</span><br><span class="line">              <span class="attr">details</span>: &#123;&#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">update</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> isUserData = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getIsUserData</span>(ctx);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isUserData) &#123;</span><br><span class="line">          <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">super</span>.<span class="title function_">update</span>(ctx);</span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="keyword">async</span> <span class="title function_">delete</span>(<span class="params">ctx</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> isUserData = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">getIsUserData</span>(ctx);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isUserData) &#123;</span><br><span class="line">          <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="variable language_">super</span>.<span class="title function_">delete</span>(ctx);</span><br><span class="line">          <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="第二步：添加到-api-的控制器"><a href="#第二步：添加到-api-的控制器" class="headerlink" title="第二步：添加到 api 的控制器"></a>第二步：添加到 api 的控制器</h3><p>在 <code>src\api\[api-name]\controllers\[api-name].js</code> 文件中，我们需要添加一个自定义的方法来过滤数据。例如，下面的代码可以在 <code>post</code> 时自动添加 <code>UserId</code>，当用户请求时，自动通过 <code>UserId</code> 来查询对应的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createCoreController &#125; = <span class="built_in">require</span>(<span class="string">&quot;@strapi/strapi&quot;</span>).<span class="property">factories</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; apiUserFilter &#125; = <span class="built_in">require</span>(<span class="string">&quot;../../../utils/controllers/apiUserFilter&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">createCoreController</span>(<span class="string">&quot;api::[api-name].[api-name]&quot;</span>, <span class="function">(<span class="params">&#123; strapi &#125;</span>) =&gt;</span></span><br><span class="line">  <span class="title function_">apiUserFilter</span>(strapi, <span class="string">&quot;api::[api-name].[api-name]&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在上述代码中，我们复写了一个名为 <code>create</code>、 <code>find</code>、 <code>findOne</code>、 <code>update</code>、 <code>delete</code> 的方法，并且使用 <code>ctx.state.user.id</code> 来自动创建、查找、更新、删除数据。然后，我们调用 Strapi 的服务层来查询数据，并将结果返回给客户端。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>需要注意的是，上述实现方式仅适用于根据 UserId 来查询数据。如果需要进行更复杂的数据过滤，例如根据不同字段的值进行查询，则需要使用类似 Query Params 的方式来构建查询条件，并在服务层中进行判断和查询。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了如何使用 Strapi 控制器来实现自定义数据过滤。通过对控制器文件进行修改，可以根据需要来查询和返回数据。对于更复杂的数据查询需求，可以使用类似 Query Params 的方式来构建查询条件。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Strapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Strapi v4 中如何保护用户数据的隐私性和安全性</title>
      <link href="/posts/2023-08-24187/"/>
      <url>/posts/2023-08-24187/</url>
      
        <content type="html"><![CDATA[<p>在今天的数字时代，数据安全和隐私是任何应用程序开发的重要方面。 Strapi 是一个基于 Node.js 的 Headless CMS，提供了管理和保护用户数据的强大工具。</p><h2 id="隔离用户数据"><a href="#隔离用户数据" class="headerlink" title="隔离用户数据"></a>隔离用户数据</h2><p>在 Strapi v4 中，我们可以使用插件系统来隔离每个用户的数据。这个插件系统名为 Strapi 插件 SDK。 通过使用这个插件系统，我们可以创建自定义插件，并将其集成到 Strapi 中。 这种方法使开发人员能够为不同的用户分配独立的数据空间。每个用户都有一个唯一的标识符，该标识符用于区分不同的用户，并将他们的数据存储在独立的数据库中。</p><h2 id="数据访问控制"><a href="#数据访问控制" class="headerlink" title="数据访问控制"></a>数据访问控制</h2><p>除了隔离用户数据之外，我们还需要对数据访问进行控制。在 Strapi v4 中，我们可以使用策略（Policy）和角色（Role）来控制哪些用户可以访问哪些数据。 策略定义了一组规则，这些规则决定了一个用户是否可以访问一个资源，而角色则用于为不同的用户分配权限。</p><p>每个 Strapi 用户都有一个角色。例如，我们可以将 “管理员” 角色分配给某些用户，这些用户可以访问和编辑所有的数据，而其他用户则可能只有访问他们自己的数据的权限。 通过结合策略和角色来控制数据访问，我们可以有效地保护用户数据的安全性和隐私性。</p><h2 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h2><p>admin 账号创建普通用户时会给普通用户设置初始密码，这部分数据都是保存在数据库中的，admin 账户激活时的密码也是保存在数据库中。数据库并不是保险箱，也存在被攻击的可能性，导致用户数据被盗，因此对入库的数据中安全级别较高的字段进行加密处理。</p><p>对于应用程序中的敏感数据，我们建议使用加密算法来保护它们。例如，在 Strapi v4 中，我们可以使用加密模块（crypto module）来实现数据加密。 这个模块提供了多种加密算法，例如 AES 和 RSA，可以帮助开发人员加密和解密数据，从而保护用户数据的安全性。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在 Strapi v4 中，我们可以使用插件系统来隔离每个用户的数据，并使用策略和角色来控制数据访问。此外，我们还可以使用加密算法来保护敏感数据。通过这些安全性和隐私性保护措施，我们可以更好地管理和保护用户数据。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Strapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分层架构的理解与应用</title>
      <link href="/posts/2023-06-43333/"/>
      <url>/posts/2023-06-43333/</url>
      
        <content type="html"><![CDATA[<p>最近在整理 common 库，加深了对下面一句话的理解：“计算机科学领域的任何问题都可以通过增加一个中间层来解决“，这里记录下。</p><blockquote><p>Any problem in computer science can be solved by anther layer of indirection.</p></blockquote><h2 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h2><p>先谈谈业务与技术的关系。</p><p>业务做的太少，技术比较难提升，做的太多了，就成了搬砖工。二者有点相爱相杀的关系，只有适度的、有挑战性的业务才能促进技术成长。</p><p>另外，业务工作是最占时间的，只有提高业务上的工作效率，才能做更多的 kpi 项目，或者自我提升。</p><p>技术上的心得，应该多半都是业务上的，而不是 kpi 项目的，业务做的不够好、不够稳定，一天到晚都在改 bug，谈不上技术提升。</p><p>如何提高业务上的效率呢？需要从一些设计、细节做起，提高复用性、通用性、扩展性，提高抽象能力。</p><p>比如，业务不仅要考虑本次需求实现的高效，也要考虑后续迭代的效率和稳定，所以需要抽象、拆分组件模块，方便扩展，也就是为什么单个文件不应该很大。所以即便没有复用，也会从大文件中抽离一部分组件。</p><h2 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a>分层架构</h2><p>分层架构是最常见的软件架构，要是不知道用什么架构，或者不知道怎么解决问题，那就尝试加多一层。</p><p>分层架构可以看做其他架构（模式）的基础，比如洋葱模型、MVVM、MVC、虚拟 DOM、Vuex、微前端、发布订阅，这些都可以当作分层架构的扩展。</p><p>分层架构，有点像武侠中的“天下武功，唯快不破”，大道至简，用最简单的方法解决问题。</p><p>下面是一些最近做的，可以体现分层架构的设计。注意，下面的例子只是体现了分层架构的思想，是开发过程中的实际问题。</p><h3 id="index-js-收口"><a href="#index-js-收口" class="headerlink" title="index.js 收口"></a>index.js 收口</h3><p>common 库更新后，业务侧需要更改引用路径。</p><p>之前</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCityName &#125; <span class="keyword">from</span> <span class="string">&quot;src/comm/tools/city&quot;</span>;</span><br></pre></td></tr></table></figure><p>需要改成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCityName &#125; <span class="keyword">from</span> <span class="string">&quot;src/common/tools/city&quot;</span>;</span><br></pre></td></tr></table></figure><p>业务有大量这种类似的引用，挨个查找、替换的话太费劲，而且如果改成上面这种，保不准哪天 common 又改了引用路径。</p><p>优化方法就是为 common 库提供一个收口 index.ts：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;tools/city&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;tools/env&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;tools/url&quot;</span>;</span><br></pre></td></tr></table></figure><p>业务侧只需要改成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCityName, getEnv &#125; <span class="keyword">from</span> <span class="string">&quot;src/common&quot;</span>;</span><br></pre></td></tr></table></figure><p>顶层不用关心底层，只要为我提供一个帮助方法。底层负责对外接口的稳定，内部如何升级，顶层不用关注。比如 vue2 内的升级不会影响用户使用。</p><p>类似的，一个页面上，同种类型的多个请求接口、同种类型的多个组件，都可以用这种收口。</p><h3 id="引用路径别名"><a href="#引用路径别名" class="headerlink" title="引用路径别名"></a>引用路径别名</h3><p>还是上面那个例子，有没有其他办法让业务保持稳定，减少改动呢？</p><p>可以在引用路径上下手，利用路径别名。业务只要引用路径别名，而别名具体指向的是什么，外层根本不关心。</p><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alias</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;@url&#x27;</span>: <span class="string">&#x27;src/common/tools/city&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假如，某一天底层库发布到了 npm 上，就改下 alias 配置就行了，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alias</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;@url&#x27;</span>: <span class="string">&#x27;t-comm&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>业务侧始终这样使用，爽歪歪：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getUrlParam &#125; <span class="keyword">from</span> <span class="string">&quot;@url&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="Module-模块的抽离"><a href="#Module-模块的抽离" class="headerlink" title="Module 模块的抽离"></a>Module 模块的抽离</h3><p>这个是较早实现的功能，主要思想是将组件分为两类：不带逻辑的 UI 组件和带逻辑的 Module 组件。</p><ul><li>UI 组件只能引用 UI 组件</li><li>Module 组件由 UI 组件或者其他 Module 组件构成</li><li>页面可以由两者构成</li></ul><p>这样保持一种单向依赖架构。</p><p>增加了一个 Module 层，有以下好处：</p><ol><li>重构人员可修改 UI 组件，不修改带逻辑的 Module 组件，分工明确</li><li>UI 组件可有多种类型，比如 PC 版本、H5 版本等，一套逻辑可以多处复用</li></ol><h3 id="logic-子仓库"><a href="#logic-子仓库" class="headerlink" title="logic 子仓库"></a>logic 子仓库</h3><p>这个也是较早实现的功能，主要解决逻辑的复用。</p><p>比如后台多个接口可能复用同一个结构体，前端需要对这一个结构体做一些格式化、解析的工作，我们把这部分抽离出来，而不是每个页面都单独处理。</p><p>这个处理可能是跨工程、跨仓库的，我们把它沉淀成子仓库，从而更好的使用。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有一些公共方法的提取，比如之前是这样写接口请求的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; post &#125; <span class="keyword">from</span> <span class="string">&quot;src/comm/logic/api/comm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fetchScheList</span>(<span class="params">&#123; gid, start = <span class="number">0</span>, num = <span class="number">10</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reqData = &#123;</span><br><span class="line">      gid,</span><br><span class="line">      start,</span><br><span class="line">      num,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">post</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;/a.b.c.d&quot;</span>,</span><br><span class="line">      reqData,</span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = resp.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个接口都要写一次 return new Promise(…)，其实可以再包装一层：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// make-request.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; post &#125; <span class="keyword">from</span> <span class="string">&quot;src/comm/logic/api/comm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">makeRequest</span>(<span class="params">&#123; data, url &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">post</span>(&#123;</span><br><span class="line">      url,</span><br><span class="line">      <span class="attr">reqData</span>: data,</span><br><span class="line">    &#125;)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = resp.<span class="property">data</span> || &#123;&#125;;</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口请求的 logic 可以这样使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; makeRequest &#125; <span class="keyword">from</span> <span class="string">&#x27;@makeRequest&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fetchScheList</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">  gid,</span></span><br><span class="line"><span class="params">  start = <span class="number">0</span>,</span></span><br><span class="line"><span class="params">  num = <span class="number">10</span>,</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">makeRequest</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      gid,</span><br><span class="line">      start = <span class="number">0</span>,</span><br><span class="line">      num = <span class="number">10</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/a.b.c.d&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>makeRequest 可以再增加一些 mock 数据、url 前缀统一处理等。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>架构的根本目的是解决问题。当一个新问题出现后，往往是某种方法解决了问题，恰好它可以被看作什么架构，而不是非要套用什么什么架构。</p><p>什么时候重构代码呢，当代码混乱、庞杂、冗余，通用性不足时，就可以考虑重构，比如提取公共部分、封装公共模块。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>敏捷开发：快速响应变化的高效模式</title>
      <link href="/posts/2023-05-24775/"/>
      <url>/posts/2023-05-24775/</url>
      
        <content type="html"><![CDATA[<p>敏捷开发起源于美国，是一种迭代式软件开发模式，它通过在短时间内完成一个个小的增量（通常称为“冲刺”）来缩短 DevOps 生命周期。与传统的瀑布式开发相比，敏捷开发更加迅速、灵活和容易适应变化，已经成为现代软件开发的主流方向。</p><h2 id="敏捷开发的起源和定义"><a href="#敏捷开发的起源和定义" class="headerlink" title="敏捷开发的起源和定义"></a>敏捷开发的起源和定义</h2><p>敏捷开发最早由 17 位软件开发专家于 2001 年共同提出并签署了《敏捷软件开发宣言》（Manifesto for Agile Software Development），其中定义了敏捷开发的价值观和原则。它强调个体和交互、工作软件、客户合作和响应变化等核心价值，试图通过这些价值去推进软件开发的进展。</p><p>根据敏捷开发的原则，它们强调快速响应变化、频繁交付、持续反馈和协作，并鼓励团队满足客户需求、及时响应变化，同时保持代码质量和项目进度。</p><h2 id="敏捷开发的好处"><a href="#敏捷开发的好处" class="headerlink" title="敏捷开发的好处"></a>敏捷开发的好处</h2><p>敏捷开发的好处非常多，而这也是为什么越来越多的大型公司开发团队选择敏捷开发的原因。以下是敏捷开发的一些优点：</p><ol><li>加速产品开发：通过快速迭代和频繁交付，缩短软件开发周期，提高产品发布速度。</li><li>提高质量：持续反馈和测试可以更早地发现问题，减少软件缺陷和错误，从而提高产品质量。</li><li>增加客户满意度：敏捷开发强调与客户的合作与交流，不断满足客户需求，从而提高客户满意度。</li><li>提高团队协作能力：快速迭代和密切协作有助于增进团队成员之间的相互了解和协作，提高团队效率和成员的工作满意度。</li></ol><h2 id="敏捷开发的挑战"><a href="#敏捷开发的挑战" class="headerlink" title="敏捷开发的挑战"></a>敏捷开发的挑战</h2><p>敏捷开发也面临着一些挑战，例如：</p><ol><li>规划的不确定性：由于变化是敏捷开发固有的特点，敏捷开发过程中需求变更频繁，项目的进展很难预测。</li><li>文档的缺乏：敏捷开发注重实际的工作软件，因此文档可能不够完善，难以满足某些项目管理需求。</li><li>沟通和协作的挑战：敏捷开发需要高度的沟通和协作，如果团队成员间的沟通不畅或协作不力，会对项目进展和质量产生影响。</li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>综上所述，敏捷开发已经成为现代软件开发的主流方向，它能够提高产品开发效率和质量，增加客户满意度，同时提高团队成员的协作能力。虽然敏捷开发也存在一些挑战和不足，但只要合理地运用敏捷开发的原则和方法，就可以克服这些挑战，并且更好地应对变化。因此，无论是个人开发者还是企业开发团队，都应该学习和掌握敏捷开发，以适应快速变化的市场和技术环境。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>strapi-plugin-sdk 库及使用指南</title>
      <link href="/posts/2023-04-43352/"/>
      <url>/posts/2023-04-43352/</url>
      
        <content type="html"><![CDATA[<p>Strapi 是一个开源的 Node.js Headless CMS，最近更新到了 v4 版本，其中一个最重要的更新就是插件 API 的改进，使 Strapi 更好地支持自定义插件的开发。而 strapi-plugin-sdk 就是这个新 API 的核心库之一，用于帮助开发者快速创建和集成自定义插件。</p><h2 id="什么是-strapi-plugin-sdk？"><a href="#什么是-strapi-plugin-sdk？" class="headerlink" title="什么是 strapi-plugin-sdk？"></a>什么是 strapi-plugin-sdk？</h2><p>strapi-plugin-sdk 是开发 Strapi 插件时必须使用的核心库之一。该库提供了一组常用的函数和工具，使得开发人员可以更轻松地与 Strapi 系统进行交互，并实现自定义插件的功能。</p><p>该库可以用于许多插件任务，例如添加自定义字段、创建自定义 Controller 和 Service 等等。</p><h2 id="strapi-plugin-sdk-的安装和使用"><a href="#strapi-plugin-sdk-的安装和使用" class="headerlink" title="strapi-plugin-sdk 的安装和使用"></a>strapi-plugin-sdk 的安装和使用</h2><p>在开始使用 strapi-plugin-sdk 之前，你需要在 Strapi 项目中安装它。你可以通过 npm 命令来完成安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save strapi-plugin-sdk</span><br></pre></td></tr></table></figure><p>安装完成后，你可以开始编写自己的插件并使用 strapi-plugin-sdk 进行开发。</p><p>下面是一个简单的示例，展示如何使用 strapi-plugin-sdk 添加一个自定义字段到用户模型中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pluginId = <span class="string">&quot;my-plugin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义自定义字段的名称和类型</span></span><br><span class="line"><span class="keyword">const</span> customFields = &#123;</span><br><span class="line">  <span class="attr">myField</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;string&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">beforeInitialize</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 注册自定义字段到用户模型</span></span><br><span class="line">    <span class="keyword">await</span> strapi.<span class="property">db</span>.<span class="title function_">query</span>(<span class="string">`</span></span><br><span class="line"><span class="string">      ALTER TABLE <span class="subst">$&#123;pluginId&#125;</span>_users ADD COLUMN my_field text;</span></span><br><span class="line"><span class="string">    `</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">initialize</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 创建自定义 Controller 和 Service</span></span><br><span class="line">    <span class="keyword">const</span> &#123; myController, myService &#125; = strapi.<span class="property">plugins</span>[pluginId].<span class="property">controllers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加自定义路由</span></span><br><span class="line">    strapi.<span class="property">router</span>.<span class="title function_">post</span>(</span><br><span class="line">      <span class="string">`/plugins/<span class="subst">$&#123;pluginId&#125;</span>/my-route`</span>,</span><br><span class="line">      myController.<span class="property">myRouteHandler</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extendUserModel</span>: <span class="function">(<span class="params">model</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 添加自定义字段到用户模型</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(model.<span class="property">attributes</span>, customFields);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们首先通过 pluginId 定义了一个插件标识符，然后定义了一个名为 customFields 的对象，其中包含了要添加到用户模型中的自定义字段定义。</p><p>接下来，在 beforeInitialize 阶段，我们使用 strapi.db.query 函数将新的字段添加到用户模型中。在 initialize 阶段，我们注册了一个自定义 Controller 和 Service，并添加了一个自定义路由。最后，在 extendUserModel 阶段，我们将自定义字段添加到用户模型中。</p><p>通过这些步骤，你就可以使用 strapi-plugin-sdk 构建自己的 Strapi 插件。</p><h2 id="strapi-plugin-sdk-的-API"><a href="#strapi-plugin-sdk-的-API" class="headerlink" title="strapi-plugin-sdk 的 API"></a>strapi-plugin-sdk 的 API</h2><p>strapi-plugin-sdk 提供了一组常用的函数和工具，使得开发人员可以更轻松地与 Strapi 系统进行交互，并实现自定义插件的功能。</p><h3 id="createSchema"><a href="#createSchema" class="headerlink" title="createSchema"></a>createSchema</h3><p>createSchema 函数用于创建一个新的模式，该模式可以用于定义自定义字段。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createSchema &#125; = <span class="built_in">require</span>(<span class="string">&quot;strapi-plugin-sdk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> schema = <span class="title function_">createSchema</span>(&#123;</span><br><span class="line">  <span class="attr">myField</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="createModel"><a href="#createModel" class="headerlink" title="createModel"></a>createModel</h3><p>createModel 函数用于创建一个新的模型，该模型可以用于定义自定义字段。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createModel &#125; = <span class="built_in">require</span>(<span class="string">&quot;strapi-plugin-sdk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> model = <span class="title function_">createModel</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;my-model&quot;</span>,</span><br><span class="line">  <span class="attr">attributes</span>: &#123;</span><br><span class="line">    <span class="attr">myField</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="createController"><a href="#createController" class="headerlink" title="createController"></a>createController</h3><p>createController 函数用于创建一个新的 Controller，该 Controller 可以用于定义自定义 Controller。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createController &#125; = <span class="built_in">require</span>(<span class="string">&quot;strapi-plugin-sdk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> controller = <span class="title function_">createController</span>(&#123;</span><br><span class="line">  <span class="attr">myRouteHandler</span>: <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="createService"><a href="#createService" class="headerlink" title="createService"></a>createService</h3><p>createService 函数用于创建一个新的 Service，该 Service 可以用于定义自定义 Service。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createService &#125; = <span class="built_in">require</span>(<span class="string">&quot;strapi-plugin-sdk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = <span class="title function_">createService</span>(&#123;</span><br><span class="line">  <span class="attr">myServiceMethod</span>: <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="createRouter"><a href="#createRouter" class="headerlink" title="createRouter"></a>createRouter</h3><p>createRouter 函数用于创建一个新的路由器，该路由器可以用于定义自定义路由。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createRouter &#125; = <span class="built_in">require</span>(<span class="string">&quot;strapi-plugin-sdk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&quot;/my-route&quot;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="createLifecycle"><a href="#createLifecycle" class="headerlink" title="createLifecycle"></a>createLifecycle</h3><p>createLifecycle 函数用于创建一个新的生命周期，该生命周期可以用于定义自定义生命周期。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createLifecycle &#125; = <span class="built_in">require</span>(<span class="string">&quot;strapi-plugin-sdk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lifecycle = <span class="title function_">createLifecycle</span>(&#123;</span><br><span class="line">  <span class="attr">beforeInitialize</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">initialize</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeBootstrap</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">bootstrap</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeStart</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">start</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">beforeStop</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">stop</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="createPlugin"><a href="#createPlugin" class="headerlink" title="createPlugin"></a>createPlugin</h3><p>createPlugin 函数用于创建一个新的插件，该插件可以用于定义自定义插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;strapi-plugin-sdk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> plugin = <span class="title function_">createPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;my-plugin&quot;</span>,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="createStrapi"><a href="#createStrapi" class="headerlink" title="createStrapi"></a>createStrapi</h3><p>createStrapi 函数用于创建一个新的 Strapi 实例，该实例可以用于定义自定义 Strapi 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createStrapi &#125; = <span class="built_in">require</span>(<span class="string">&quot;strapi-plugin-sdk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strapi = <span class="title function_">createStrapi</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="strapi-plugin-sdk-的示例"><a href="#strapi-plugin-sdk-的示例" class="headerlink" title="strapi-plugin-sdk 的示例"></a>strapi-plugin-sdk 的示例</h2><p>strapi-plugin-sdk 提供了一组常用的函数和工具，使得开发人员可以更轻松地与 Strapi 系统进行交互，并实现自定义插件的功能。下面是一个简单的示例，展示了如何使用 strapi-plugin-sdk 创建一个自定义插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createPlugin &#125; = <span class="built_in">require</span>(<span class="string">&quot;strapi-plugin-sdk&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pluginId = <span class="string">&quot;my-plugin&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> customFields = &#123;</span><br><span class="line">  <span class="attr">myField</span>: &#123; <span class="attr">type</span>: <span class="string">&quot;string&quot;</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">createPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: pluginId,</span><br><span class="line">  <span class="attr">beforeInitialize</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> strapi.<span class="property">db</span>.<span class="title function_">query</span>(<span class="string">`</span></span><br><span class="line"><span class="string">      ALTER TABLE <span class="subst">$&#123;pluginId&#125;</span>_users ADD COLUMN my_field text;</span></span><br><span class="line"><span class="string">    `</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">initialize</span>: <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; myController, myService &#125; = strapi.<span class="property">plugins</span>[pluginId].<span class="property">controllers</span>;</span><br><span class="line"></span><br><span class="line">    strapi.<span class="property">router</span>.<span class="title function_">post</span>(</span><br><span class="line">      <span class="string">`/plugins/<span class="subst">$&#123;pluginId&#125;</span>/my-route`</span>,</span><br><span class="line">      myController.<span class="property">myRouteHandler</span></span><br><span class="line">    );</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extendUserModel</span>: <span class="function">(<span class="params">model</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(model.<span class="property">attributes</span>, customFields);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="strapi-plugin-sdk-的注意事项"><a href="#strapi-plugin-sdk-的注意事项" class="headerlink" title="strapi-plugin-sdk 的注意事项"></a>strapi-plugin-sdk 的注意事项</h2><p>在使用 strapi-plugin-sdk 开发插件时，需要注意以下几点：</p><ol><li>strapi-plugin-sdk 仅支持 Strapi v3.6.0 及以上版本。</li><li>异步函数：大多数 strapi-plugin-sdk 函数都是异步的，因此你需要注意这些函数的执行顺序和返回值。</li><li>插件 ID：在使用 strapi-plugin-sdk 时，必须在你的插件中定义一个唯一的 ID，并在整个插件开发过程中保持一致。</li><li>数据库访问：如果你需要访问 Strapi 数据库中的数据，你可以使用 strapi.query 或 strapi.db.query 函数。但请注意，访问数据库时需要小心，确保数据的安全性和合法性。</li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>strapi-plugin-sdk 是一个强大的库，可帮助开发者更轻松地构建自定义 Strapi 插件。通过使用该库，你可以加快插件开发的速度，并为你的应用程序添加更多的功能和定制选项。当然，在使用该库时，你需要小心并遵循最佳实践，确保插件的质量和安全性。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Strapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Strapi v4的用户数据隔离方案</title>
      <link href="/posts/2023-04-26457/"/>
      <url>/posts/2023-04-26457/</url>
      
        <content type="html"><![CDATA[<p>随着现代化的应用程序越来越常见，数据隔离越来越成为开发人员的必备技能。Strapi 是一个流行的 Headless CMS，可以帮助我们快速构建现代 Web 应用程序。在 Strapi v4 中， 数据隔离是一个非常重要的更新之一，使得开发人员可以更好地管理和保护用户的数据。</p><h2 id="什么是-Strapi-v4-的用户数据隔离方案？"><a href="#什么是-Strapi-v4-的用户数据隔离方案？" class="headerlink" title="什么是 Strapi v4 的用户数据隔离方案？"></a>什么是 Strapi v4 的用户数据隔离方案？</h2><p>Strapi v4 引入了一种新的插件系统，名为 Strapi 插件 SDK。这个插件系统使得开发人员可以构建自定义的插件，并将其集成到 Strapi 中。其中一个最有用的插件是用户数据隔离插件。该插件旨在帮助解决 Strapi 用户在多租户环境中实现数据隔离的问题。</p><p>在多租户环境中，不同的用户需要访问不同的数据，例如不同的用户需要访问他们自己的文章、评论或订单。为了保证数据的安全性和隐私性，我们需要实现数据隔离，即确保每个用户只能访问他们自己的数据。</p><p>Strapi v4 的用户数据隔离方案利用 Strapi 插件 SDK，使开发人员可以轻松地为不同的用户分配独立的数据空间。在这个方案中，每个用户都有一个唯一的标识符，这个标识符被用于区分不同的用户，并将他们的数据存储在独立的数据库中。</p><h2 id="如何使用-Strapi-v4-的用户数据隔离方案？"><a href="#如何使用-Strapi-v4-的用户数据隔离方案？" class="headerlink" title="如何使用 Strapi v4 的用户数据隔离方案？"></a>如何使用 Strapi v4 的用户数据隔离方案？</h2><p>现在，我们将演示如何使用 Strapi v4 的用户数据隔离方案来创建一个多租户 Web 应用程序。</p><h3 id="1-安装-Strapi-v4"><a href="#1-安装-Strapi-v4" class="headerlink" title="1. 安装 Strapi v4"></a>1. 安装 Strapi v4</h3><p>首先，我们需要下载并安装 Strapi v4。你可以通过 npm 或者 yarn 来下载 Strapi v4。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install strapi@beta -g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn global add strapi@beta</span><br></pre></td></tr></table></figure><h3 id="2-创建-Strapi-项目"><a href="#2-创建-Strapi-项目" class="headerlink" title="2. 创建 Strapi 项目"></a>2. 创建 Strapi 项目</h3><p>接下来，我们需要使用 Strapi CLI 创建一个新项目。打开终端并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strapi new my-project --quickstart</span><br></pre></td></tr></table></figure><p>这将创建一个名为 my-project 的新 Strapi 项目。</p><h3 id="3-安装-Strapi-插件-SDK"><a href="#3-安装-Strapi-插件-SDK" class="headerlink" title="3. 安装 Strapi 插件 SDK"></a>3. 安装 Strapi 插件 SDK</h3><p>在创建 Strapi 项目之后，我们需要安装 Strapi 插件 SDK。这个插件 SDK 使得开发人员可以轻松地创建自定义插件，并将其集成到 Strapi 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line"></span><br><span class="line">npm install strapi-plugin-sdk</span><br></pre></td></tr></table></figure><h3 id="4-创建用户数据隔离插件"><a href="#4-创建用户数据隔离插件" class="headerlink" title="4. 创建用户数据隔离插件"></a>4. 创建用户数据隔离插件</h3><p>现在，我们需要使用 Strapi 插件 SDK 创建一个用户数据隔离插件。创建一个名为 user-tenant 的新插件，并运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strapi generate:plugin user-tenant```</span><br></pre></td></tr></table></figure><p>该命令将创建一个名为 user-tenant 的新插件。在这个插件的目录中，我们需要创建一个新的 models 目录，并创建一个名为 user.js 的新模型。该模型定义了用户的属性和字段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> user-tenant</span><br><span class="line"><span class="built_in">mkdir</span> models</span><br></pre></td></tr></table></figure><p>打开 user.js 文件，并加入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">definition</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">password</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">email</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">tenants</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;relation&quot;</span>,</span><br><span class="line">      <span class="attr">relation</span>: <span class="string">&quot;hasMany&quot;</span>,</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&quot;tenant&quot;</span>,</span><br><span class="line">      <span class="attr">targetAttribute</span>: <span class="string">&quot;users&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个模型定义中，我们定义了用户的属性和字段，例如用户名、密码和电子邮件地址。我们还将 tenants 属性定义为一个关系属性，该属性与 tenant 模型相关联。每个用户可以属于多个租户，因此我们使用 hasMany 关系。</p><h3 id="4-创建租户模型"><a href="#4-创建租户模型" class="headerlink" title="4. 创建租户模型"></a>4. 创建租户模型</h3><p>接下来，我们需要为每个租户创建一个模型。例如，我们可以创建一个名为 tenant.js 的模型，并将其定义为以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">definition</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">users</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;relation&quot;</span>,</span><br><span class="line">      <span class="attr">relation</span>: <span class="string">&quot;hasMany&quot;</span>,</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">      <span class="attr">targetAttribute</span>: <span class="string">&quot;tenants&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个模型定义中，我们定义了租户的属性和字段，例如名称和用户。每个租户可以有多个用户，因此我们使用 hasMany 关系。</p><h3 id="5-配置用户数据隔离插件"><a href="#5-配置用户数据隔离插件" class="headerlink" title="5. 配置用户数据隔离插件"></a>5. 配置用户数据隔离插件</h3><p>现在，我们需要配置用户数据隔离插件。 打开 user-tenant 插件目录中的 config 目录，并创建一个名为 settings.js 的文件。在该文件中，我们将定义租户数据的配置，包括数据库和集合名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">database</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;user_tenant&quot;</span>,</span><br><span class="line">    <span class="attr">connector</span>: <span class="string">&quot;mongoose&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: process.<span class="property">env</span>.<span class="property">DB_URL</span> || <span class="string">&quot;mongodb://localhost:27017/user_tenant&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">collections</span>: &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&quot;user_tenant_users&quot;</span>,</span><br><span class="line">    <span class="attr">tenant</span>: <span class="string">&quot;user_tenant_tenants&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这个配置文件中，我们定义了 mongodb 数据库的名称、连接器和 URL。我们还定义了 user 和 tenant 集合的名称。</p><h3 id="6-运行和测试应用程序"><a href="#6-运行和测试应用程序" class="headerlink" title="6. 运行和测试应用程序"></a>6. 运行和测试应用程序</h3><p>现在，我们已经完成了用户数据隔离插件的创建和配置。我们可以重新启动 Strapi 应用程序，并测试一下它是否正常工作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strapi develop</span><br></pre></td></tr></table></figure><p>通过浏览器访问 <a href="http://localhost:1337/admin">http://localhost:1337/admin</a> 并查看用户和租户模型。你应该能够看到每个用户只能访问他们自己的数据，而不会访问其他用户的数据。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Strapi v4 的用户数据隔离方案使得在多租户环境中实现数据隔离变得更加容易。通过使用 Strapi 插件 SDK，开发人员可以创建自定义插件，并实现数据安全和隐私。当然，这仅仅是一个简单的示例，你还应该根据你的特定需求调整它。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Strapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Strapi 注册自动发送验证邮件</title>
      <link href="/posts/2023-03-1132/"/>
      <url>/posts/2023-03-1132/</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>本方案使用 <code>@strapi/provider-email-nodemailer</code> 插件，在项目根目录执行以下命令安装依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">using npm</span></span><br><span class="line">npm install @strapi/provider-email-nodemailer --save</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">using yarn</span></span><br><span class="line">yarn add @strapi/provider-email-nodemailer</span><br></pre></td></tr></table></figure><h2 id="配置邮箱的授权码"><a href="#配置邮箱的授权码" class="headerlink" title="配置邮箱的授权码"></a>配置邮箱的授权码</h2><p>这里使用的是 qq 邮箱，依次点击 “设置” - “帐户” - “帐户” - “获取授权码（如下图）：</p><p><img src="/images/1132-1.jpg" alt="获取授权码"></p><h2 id="配置插件文件"><a href="#配置插件文件" class="headerlink" title="配置插件文件"></a>配置插件文件</h2><p>修改 strapi 工程 config&#x2F;plugins.js ，如下图：</p><p><img src="/images/1132-2.jpg" alt="在 strapi 工程配置插件"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// path: ./config/plugins.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">&#123; env &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">email</span>: &#123;</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">provider</span>: <span class="string">&quot;nodemailer&quot;</span>,</span><br><span class="line">      <span class="attr">providerOptions</span>: &#123;</span><br><span class="line">        <span class="comment">// QQ邮箱服务器和默认端口</span></span><br><span class="line">        <span class="attr">host</span>: <span class="title function_">env</span>(<span class="string">&quot;SMTP_HOST&quot;</span>, <span class="string">&quot;smtp.qq.com&quot;</span>),</span><br><span class="line">        <span class="attr">port</span>: <span class="title function_">env</span>(<span class="string">&quot;SMTP_PORT&quot;</span>, <span class="number">465</span>),</span><br><span class="line">        <span class="attr">auth</span>: &#123;</span><br><span class="line">          <span class="comment">// 发送账号和客户端鉴权码</span></span><br><span class="line">          <span class="attr">user</span>: <span class="title function_">env</span>(<span class="string">&quot;SMTP_USERNAME&quot;</span>, <span class="string">&quot;xxx@qq.com&quot;</span>),</span><br><span class="line">          <span class="attr">pass</span>: <span class="title function_">env</span>(<span class="string">&quot;SMTP_PASSWORD&quot;</span>, <span class="string">&quot;xxxxxxxxxxx&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ... any custom nodemailer options</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">settings</span>: &#123;</span><br><span class="line">        <span class="comment">// 默认发送账号</span></span><br><span class="line">        <span class="attr">defaultFrom</span>: <span class="string">&quot;xxx@qq.com&quot;</span>,</span><br><span class="line">        <span class="comment">// 默认回复账号</span></span><br><span class="line">        <span class="attr">defaultReplyTo</span>: <span class="string">&quot;xxx@qq.com&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="发送测试邮件"><a href="#发送测试邮件" class="headerlink" title="发送测试邮件"></a>发送测试邮件</h2><p><img src="/images/1132-3.jpg" alt="在 strapi 工程配置插件"></p><p>收到以下邮件，代表配置成功：</p><p><img src="/images/1132-4.jpg" alt="测试邮件"></p><h2 id="注册自动发送验证邮件"><a href="#注册自动发送验证邮件" class="headerlink" title="注册自动发送验证邮件"></a>注册自动发送验证邮件</h2><h3 id="管理后台开启注册自动发送邮件"><a href="#管理后台开启注册自动发送邮件" class="headerlink" title="管理后台开启注册自动发送邮件"></a>管理后台开启注册自动发送邮件</h3><p><img src="/images/1132-5.jpg" alt="开启注册自动发送邮件"></p><h3 id="开启-public-角色发送邮件权限"><a href="#开启-public-角色发送邮件权限" class="headerlink" title="开启 public 角色发送邮件权限"></a>开启 public 角色发送邮件权限</h3><p><img src="/images/1132-6.jpg" alt="开启 public 角色发送邮件权限"></p><h3 id="修改注册邮件模板"><a href="#修改注册邮件模板" class="headerlink" title="修改注册邮件模板"></a>修改注册邮件模板</h3><p><img src="/images/1132-7.jpg" alt="修改注册邮件模板"></p><h3 id="测试注册接口"><a href="#测试注册接口" class="headerlink" title="测试注册接口"></a>测试注册接口</h3><p>调用注册接口，可使用 postman 测试或 axios 等方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Request API.</span></span><br><span class="line"><span class="comment">// Add your own code here to customize or restrict how the public can register new users.</span></span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">post</span>(<span class="string">&quot;http://localhost:1337/api/auth/local/register&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;Strapi user&quot;</span>,</span><br><span class="line">    <span class="attr">email</span>: <span class="string">&quot;user@strapi.io&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;strapiPassword&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Handle success.</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Well done!&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User profile&quot;</span>, response.<span class="property">data</span>.<span class="property">user</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User token&quot;</span>, response.<span class="property">data</span>.<span class="property">jwt</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Handle error.</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;An error occurred:&quot;</span>, error.<span class="property">response</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>调用成功会收到一封邮件以及在 user 表中有一条记录，未确认之前 CONFIRMED 字段是 false<br><img src="/images/1132-8.jpg" alt="user 表 CONFIRMED 字段为 false"></p><p><img src="/images/1132-9.jpg" alt="user 表 CONFIRMED 字段为 false"></p><p>确认之后，CONFIRMED 字段状态改变为 true，并且自动跳转到我们 5.1 设置的 url 中。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Strapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>低代码平台组件过渡动画兼容方案</title>
      <link href="/posts/2023-03-11028/"/>
      <url>/posts/2023-03-11028/</url>
      
        <content type="html"><![CDATA[<p>在我们公司的低代码平台里，需要给组件添加默认的进场动画，此为需求。</p><p>这就需要通过在组件 <code>mounted</code> 的时候，手动触发 <code>CSSTransition</code> 的过渡效果。同时在组件 <code>will mount</code> 的时候等待动画执行完毕之后，再通知父组件组件动画已完成，可以进行关闭操作。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CSSTransition</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-transition-group&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制组件显示和隐藏</span></span><br><span class="line"><span class="keyword">const</span> [visible, setVisible] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> timerRef = (useRef &lt; number) | (<span class="literal">null</span> &gt; <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 组件挂载之后设置，不然渲染完毕组件过渡动画也执行完成</span></span><br><span class="line">  <span class="title function_">setVisible</span>(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (timerRef.<span class="property">current</span>) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timerRef.<span class="property">current</span>);</span><br><span class="line">      timerRef.<span class="property">current</span> = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleClose = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 等待关闭动画执行完成</span></span><br><span class="line">  <span class="title function_">setVisible</span>(<span class="literal">false</span>);</span><br><span class="line">  timerRef.<span class="property">current</span> = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    timerRef.<span class="property">current</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再通知父组件，以销毁当前组件</span></span><br><span class="line">    onClose &amp;&amp; <span class="title function_">onClose</span>();</span><br><span class="line">  &#125;, <span class="number">300</span>);</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">CSSTransition</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">in</span>=<span class="string">&#123;visible&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">timeout</span>=<span class="string">&#123;300&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">classNames</span>=<span class="string">&quot;panel-bottom&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">unmountOnExit</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &gt;</span><span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Storybook 入门指引和技术细节</title>
      <link href="/posts/2023-01-43580/"/>
      <url>/posts/2023-01-43580/</url>
      
        <content type="html"><![CDATA[<p>Storybook 是一个用于辅助前端组件开发的开源工具。它支持多种框架，包括 React、Vue 和 Angular。它为 UI 组件提供了一个独立的沙箱环境，可以让开发者在这里创建各种场景模拟，并展现出来。这些场景模拟可以像一本书里的故事一样，用来展示组件的使用场景和效果。接下来，我们将带您进入 Storybook 的世界。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>如果您准备使用 React 开发组件，那么您需要安装 Storybook 的 React 版本。安装过程非常简单。以 React 为例，只需在终端中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx storybook@latest init</span><br></pre></td></tr></table></figure><p>这个命令将在您的项目中生成.storybook 文件夹和.storybook&#x2F;main.js 文件。现在您已经完成了安装过程，可以开始使用 Storybook 了。</p><h2 id="创建故事（Story）"><a href="#创建故事（Story）" class="headerlink" title="创建故事（Story）"></a>创建故事（Story）</h2><p>Story 是 Storybook 中的一个基本单位，它指一个组件在特定状态下的视觉呈现。以 React 为例，我们可以使用 storiesOf 函数来创建 Story。假设我们有一个 Button 组件，那么我们可以在.storybook 文件夹中创建一个 Button.stories.js 文件来定义它的 Story。代码如下：</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Storybook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 React.forwardRef、useImperativeHandle 实现 Toast Notification Message</title>
      <link href="/posts/2022-08-63789/"/>
      <url>/posts/2022-08-63789/</url>
      
        <content type="html"><![CDATA[<p>在 React 中，通常情况下我们是通过 Props 来传递父组件和子组件之间的数据和方法的。然而在一些特殊场景下，使用 Props 并不能满足我们的需求。例如，在使用第三方库或者类似于 HOC（Higher Order Component）的方式将组件进行封装时，我们可能无法直接修改子组件的 Props。</p><h2 id="为什么选择使用-React-Portal？"><a href="#为什么选择使用-React-Portal？" class="headerlink" title="为什么选择使用 React Portal？"></a>为什么选择使用 React Portal？</h2><p>这时候，我们可以使用 <code>React.forwardRef()</code> 和 <code>useImperativeHandle()</code> 来实现对子组件的访问和控制。</p><p><code>React.forwardRef()</code> 是一种高级组件技术，它可以将一个函数式组件转换成一个支持 <code>ref</code> 属性的组件。在使用 <code>React.forwardRef()</code> 时，需要在函数组件的第二个参数中接收 <code>ref</code> 对象，并在组件内部使用 <code>useImperativeHandle()</code> 显式地定义需要对外暴露的方法。</p><p><code>useImperativeHandle()</code> 钩子函数可以让我们有选择性地暴露给使用者某些组件内部的属性和方法，而不用将所有组件内部属性都暴露出来。</p><p>在 <code>useImperativeHandle(ref, createHandle, [deps])</code> 中，<code>ref</code> 是父组件传递进来的引用，<code>createHandle</code> 函数返回一个对象，用于向外暴露属性和方法。[deps] 可选参数则用于描述 <code>createHandle</code> 函数依赖的变量，当这些变量发生变化时，<code>createHandle</code> 函数会被重新执行。</p><p>使用 <code>React.forwardRef()</code> 和 <code>useImperativeHandle()</code> 的组件可以暴露一个对象接口给父组件，这个对象包含了一些方法和属性，用于对子组件进行控制。通过这种方式，我们可以在不破坏 Props 约定的情况下，对组件进行更加细致的控制。</p><h2 id="实现-Toast-Notification"><a href="#实现-Toast-Notification" class="headerlink" title="实现 Toast Notification"></a>实现 Toast Notification</h2><p>以下是一个使用 React.forwardRef() 和 useImperativeHandle() 实现 Toast Notification 的示例代码：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;</span><br><span class="line">  useState,</span><br><span class="line">  useEffect,</span><br><span class="line">  forwardRef,</span><br><span class="line">  useImperativeHandle,</span><br><span class="line">  <span class="title class_">Ref</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ToastProps</span> &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ToastNotificationMethods</span> &#123;</span><br><span class="line">  <span class="attr">show</span>: <span class="function">(<span class="params">message: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">hide</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ToastNotification</span> = <span class="title function_">forwardRef</span>(</span><br><span class="line">  <span class="function">(<span class="params">props: ToastProps, ref: Ref&lt;ToastNotificationMethods&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [isVisible, setIsVisible] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">const</span> [message, setMessage] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">show</span> = (<span class="params">text: <span class="built_in">string</span></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setMessage</span>(text);</span><br><span class="line">      <span class="title function_">setIsVisible</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">hide</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setIsVisible</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      show,</span><br><span class="line">      hide,</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="attr">timer</span>: <span class="title class_">NodeJS</span>.<span class="property">Timeout</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (isVisible) &#123;</span><br><span class="line">        <span class="comment">// 显示2秒后自动隐藏</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">hide</span>();</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;, [isVisible]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">display:</span> <span class="attr">isVisible</span> ? &quot;<span class="attr">block</span>&quot; <span class="attr">:</span> &quot;<span class="attr">none</span>&quot; &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ToastNotification</span>;</span><br></pre></td></tr></table></figure><p>上面的代码中，我们首先定义了一个 <code>ToastProps</code> 接口，用于描述 <code>ToastNotification</code> 组件需要接受哪些属性。接着，我们定义了一个 <code>ToastNotificationMethods</code> 接口，用于描述通过 ref 对象向外暴露的 <code>show()</code> 和 <code>hide()</code> 方法。</p><p>然后，我们在函数式组件中使用 <code>useState()</code> 方法来定义两个状态：<code>isVisible</code> 和 <code>message</code>，分别用于记录当前消息是否可见和消息内容。接着，我们定义了 <code>show()</code> 和 <code>hide()</code> 方法，它们分别用于显示和隐藏消息，并通过 <code>useImperativeHandle()</code> 将它们暴露给使用者。</p><p>在 <code>useEffect()</code> 钩子函数中，我们使用了 <code>NodeJS.Timeout</code> 类型来描述计时器对象，避免 TypeScript 报错。同时，我们也为 <code>useEffect()</code> 函数添加了依赖项 [isVisible]，以确保每次 <code>isVisible</code> 改变时都会重新启动计时器和清除计时器。</p><p>最后，我们使用 forwardRef() 方法将 <code>ToastNotification</code> 组件转换为一个可以接受 <code>ref</code> 参数的组件，接着将 <code>ToastProps</code> 和 <code>ToastNotificationMethods</code> 接口传递给它，并导出组件。</p><p>您可以像之前一样，在其他组件中使用 <code>ToastNotification</code> 组件，并通过 <code>ref</code> 对象调用其方法：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ToastNotification</span>, &#123;</span><br><span class="line">  <span class="title class_">ToastNotificationMethods</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./ToastNotification&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> toast = useRef&lt;<span class="title class_">ToastNotificationMethods</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (toast.<span class="property">current</span>) &#123;</span><br><span class="line">      toast.<span class="property">current</span>.<span class="title function_">show</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ToastNotification</span> <span class="attr">ref</span>=<span class="string">&#123;toast&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span>&gt;</span>Show Toast<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>这里我们也增加了 <code>ToastNotificationMethods</code> 类型声明。在 App 组件中，我们使用 <code>useRef()</code> 创建了一个 <code>toast</code> 对象，并将其类型定义为 <code>ToastNotificationMethods</code>。接着，我们在按钮的点击事件中判断 <code>toast.current</code> 是否存在，如果存在则调用 <code>show()</code> 方法，否则不做任何操作。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>React.forwardRef 和 useImperativeHandle 是 React 中用来给函数式组件添加 Ref 的两个 Hook。它们使得父组件可以访问到子组件中的 DOM 节点和方法。</p><p>React.forwardRef 将一个函数式组件转换成一个支持 ref 属性的组件，通过第二个参数接收 ref 对象，并在组件内部使用 useImperativeHandle 显式地定义需要对外暴露的方法。</p><p>useImperativeHandle 钩子函数可以让我们有选择性地暴露给使用者某些组件内部的属性和方法，而不用将所有组件内部属性都暴露出来。</p><p>React.forwardRef 和 useImperativeHandle 的使用场景主要是在高阶组件或第三方库中，用来封装一些常见的组件或解决特殊的需求。但是，在一般情况下，我们应该优先考虑使用 Props 来传递数据和方法。</p><p>需要注意的是，由于使用了 Ref，这种方式可能会带来一些副作用和性能问题，因此不应该滥用 Ref。</p><p>总之，React.forwardRef 和 useImperativeHandle 提供了一种轻便、灵活的方式，用来在函数式组件中添加 Ref 属性，并暴露给父组件子组件内部的属性和方法。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 React Portal 实现全局组件 Toast</title>
      <link href="/posts/2022-08-37517/"/>
      <url>/posts/2022-08-37517/</url>
      
        <content type="html"><![CDATA[<p>React 是一种非常受欢迎的前端框架，它为开发人员提供了许多工具和功能来创建高效、可重用、易于维护的应用程序。其中一个功能是 React Portal，它允许我们将组件渲染到 DOM 中的任何位置，甚至是文档的根节点之外。在本篇文章中，我将介绍如何使用 React Portal 实现全局组件 Toast。</p><h2 id="为什么选择使用-React-Portal？"><a href="#为什么选择使用-React-Portal？" class="headerlink" title="为什么选择使用 React Portal？"></a>为什么选择使用 React Portal？</h2><p>在传统的 React 应用中，所有组件都是在其父组件内部渲染的。这意味着，如果你想要在应用程序的不同部分显示相同的组件，你就必须在每个需要使用该组件的父组件上进行渲染。这可能会导致代码冗余和维护问题。</p><p>React Portal 解决了这个问题。它允许我们将组件渲染到 DOM 结构中的任何位置，这使得全局组件的实现变得更加容易和优雅。</p><h2 id="实现全局组件-Toast"><a href="#实现全局组件-Toast" class="headerlink" title="实现全局组件 Toast"></a>实现全局组件 Toast</h2><p>现在，我们来看一下如何使用 React Portal 实现全局组件 Toast。</p><p>首先，我们需要创建一个 Toast 组件。Toast 可以是简单的文本信息或者是一个复杂的自定义组件。在这里，我们将创建一个基本的文本 Toast。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./Toast.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Toast</span> = (<span class="params">&#123; message &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;toast-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;toast-message&quot;</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Toast</span>;</span><br></pre></td></tr></table></figure><p>这个组件仅仅是渲染传入的 message 属性到 DOM 中，样式文件可自行编写。</p><p>接下来，我们需要创建一个包含 Toast 组件的 Portal。为了实现全局组件，我们需要将 Portal 渲染到文档的根节点之外。我们可以通过使用 React 自带的 <code>ReactDOM.createPortal()</code> 方法将 Toast 组件渲染到一个新的 DOM 节点中，并将该节点挂载到文档的 body 上。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./ToastPortal.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Toast</span> <span class="keyword">from</span> <span class="string">&quot;./Toast&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ToastPortal</span> = (<span class="params">&#123; message &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> toastContainer = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(toastContainer);</span><br><span class="line"></span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(toastContainer);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [toastContainer]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">ReactDOM</span>.<span class="title function_">createPortal</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Toast</span> <span class="attr">message</span>=<span class="string">&#123;message&#125;</span> /&gt;</span></span>, toastContainer);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ToastPortal</span>;</span><br></pre></td></tr></table></figure><p>在这里，我们创建了一个新的根节点 toastContainer，并将其附加到文档的 body 上。我们还使用 <code>useEffect</code> 钩子在组件卸载时删除这个节点，以避免内存泄漏。</p><p>最后，我们只需要在应用程序的其他组件中使用 <code>ToastPortal</code> 即可全局展示 Toast。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ToastPortal</span> <span class="keyword">from</span> <span class="string">&quot;./ToastPortal&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> ToastPortal(&#123; message: &quot;Hello, World!&quot; &#125;)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Show Toast</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>当用户点击按钮时，ToastPortal 组件将被呈现为包含传递给它的 message 属性的新 DOM 元素。由于我们已经将 Portal 渲染到文档的根节点之外，因此该组件将显示在浏览器窗口的顶部。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>React Portal 是一个非常有用的工具，它允许我们将组件渲染到应用程序中的任何位置，使全局组件的实现更加容易和优雅。在这篇文章中，我介绍了如何使用 React Portal 实现全局组件 Toast，并解释了为什么 Portal 是一个好的选择。希望这篇文章对你有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 React Hooks 实现全局组件 Toast</title>
      <link href="/posts/2022-08-37554/"/>
      <url>/posts/2022-08-37554/</url>
      
        <content type="html"><![CDATA[<p>React 是一种非常流行的 JavaScript 库，广泛用于构建 Web 应用程序。在 React 中，你可以轻松地创建自定义组件，其中一种非常有用的组件是 Toast 组件。</p><p>Toast 组件通常用于显示短暂的消息或警告，例如在提交表单时显示成功或失败消息。因此，它应该是可以全局访问的，而不需要将其放置在每个组件中。</p><p>在这篇文章中，我将向你展示如何使用 React Hooks 来实现全局 Toast 组件。</p><h2 id="步骤-1：创建-Context"><a href="#步骤-1：创建-Context" class="headerlink" title="步骤 1：创建 Context"></a>步骤 1：创建 Context</h2><p>首先，我们需要创建一个 Context，将 Toast 组件与其他组件进行通信。在 createContext 方法中传递一个初始值，这样我们可以避免访问未定义的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ToastContext</span> = <span class="title function_">createContext</span>(&#123; <span class="attr">showToast</span>: <span class="function">() =&gt;</span> &#123;&#125; &#125;);</span><br></pre></td></tr></table></figure><h2 id="步骤-2：创建-Toast-组件"><a href="#步骤-2：创建-Toast-组件" class="headerlink" title="步骤 2：创建 Toast 组件"></a>步骤 2：创建 Toast 组件</h2><p>下一步是创建 Toast 组件本身。在本示例中，我们将简单地渲染一些文本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Toast</span> = (<span class="params">&#123; message &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;toast&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Toast</span>;</span><br></pre></td></tr></table></figure><h2 id="步骤-3：创建全局-ToastProvider"><a href="#步骤-3：创建全局-ToastProvider" class="headerlink" title="步骤 3：创建全局 ToastProvider"></a>步骤 3：创建全局 ToastProvider</h2><p>接下来，我们需要一个全局 ToastProvider 组件，它将包装整个应用程序并提供 showToast 方法以触发 Toast 组件。使用 useReducer 钩子管理 Toast 的状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ToastContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./context&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Toast</span> <span class="keyword">from</span> <span class="string">&quot;./Toast&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">visible</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;SHOW&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: action.<span class="property">payload</span>.<span class="property">message</span>,</span><br><span class="line">        <span class="attr">visible</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;HIDE&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        <span class="attr">visible</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ToastProvider</span> = (<span class="params">&#123; children &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, initialState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">showToast</span> = (<span class="params">message</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;SHOW&quot;</span>, <span class="attr">payload</span>: &#123; message &#125; &#125;);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">&quot;HIDE&quot;</span> &#125;);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ToastContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">showToast</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;state.visible &amp;&amp; <span class="tag">&lt;<span class="name">Toast</span> <span class="attr">message</span>=<span class="string">&#123;state.message&#125;</span> /&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ToastContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ToastProvider</span>;</span><br></pre></td></tr></table></figure><h2 id="步骤-4：在应用程序中使用-Toast"><a href="#步骤-4：在应用程序中使用-Toast" class="headerlink" title="步骤 4：在应用程序中使用 Toast"></a>步骤 4：在应用程序中使用 Toast</h2><p>现在，我们已经创建了 Toast 组件和全局 ToastProvider，我们可以在整个应用程序中使用它。只需将组件包装在 ToastProvider 中即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ToastProvider</span> <span class="keyword">from</span> <span class="string">&quot;./ToastProvider&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ToastProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ToastProvider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>现在，我们可以从其他组件中调用 showToast 方法来触发 Toast 组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ToastContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ExampleComponent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; showToast &#125; = <span class="title function_">useContext</span>(<span class="title class_">ToastContext</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleSubmit</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// Some form submission logic</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (submissionSuccessful) &#123;</span><br><span class="line">      <span class="title function_">showToast</span>(<span class="string">&quot;Form submitted successfully!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">showToast</span>(<span class="string">&quot;Form submission failed :(&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">form</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* Form inputs */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ExampleComponent</span>;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>在本文中，我们使用 React Hooks 创建了一个全局 Toast 组件。通过创建 Context、Toast 组件以及全局 ToastProvider，并将其包装在应用程序的最外层，我们可以轻松地从其他组件调用 showToast 方法来触发 Toast 组件。这使得显示短暂消息或警告的过程变得简单而方便，而不需要在每个组件中都添加一个单独的 Toast 组件。</p><p>这种方法具有可扩展性，你可以根据需要自定义 Toast 组件的样式和持续时间。希望这篇文章对你有所帮助。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flowbite：一款不错的 UI 框架</title>
      <link href="/posts/2022-08-5619/"/>
      <url>/posts/2022-08-5619/</url>
      
        <content type="html"><![CDATA[<p>作为一名前端开发者，我们经常需要使用现代化的工具和框架来提高生产力。Flowbite 是一个非常有用的 UI 框架，它可以帮助我们快速构建美丽、现代化的网页。</p><p>在本文中，我将向大家介绍如何使用 Flowbite 完成网页搭建。</p><h2 id="什么是-Flowbite？"><a href="#什么是-Flowbite？" class="headerlink" title="什么是 Flowbite？"></a>什么是 Flowbite？</h2><p>Flowbite 是一个由 Tailwind CSS 驱动的 UI 工具包，旨在提供易于使用、灵活和现代化的设计系统。它包含了许多常见的 UI 组件，例如按钮、表单、模态框等等，使得我们能够更快速地构建美观、高效的网页。</p><h2 id="使用-Flowbite-构建网页"><a href="#使用-Flowbite-构建网页" class="headerlink" title="使用 Flowbite 构建网页"></a>使用 Flowbite 构建网页</h2><p>首先，在你的项目中引入 Flowbite。你可以使用 npm 或者 yarn 来下载 Flowbite。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install flowbite --save</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add flowbite</span><br></pre></td></tr></table></figure><p>接下来，你可以在你的项目中使用 Flowbite 的组件和样式，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Website<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Flowbite 样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;node_modules/flowbite/css/flowbite.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;bg-primary text-white p-4&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My Website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">&quot;d-flex justify-content-end&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-link text-white&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-link text-white&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-link text-white&quot;</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container mt-4&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to my website!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce eget</span><br><span class="line">        finibus mauris. In ultrices sapien in risus euismod condimentum. Etiam</span><br><span class="line">        commodo faucibus varius. Sed finibus porttitor tempor. Sed lobortis erat</span><br><span class="line">        eu lectus ullamcorper lobortis. Donec libero nunc, tristique sed justo</span><br><span class="line">        vel, aliquet feugiat quam.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入 Flowbite 的 JavaScript --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/flowbite/js/flowbite.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用 Flowbite 的样式来改善 header 和 nav 元素的外观，并使用了 btn、btn-link、d-flex、justify-content-end、mt-4 等类名。</p><p>此外，我们还可以使用 Flowbite 的 JavaScript 组件，例如模态框、提示框等等。以下是一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container mt-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>My Modal<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-bs-toggle</span>=<span class="string">&quot;modal&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-bs-target</span>=<span class="string">&quot;#myModal&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    Open Modal</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal fade&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myModal&quot;</span> <span class="attr">tabindex</span>=<span class="string">&quot;-1&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-dialog&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-header&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;modal-title&quot;</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;btn-close&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-body&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>Modal body text goes here.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-footer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">data-bs-dismiss</span>=<span class="string">&quot;modal&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span></span><br><span class="line">            Close</span><br><span class="line">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们使用了 data-bs-toggle 和 data-bs-target 属性来触发模态框的显示，并使用了 modal、modal-dialog、modal-content、modal-header、modal-title、modal-body、modal-footer 等类名。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Flowbite 是一个非常实用的工具箱，它可以帮助我们快速构建美丽、现代化的网页。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TailwindCSS </tag>
            
            <tag> Flowbite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速构建响应式 UI - Tailwind CSS</title>
      <link href="/posts/2022-08-18276/"/>
      <url>/posts/2022-08-18276/</url>
      
        <content type="html"><![CDATA[<p>在现代的 Web 前端开发中，构建漂亮、响应式的用户界面变得越来越重要。为了解决这个问题，Tailwind CSS 应运而生。Tailwind CSS 是一个功能性优先的 CSS 框架，提供了大量的预定义类（例如：<code>bg-red-500</code>，<code>text-2xl</code>），可以帮助你快速、准确地构建和定制 UI 组件。</p><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h2><p>为了使用 Tailwind CSS，你需要将其添加到你的项目中。你可以直接从 Tailwind 官方网站进行下载，或者使用 npm&#x2F;yarn 安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install tailwindcss</span><br></pre></td></tr></table></figure><p>然后，在你的 HTML 文件中添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Tailwind CSS Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/tailwindcss@latest/dist/tailwind.min.css&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Your content here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在，你就可以开始使用 Tailwind CSS 来构建响应式 UI 界面了！</p><h2 id="2-响应式设计"><a href="#2-响应式设计" class="headerlink" title="2. 响应式设计"></a>2. 响应式设计</h2><p>Tailwind CSS 可以帮助你轻松地构建响应式设计，这意味着你的 UI 将能够自适应不同的屏幕大小和设备类型。Tailwind CSS 提供了一系列的响应式类，例如：<code>sm:text-2xl</code>，<code>md:px-4</code>，<code>lg:flex</code>，可以根据不同的屏幕宽度来应用不同的样式。</p><p>下面是一个使用 Tailwind CSS 实现响应式设计的示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-gray-100 p-4 md:p-6 lg:p-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-2xl md:text-4xl lg:text-6xl&quot;</span>&gt;</span>Welcome to My Website<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;text-gray-700 mt-4 md:mt-8 lg:mt-12&quot;</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam vel ante</span><br><span class="line">    vitae lorem egestas ultricies sed eu ex.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;bg-blue-500 text-white px-4 py-2 mt-4 md:mt-8 lg:mt-12&quot;</span>&gt;</span></span><br><span class="line">    Learn More</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了 <code>md:p-6</code>，<code>lg:p-8</code> 等响应式类，这些类将在指定的屏幕宽度上应用不同的样式。在手机屏幕上，容器的填充为 4 像素；在平板电脑上，容器的填充为 6 像素；在大屏幕上，容器的填充为 8 像素。同样，标题文本和按钮的大小和间距也随着屏幕宽度的变化而调整。</p><h2 id="3-定制化配置"><a href="#3-定制化配置" class="headerlink" title="3. 定制化配置"></a>3. 定制化配置</h2><p>Tailwind CSS 还提供了一个特殊的配置文件 <code>tailwind.config.js</code>，你可以通过修改其中的配置来自定义 Tailwind CSS 的样式。例如，你可以更改默认颜色或添加新的颜色变量。</p><p>下面是一个使用自定义颜色变量的示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tailwind.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;</span><br><span class="line">      <span class="attr">colors</span>: &#123;</span><br><span class="line">        <span class="string">&quot;brand-red&quot;</span>: <span class="string">&quot;#FF3E3E&quot;</span>,</span><br><span class="line">        <span class="string">&quot;brand-blue&quot;</span>: <span class="string">&quot;#3E7FFF&quot;</span>,</span><br><span class="line">        <span class="string">&quot;brand-yellow&quot;</span>: <span class="string">&quot;#FFC400&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">variants</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们为 Tailwind CSS 添加了三个新的颜色变量，并将它们命名为 brand-red，brand-blue 和 brand-yellow。现在，你可以在代码中使用这些新的颜色变量：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg-brand-red p-4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;text-white&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Tailwind CSS 是一个功能性优先的 CSS 框架，通过提供大量的预定义类和响应式设计来帮助前端开发人员快速构建漂亮、响应式的用户界面。通过使用定制化配置文件，你还可以轻松地自定义 Tailwind CSS 的样式。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TailwindCSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Mongoose 实现 MongoDB 数据操作</title>
      <link href="/posts/2022-05-61611/"/>
      <url>/posts/2022-05-61611/</url>
      
        <content type="html"><![CDATA[<p>MongoDB 是一种流行的 NoSQL 数据库，它以其灵活性和可伸缩性而受到欢迎。在使用 MongoDB 时，可以使用原生的 Node.js 驱动程序来进行数据库操作，但是这需要编写大量的代码来管理数据模型和验证，因此更好的选择是使用一个 ORM 框架——如 Mongoose，来简化这个过程。</p><h2 id="什么是-Mongoose"><a href="#什么是-Mongoose" class="headerlink" title="什么是 Mongoose"></a>什么是 Mongoose</h2><p>Mongoose 是一个用于 Node.js 环境下的 MongoDB ORM 框架，它提供了一个优美的 API 来与 MongoDB 进行交互，并且提供了很多有用的功能，例如：对象映射、验证器、中间件等等。</p><h2 id="Mongoose-和-MongoDB-的关系"><a href="#Mongoose-和-MongoDB-的关系" class="headerlink" title="Mongoose 和 MongoDB 的关系"></a>Mongoose 和 MongoDB 的关系</h2><p>Mongoose 不是 MongoDB 的一部分，而是一个用于 Node.js 应用程序的 ORM 框架。Mongoose 不能运行 MongoDB，它只是一个为了简化使用 MongoDB 的工具。</p><h2 id="安装-Mongoose"><a href="#安装-Mongoose" class="headerlink" title="安装 Mongoose"></a>安装 Mongoose</h2><p>使用 npm 包管理器安装 Mongoose：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure><h2 id="连接-MongoDB-数据库"><a href="#连接-MongoDB-数据库" class="headerlink" title="连接 MongoDB 数据库"></a>连接 MongoDB 数据库</h2><p>在使用 Mongoose 之前，我们需要先连接 MongoDB 数据库。可以使用 <code>mongoose.connect()</code> 方法进行连接：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&quot;mongodb://localhost:27017/mydatabase&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = mongoose.<span class="property">connection</span>;</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">on</span>(<span class="string">&quot;error&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;MongoDB 连接失败：&quot;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.<span class="title function_">once</span>(<span class="string">&quot;open&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MongoDB 连接成功！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码使用 <code>mongoose.connect()</code> 方法连接本地的名为 mydatabase 的数据库。<code>useNewUrlParser</code> 和 <code>useUnifiedTopology</code> 选项分别用于避免连接的警告和切换到 MongoDB 的新拓扑结构。</p><h2 id="定义数据模型"><a href="#定义数据模型" class="headerlink" title="定义数据模型"></a>定义数据模型</h2><p>在使用 Mongoose 进行 CRUD 操作时，首先需要定义数据模型。数据模型是一个类似于 JavaScript 对象的结构，包含了数据属性和方法。以下是一个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bookSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="title class_">Number</span>,</span><br><span class="line">  <span class="attr">publishDate</span>: <span class="title class_">Date</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Book</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Book&quot;</span>, bookSchema);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Book</span>;</span><br></pre></td></tr></table></figure><p>以上代码定义了一个名为 Book 的数据模型，包含了书籍的标题、作者、价格和出版日期四个属性。</p><h2 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h2><p>在定义好数据模型后，我们可以使用 <code>new</code> 操作符创建一个新的文档对象，并将其保存到数据库中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Book</span> = <span class="built_in">require</span>(<span class="string">&quot;./models/book&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myBook = <span class="keyword">new</span> <span class="title class_">Book</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;JavaScript 高级程序设计&quot;</span>,</span><br><span class="line">  <span class="attr">author</span>: <span class="string">&quot;Nicholas C. Zakas&quot;</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">99.0</span>,</span><br><span class="line">  <span class="attr">publishDate</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2021-04-01&quot;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myBook.<span class="title function_">save</span>(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;保存数据失败：&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;保存数据成功：&quot;</span>, result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码创建了一本 JavaScript 高级程序设计的书籍，并将其保存到数据库中。<code>myBook.save()</code> 方法会将 <code>myBook</code> 对象保存到数据库中，并在保存完成后执行回调函数。</p><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><p>在进行查询操作时，可以使用 <code>find()</code>、<code>findOne()</code> 和 <code>findById()</code> 等方法进行查询。以下是一个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Book</span> = <span class="built_in">require</span>(<span class="string">&quot;./models/book&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Book</span>.<span class="title function_">find</span>(&#123; <span class="attr">author</span>: <span class="string">&quot;Nicholas C. Zakas&quot;</span> &#125;, <span class="function">(<span class="params">err, books</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;查询数据失败：&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;查询数据成功：&quot;</span>, books);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码查询了所有作者为 Nicholas C. Zakas 的书籍。</p><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><p>在进行更新操作时，可以使用 <code>updateOne()</code> 或 <code>updateMany()</code> 方法进行更新。以下是一个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Book</span> = <span class="built_in">require</span>(<span class="string">&quot;./models/book&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Book</span>.<span class="title function_">updateOne</span>(</span><br><span class="line">  &#123; <span class="attr">title</span>: <span class="string">&quot;JavaScript 高级程序设计&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">price</span>: <span class="number">89.0</span> &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;更新数据失败：&quot;</span>, err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;更新数据成功：&quot;</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>以上代码将标题为 JavaScript 高级程序设计的书籍的价格修改为 89 元。</p><h2 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h2><p>在进行删除操作时，可以使用 <code>deleteOne()</code> 或 <code>deleteMany()</code> 方法进行删除。以下是一个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Book</span> = <span class="built_in">require</span>(<span class="string">&quot;./models/book&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Book</span>.<span class="title function_">deleteOne</span>(&#123; <span class="attr">title</span>: <span class="string">&quot;JavaScript 高级程序设计&quot;</span> &#125;, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;删除数据失败：&quot;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除数据成功：&quot;</span>, result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码删除标题为 JavaScript 高级程序设计的书籍。</p><h2 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h2><p>Mongoose 提供了丰富的数据验证功能，在定义数据模型时可以添加约束条件，例如必填、最小值、最大值等。以下是一个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bookSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">  <span class="attr">title</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">author</span>: <span class="title class_">String</span>,</span><br><span class="line">  <span class="attr">price</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">min</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">max</span>: <span class="number">1000</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">publishDate</span>: <span class="title class_">Date</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Book</span> = mongoose.<span class="title function_">model</span>(<span class="string">&quot;Book&quot;</span>, bookSchema);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Book</span>;</span><br></pre></td></tr></table></figure><p>以上代码在书籍标题中添加了必填的约束条件，同时在价格属性中添加了最小值和最大值的约束条件。在使用 <code>save()</code> 方法保存数据时，如果不满足约束条件，将会返回错误信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了 Mongoose 的基本用法，包括连接数据库、定义数据模型、创建、查询、更新和删除文档等操作。同时，还简单介绍了数据验证的功能。Mongoose 是一个强大的工具，可以大幅提高 MongoDB 数据库的开发效率和代码质量。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB 介绍和入门指引</title>
      <link href="/posts/2022-05-36785/"/>
      <url>/posts/2022-05-36785/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.mongodb.com/">MongoDB</a> 是一种基于文档的 NoSQL 数据库管理系统，采用 BSON（Binary JSON）格式存储数据。MongoDB 的特点是具有高可扩展性、高性能、易部署、使用方便和强大的查询语言等优点。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>文档存储方式</strong>: MongoDB 采用文档存储方式，可以存储和检索任意类型的数据（如数组、对象等），并且不需要预先定义表结构（与传统的关系型数据库不同），这使得 MongoDB 更加灵活和方便。</li><li><strong>高可扩展性</strong>: MongoDB 支持分布式计算，通过分片机制将数据划分到不同的服务器上，实现了横向扩展（可以通过增加服务器节点来提升性能和扩容）。</li><li><strong>高性能</strong>: MongoDB 的读写效率非常高，单个节点就可以支持高达数百万次的读写操作，而且 MongoDB 还支持多种缓存技术，提升了其读取性能。</li><li><strong>支持多种查询</strong>: MongoDB 支持复杂的查询语言，包括范围查询、正则表达式查询、聚合查询等。MongoDB 还支持全文检索、地理空间查询等高级查询功能。</li><li><strong>自动故障处理</strong>: MongoDB 支持副本集机制，可以自动进行主从切换和数据同步，防止单点故障。同时，MongoDB 还支持自动故障处理、自动重启等机制，保证了系统的可靠性。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li><strong>Web 应用程序</strong>: 在 Web 应用程序中，MongoDB 可以存储用户信息、日志记录、消息队列等数据，通过其高性能和可扩展性，能够满足高并发、高性能的要求。</li><li><strong>大数据存储</strong>: MongoDB 能够存储并处理大量的文本数据、图像数据、音频数据、视频数据等，以及非结构化的数据类型，通过其横向扩展能力，能够满足大规模数据存储的需求。</li><li><strong>内容管理</strong>: MongoDB 的灵活性和查询功能，使得它成为了不少内容管理系统的首选。可以将文章、图片、视频等多媒体素材存储在 MongoDB 中，并通过复杂的查询语句实现搜索、分类、筛选等功能。</li></ul><h2 id="入门指引"><a href="#入门指引" class="headerlink" title="入门指引"></a>入门指引</h2><h3 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h3><p>你可以从 <a href="https://www.mongodb.com/">MongoDB 官网</a> 下载 MongoDB 最新稳定版（Windows&#x2F;MacOS&#x2F;Linux），也可以使用各个系统的包管理器进行安装（如 apt-get、yum 等）。安装完成后，你就可以使用命令 mongod 启动 MongoDB 服务。</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ol><li>创建数据库和集合</li></ol><p>首先，我们需要连接到 MongoDB 的服务。可以打开命令行工具，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure><p>连接成功后，我们可以创建一个数据库，比如 <code>mydb</code>，并在其中创建一个集合 <code>mycollection</code>，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mydb</span><br><span class="line">db.createCollection(<span class="string">&quot;mycollection&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>插入数据<br>接下来，我们可以向 mycollection 中插入一条数据，例如：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.mycollection.insertOne(&#123;name: <span class="string">&quot;John&quot;</span>, age: 25, gender: <span class="string">&quot;male&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>查询数据</li></ol><p>可以使用以下命令查询 <code>mycollection</code> 中所有数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.mycollection.find()</span><br></pre></td></tr></table></figure><ol start="4"><li>更新数据</li></ol><p>如果要更新 <code>mycollection</code> 中某个文档中的数据，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.mycollection.updateOne(&#123;name: <span class="string">&quot;John&quot;</span>&#125;, &#123;<span class="variable">$set</span>: &#123;age: 30&#125;&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>删除数据</li></ol><p>如果要删除 <code>mycollection</code> 中某个文档，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.mycollection.deleteOne(&#123;name: <span class="string">&quot;John&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>删除集合</li></ol><p>如果要删除 <code>mycollection</code> 集合，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.mycollection.drop()</span><br></pre></td></tr></table></figure><ol start="7"><li>删除数据库</li></ol><p>如果要删除 <code>mydb</code> 数据库，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>MongoDB 是一种非常强大的 NoSQL 数据库，拥有高可扩展性、高性能、易部署、使用方便和强大的查询语言等优点。MongoDB 的特性和使用场景使得它成为了企业级应用中非常受欢迎的数据库之一，可以满足各种场景和需求。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 笔记</title>
      <link href="/posts/2022-04-12618/"/>
      <url>/posts/2022-04-12618/</url>
      
        <content type="html"><![CDATA[<p>Nginx 是一款高性能的 Web 服务器，它可以作为反向代理、负载均衡器和 HTTP 缓存使用。它的设计目标是高并发、低内存占用和高度可扩展性。除了作为 Web 服务器之外，Nginx 还可以作为邮件代理服务器、TCP 代理服务器和流媒体服务器使用。</p><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><p>在 Linux 系统下，使用以下命令安装 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h2 id="Nginx-工作模型"><a href="#Nginx-工作模型" class="headerlink" title="Nginx 工作模型"></a>Nginx 工作模型</h2><p>Nginx 的工作模型是事件驱动的异步非阻塞模型，它使用少量的线程来处理大量的连接，并且采用 epoll 模型来实现高效的事件处理。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>启动 Nginx 服务：sudo systemctl start nginx</li><li>停止 Nginx 服务：sudo systemctl stop nginx</li><li>重新加载配置文件：sudo nginx -s reload</li><li>查看 Nginx 进程：ps -ef | grep nginx</li><li>查看 Nginx 版本号：nginx -v</li></ul><h2 id="Nginx-配置选项"><a href="#Nginx-配置选项" class="headerlink" title="Nginx 配置选项"></a>Nginx 配置选项</h2><p>Nginx 的配置文件 nginx.conf 位于其安装目录的 conf 目录下。nginx.conf 由多个块组成，最外面的块是 main，main 包含 Events 和 HTTP，HTTP 包含 upstream 和多个 Server，Server 又包含多个 location。</p><p>常用的配置选项包括：</p><ul><li>worker_processes：设置 Nginx 的工作进程数</li><li>listen：设置 Nginx 监听的 IP 地址和端口号</li><li>server_name：设置虚拟主机的域名</li><li>root：设置虚拟主机的根目录</li><li>index：设置虚拟主机默认的首页文件</li><li>location：设置 URL 匹配规则和处理方式</li></ul><h2 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h2><p>Nginx 可以作为反向代理使用，将客户端的请求转发到后端的 Web 服务器上。反向代理可以提高 Web 应用程序的可靠性、安全性和性能。</p><p>使用 Nginx 作为反向代理的步骤如下：</p><ol><li>在 nginx.conf 文件中配置 upstream 块，指定后端 Web 服务器的 IP 地址和端口号。</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.100:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101:8080</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 nginx.conf 文件中配置 server 块，设置监听的 IP 地址和端口号，并将请求转发到 upstream 块中的后端 Web 服务器。</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> example.com;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="项目部署与域名解析"><a href="#项目部署与域名解析" class="headerlink" title="项目部署与域名解析"></a>项目部署与域名解析</h2><p>在部署 Web 项目时，通常需要将其部署到 Nginx 的根目录下，并配置 Nginx 的虚拟主机。如果需要使用自定义域名，需要先将域名解析到服务器 IP 地址上。</p><ol><li><p>将 Web 项目部署到 Nginx 的根目录下，例如&#x2F;var&#x2F;www&#x2F;html&#x2F;myapp。</p></li><li><p>在 nginx.conf 文件中新增一个 server 块，设置监听的 IP 地址和端口号，并将请求转发到 Web 项目的根目录。</p></li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> myapp.com;</span><br><span class="line">    <span class="attribute">root</span> /var/www/html/myapp;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在 DNS 服务商处添加一条 A 记录，将 myapp.com 解析到服务器的 IP 地址上。</li></ol><h2 id="配置-HTTPS-安全协议"><a href="#配置-HTTPS-安全协议" class="headerlink" title="配置 HTTPS 安全协议"></a>配置 HTTPS 安全协议</h2><p>HTTPS 是一种基于 TLS&#x2F;SSL 加密协议的安全传输协议，它可以保护数据在传输过程中不被窃取或篡改。在使用 Nginx 作为 Web 服务器时，可以启用 HTTPS 来提供更安全的服务。</p><ol><li>生成私钥文件和证书签名请求文件。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out mykey.key 2048</span><br><span class="line">openssl req -new -key mykey.key -out mycsr.csr</span><br></pre></td></tr></table></figure><ol start="2"><li><p>向证书颁发机构提交证书签名请求，并获取 SSL 证书文件。</p></li><li><p>在 nginx.conf 文件中配置 ssl 块，指定私钥文件和 SSL 证书文件的路径。</p></li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> myapp.com;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/ssl/certs/myapp.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/ssl/private/mykey.key;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>在 server 块中添加 location 块，重定向 HTTP 请求到 HTTPS。</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> myapp.com;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Nginx 是一款高性能、可扩展的 Web 服务器，可以作为反向代理、负载均衡器和 HTTP 缓存使用。在实际应用中，我们可以通过配置 Nginx 来提高 Web 应用程序的可靠性、安全性和性能。以上就是 Nginx 介绍与安装、Nginx 工作模型及常用命令、Nginx 配置选项解析、Nginx 反向代理、项目部署与域名解析、配置 HTTPS 安全协议的简单介绍。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 入门指南</title>
      <link href="/posts/2022-04-12029/"/>
      <url>/posts/2022-04-12029/</url>
      
        <content type="html"><![CDATA[<p>Redis 是一个开源的、内存中的数据结构存储系统，它可以用作数据库、缓存和消息队列。由于 Redis 是基于内存的存储，所以读写速度非常快。它支持多种数据结构，例如字符串、列表、哈希表、集合和有序集合等。</p><h2 id="Redis-的优势"><a href="#Redis-的优势" class="headerlink" title="Redis 的优势"></a>Redis 的优势</h2><ul><li>读写速度快：Redis 数据存储在内存中，因此它可以提供非常快的读写速度。</li><li>支持多种数据结构：Redis 支持多种数据结构，例如字符串、列表、哈希表、集合和有序集合等，这些数据结构非常适合进行一些常规的数据操作，例如计数器、排行榜等。</li><li>支持持久化：Redis 支持两种将数据持久化到磁盘的方式，分别是 RDB（Redis Database）和 AOF（Append Only File）。</li><li>支持分布式：Redis 支持分布式部署，可以构建集群来提高可靠性和扩展性。</li></ul><h2 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h2><p>在 Linux 系统下，可以使用以下命令安装 Redis：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><p>在 Windows 系统下，可以从 Redis 官网下载可执行文件来安装 Redis。</p><h2 id="连接-Redis"><a href="#连接-Redis" class="headerlink" title="连接 Redis"></a>连接 Redis</h2><p>可以使用 redis-cli 命令来连接 Redis，默认情况下，Redis 监听 127.0.0.1:6379 这个地址和端口号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><h2 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h2><p>Redis 提供了丰富的命令用于操作数据，以下是一些常用的命令：</p><ul><li>设置值：SET key value</li><li>获取值：GET key</li><li>判断键是否存在：EXISTS key</li><li>删除键：DEL key</li><li>自增：INCR key</li><li>自减：DECR key</li><li>添加元素：LPUSH key value</li><li>弹出元素：LPOP key</li><li>增加元素：SADD key member</li><li>删除元素：SREM key member</li><li>获取所有元素：SMEMBERS key</li><li>排序：SORT key</li></ul><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>Redis 最初就是被设计用作缓存的，可以将经常使用的数据存在 Redis 中，以减少数据库访问次数，并提高应用程序的响应速度。例如，我们可以将频繁查询的数据存储在 Redis 中，下次请求时就可以从 Redis 中获取数据，而不必去访问数据库。</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>在分布式系统中，为了避免多个进程同时访问同一个资源，通常需要使用分布式锁来控制并发访问。Redis 提供了 SETNX 命令，用于实现分布式锁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SETNX lock_key 1</span><br></pre></td></tr></table></figure><p>执行以上命令后，如果键 lock_key 不存在，则设置成功并返回 1；否则设置失败并返回 0。通过这种方式，我们可以实现分布式锁。</p><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p>Redis 提供了 INCR 和 DECR 命令用于实现计数器功能，例如跟踪网站访问量、记录用户在线时间等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INCR counter_key</span><br></pre></td></tr></table></figure><p>执行以上命令后，键 counter_key 的值会自增 1。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Redis 是一个非常强大的开源存储系统，它支持多种数据结构和持久化方式，并且具有很高的可扩展性和可靠性。在实际开发中，我们可以将其用作数据库、缓存或消息队列，以满足不同的需求。</p><p>以上就是 Redis 入门教程的简单介绍，希望能对初学者有所帮助。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express中间件</title>
      <link href="/posts/2022-04-55266/"/>
      <url>/posts/2022-04-55266/</url>
      
        <content type="html"><![CDATA[<p>Express 是一个流行的 Node.js Web 框架，它提供了一个灵活而强大的路由和中间件系统。在 Express 中，中间件是一个函数，它可以访问请求和响应对象，并执行某些任务，例如身份验证、日志记录或错误处理。每个请求都会经过一系列中间件处理，直到到达最终处理程序或者出现错误。本文将重点介绍 Express 中间件。</p><h2 id="什么是-Express-中间件？"><a href="#什么是-Express-中间件？" class="headerlink" title="什么是 Express 中间件？"></a>什么是 Express 中间件？</h2><p>中间件是一种在请求和响应的处理过程中，增加额外处理逻辑的技术方案。在 Express 中，中间件是一个函数，通常具有以下特点：</p><ul><li>中间件函数需要有三个参数，分别是请求对象、响应对象和下一个中间件函数。</li><li>中间件函数可以访问和修改请求对象和响应对象，也可以调用下一个中间件函数来转移控制权。</li><li>中间件函数可以执行各种操作，例如身份验证、解析请求正文、记录日志、验证输入、缓存数据等等。</li></ul><p>在 Express 中，我们可以通过 <code>app.use()</code> 方法来安装中间件，或者通过 <code>app.METHOD()</code> 方法（例如 app.get()、app.post()）来指定特定 HTTP 方法和 URL 路径所用的中间件。</p><h2 id="Express-中间件执行流程"><a href="#Express-中间件执行流程" class="headerlink" title="Express 中间件执行流程"></a>Express 中间件执行流程</h2><p>在 Express 中，每个请求都会被发送到一系列中间件，直到到达最终路由或错误处理程序。这是因为中间件通常需要执行类似请求验证、缓存、传输数据等操作，同时也可以保持代码结构清晰、可重用和可维护性。以下是执行流程的示例：</p><p><img src="/images/55266-1.png" alt="express-middleware-flow"></p><p>从上图可以看出，中间件函数按照顺序依次执行，每个中间件将请求对象（req）、响应对象（res）以及下一个中间件函数（next）作为参数。如果某个中间件函数不检查错误并且不调用 next()函数，则该请求将无法到达预期的路由或者最终处理程序。</p><h2 id="Express-中间件分类"><a href="#Express-中间件分类" class="headerlink" title="Express 中间件分类"></a>Express 中间件分类</h2><p>在 Express 中，有两种主要的中间件类型：应用级别中间件和路由级别中间件。</p><h3 id="应用级别中间件"><a href="#应用级别中间件" class="headerlink" title="应用级别中间件"></a>应用级别中间件</h3><p>应用级别中间件是指直接被注册到 app 对象上的中间件函数。这些中间件对于所有的请求和路由都会进行处理。例如，以下代码注册了一个简单的日志记录中间件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 日志记录中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().toISOString()&#125;</span>] <span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.originalUrl&#125;</span>`</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server started on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>app.use()</code> 方法注册了一个中间件函数，用于记录每个请求的时间、HTTP 方法和 URL 路径。这个中间件将对该应用程序中的所有请求都进行处理，包括根路径的 GET 请求。</p><h3 id="路由级别中间件"><a href="#路由级别中间件" class="headerlink" title="路由级别中间件"></a>路由级别中间件</h3><p>路由级别中间件是指只针对特定路由的中间件函数。这些中间件仅在与其路径匹配的请求中进行处理。例如，以下代码展示了添加路由级别中间件的正确方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由级别中间件</span></span><br><span class="line">app.<span class="title function_">get</span>(</span><br><span class="line">  <span class="string">&quot;/&quot;</span>,</span><br><span class="line">  <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is a middleware for the / route!&quot;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server started on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>app.get()</code> 方法接受两个参数：URL 路径和一个回调函数的列表。我们在这里添加了一个中间件函数，用于输出信息，然后通过 <code>next()</code> 方法将控制权传递给下一个中间件或路由处理程序。</p><h2 id="Express-内置中间件"><a href="#Express-内置中间件" class="headerlink" title="Express 内置中间件"></a>Express 内置中间件</h2><p>Express 提供了许多内置的中间件函数，可用于解决通用问题，例如处理静态文件（静态服务器）或解析请求正文（body-parser）。以下是一些常用的内置中间件：</p><h3 id="express-static"><a href="#express-static" class="headerlink" title="express.static"></a>express.static</h3><p><code>express.static</code> 中间件函数可用于将 Express 应用程序设置为静态文件服务器。可以使用此函数来提供应用程序中的静态 HTML 页面、图像、CSS 和 JavaScript 文件。以下是一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&quot;public&quot;</span>));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server started on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个示例中，<code>express.static</code> 中间件函数将 public 目录下的所有静态文件映射到根路径（&#x2F;）下。例如，如果有一个名为 index.html 的 HTML 文件位于 public&#x2F;index.html，则可以通过 <a href="http://localhost:3000/index.html">http://localhost:3000/index.html</a> 访问它。</p><h3 id="express-json"><a href="#express-json" class="headerlink" title="express.json"></a>express.json</h3><p><code>express.json</code> 中间件函数可以帮助我们解析 POST 请求正文中的 JSON 数据，并将其转换为 JavaScript 对象。以下是一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/api/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = req.<span class="property">body</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;User created successfully!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server started on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个示例中，我们从客户端接收到 JSON 格式的用户数据，解析它并将其转换为 JavaScript 对象，然后将其存储到数据库中。</p><h3 id="express-urlencoded"><a href="#express-urlencoded" class="headerlink" title="express.urlencoded"></a>express.urlencoded</h3><p><code>express.urlencoded</code> 中间件函数可以帮助我们解析 POST 请求正文中的表单数据，并将其转换为 JavaScript 对象。以下是一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/api/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = req.<span class="property">body</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;User created successfully!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server started on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个示例中，我们从客户端接收到表单格式的用户数据，解析它并将其转换为 JavaScript 对象，然后将其存储到数据库中。</p><h2 id="Express-第三方中间件"><a href="#Express-第三方中间件" class="headerlink" title="Express 第三方中间件"></a>Express 第三方中间件</h2><p>除了内置的中间件函数之外，Express 还支持众多第三方中间件，可扩展其功能。以下是一些常用的第三方中间件：</p><h3 id="cors"><a href="#cors" class="headerlink" title="cors"></a>cors</h3><p><code>cors</code> 中间件可帮助我们处理跨域请求。如果我们想从一个域名（例如 <a href="http://localhost:3000/">http://localhost:3000</a>）向另一个域名（例如 <a href="http://localhost:4000/">http://localhost:4000</a>）发送请求，则需要启用 CORS。以下是示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cors</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server started on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="body-parser"><a href="#body-parser" class="headerlink" title="body-parser"></a>body-parser</h3><p><code>body-parser</code> 中间件可帮助我们解析 POST 请求正文中的表单数据、JSON 数据和原始数据。以下是示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/api/users&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> user = req.<span class="property">body</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;User created successfully!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server started on port 3000&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Express 中间件是一个非常有用的工具，可帮助我们轻松地创建 RESTful API。只需通过合理组合和编写中间件即可实现良好的 API 设计和可维护性。除了 Express 自带的中间件之外，我们还可以使用各种第三方中间件来扩展其功能。需要注意的是，在处理数据时，请始终仔细验证和过滤请求，以确保应用程序的安全性和正确性。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express 处理客户端不同的请求方法</title>
      <link href="/posts/2022-04-62867/"/>
      <url>/posts/2022-04-62867/</url>
      
        <content type="html"><![CDATA[<p>在现代 Web 应用程序中，服务器需要能够响应多种类型的 HTTP 请求方法，例如 GET、POST、PUT 和 DELETE 等。 Express 是一款非常流行的 Node.js 框架，它可以方便地处理这些请求，并提供了许多实用的功能来开发高效的 Web 应用程序。</p><p>本文将介绍如何使用 Express 框架来处理客户端不同的请求方法。</p><h2 id="安装-Express"><a href="#安装-Express" class="headerlink" title="安装 Express"></a>安装 Express</h2><p>首先，需要在本机上安装 Node.js。可以从官网下载最新版本的 Node.js，然后运行安装程序进行安装。</p><h2 id="创建-Express-应用程序"><a href="#创建-Express-应用程序" class="headerlink" title="创建 Express 应用程序"></a>创建 Express 应用程序</h2><p>在安装 Express 之后，可以创建一个 Express 应用程序。在命令行中，进入所需目录并执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> myapp</span><br><span class="line"><span class="built_in">cd</span> myapp</span><br><span class="line">npm init -y</span><br><span class="line">npm install express body-parser --save</span><br></pre></td></tr></table></figure><p>在 myapp 文件夹中，创建一个名为 server.js 的文件，并在其中输入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is listening on port 3000...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用 <code>express()</code> 创建了一个新的 Express 应用程序，并定义了一个路径为&#x2F;的路由来处理 GET 请求。当客户端访问主页时，服务器将发送 “Hello World！” 的响应。</p><p>在最后一行，我们使用 <code>listen()</code> 函数来启动服务器，并指定它应该监听的端口号（在这里是 3000）。</p><h2 id="处理其他类型的请求方法"><a href="#处理其他类型的请求方法" class="headerlink" title="处理其他类型的请求方法"></a>处理其他类型的请求方法</h2><p>如果客户端需要使用不同的 HTTP 请求方法（例如 <code>POST</code>、<code>PUT</code> 或 <code>DELETE</code> 等），则需要使用其他类型的路由来处理它们。</p><p>下面是一个更完整的示例，其中包含三个路由，分别用于处理 <code>GET</code>、<code>POST</code> 和 <code>DELETE</code> 请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/api/customers&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> customers = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;Charlie&quot;</span> &#125;,</span><br><span class="line">  ];</span><br><span class="line">  res.<span class="title function_">json</span>(customers);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/api/customers&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> customer = req.<span class="property">body</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received customer: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(customer)&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// process the new customer data</span></span><br><span class="line">  res.<span class="title function_">json</span>(customer);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">delete</span>(<span class="string">&quot;/api/customers/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = <span class="built_in">parseInt</span>(req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Deleted customer with ID: <span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">  <span class="comment">// remove the corresponding customer from the database</span></span><br><span class="line">  res.<span class="title function_">sendStatus</span>(<span class="number">204</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Server is listening on port 3000...&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用 <code>body-parser</code> 中间件来解析 HTTP 请求中的请求体，并将其转换为 JSON 格式。</p><p>此外，我们定义了三个路由：</p><ul><li><code>GET /api/customers</code>：返回一个包含三个客户数据的 JSON 对象。</li><li><code>POST /api/customers</code>：接收一个客户数据对象，并将其记录到服务器日志中。</li><li><code>DELETE /api/customers/:id</code>：删除具有指定 ID 的客户数据。</li></ul><p>如果客户端发出 <code>GET</code> 请求，则将返回所有客户数据。如果客户端发出 <code>POST</code> 请求，则将记录新客户数据。如果客户端发出 <code>DELETE</code> 请求，则将删除指定的客户数据。</p><h2 id="运行应用程序"><a href="#运行应用程序" class="headerlink" title="运行应用程序"></a>运行应用程序</h2><p>最后一步是运行应用程序。在 <code>myapp</code> 文件夹中，打开命令行工具，并输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>应用程序将启动，并开始监听来自客户端的请求。可以在浏览器中访问 <a href="http://localhost:3000/">http://localhost:3000/</a>，确认应用程序已经成功运行。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本文介绍了如何使用 Express 框架来处理不同类型的 HTTP 请求方法。Express 是一款易于学习和使用的框架，它提供了许多实用的功能和中间件，可以加快 Web 应用程序的开发过程，提高开发人员的效率和生产力。在实际应用中，可以使用 Express 构建各种类型的 Web 应用程序，并获得更好的用户体验和业务效率。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 服务端入门</title>
      <link href="/posts/2022-04-10915/"/>
      <url>/posts/2022-04-10915/</url>
      
        <content type="html"><![CDATA[<p>Node.js 是一个基于 JavaScript 运行时的平台，可以用来开发各种类型的网络应用程序。在本文中，我们将介绍如何使用原生的 Node.js API ，从零开始构建一个简单的服务端，并实现一些基本的功能。</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>首先，需要在本机上安装 Node.js。可以从官网下载最新版本的 Node.js，然后运行安装程序进行安装。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>使用命令行工具进入所需目录，然后使用以下命令来创建一个新的 Node.js 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> myserver</span><br><span class="line"><span class="built_in">cd</span> myserver</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>该命令创建了一个名为 myserver 的文件夹，并初始化一个新的 package.json 文件。</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>接下来就可以开始编写服务端的代码了。 在 myserver 文件夹中创建一个 server.js 的文件，然后输入以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">      fs.<span class="title function_">readFile</span>(<span class="string">&quot;./index.html&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">          res.<span class="title function_">end</span>(<span class="string">&quot;404 Not Found&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html&quot;</span> &#125;);</span><br><span class="line">          res.<span class="title function_">end</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">url</span> === <span class="string">&quot;/about&quot;</span>) &#123;</span><br><span class="line">      fs.<span class="title function_">readFile</span>(<span class="string">&quot;./about.html&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">          res.<span class="title function_">end</span>(<span class="string">&quot;404 Not Found&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/html&quot;</span> &#125;);</span><br><span class="line">          res.<span class="title function_">end</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">404</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;404 Not Found&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> body = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">      body += chunk.<span class="title function_">toString</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received data: <span class="subst">$&#123;body&#125;</span>`</span>);</span><br><span class="line">      res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;Data received!&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">405</span>, &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;text/plain&quot;</span> &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;Method Not Allowed&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = process.<span class="property">env</span>.<span class="property">PORT</span> || <span class="number">3000</span>;</span><br><span class="line">server.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Server is listening on port <span class="subst">$&#123;port&#125;</span>...`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>该代码创建了一个 HTTP 服务器，并实现了三个路由：一个用于处理默认请求，一个用于处理&#x2F;about 路径的请求，以及一个处理 404 错误的路由。在启动应用程序时，服务端将监听特定的端口（默认为 3000）。</p><h2 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h2><p>最后一步是运行服务。在 myserver 文件夹中，打开命令行工具，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>服务端就会启动，并开始监听来自客户端的请求。可以在浏览器中访问 <a href="http://localhost:3000/">http://localhost:3000/</a>，确认服务端已经成功运行。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本文介绍了如何使用原生的 Node.js API 快速搭建一个简单的服务端，并实现了一些基本的功能。Node.js 具有较高的性能和可扩展性，是一种非常优秀的后端开发语言。在实际应用中，可以使用它来构建各种类型的应用程序，并获得更好的用户体验和业务效率。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 网络服务器通信</title>
      <link href="/posts/2022-04-19149/"/>
      <url>/posts/2022-04-19149/</url>
      
        <content type="html"><![CDATA[<p>HTTP（HyperText Transfer Protocol）是一种应用层协议，常用于客户端和服务器之间的通信。它是一种无状态协议，每个请求都是一个单独的事务，服务器不会保留客户端的任何信息。本文将介绍 HTTP 的基本工作原理和网络服务器的通信过程。</p><h2 id="HTTP-请求和响应"><a href="#HTTP-请求和响应" class="headerlink" title="HTTP 请求和响应"></a>HTTP 请求和响应</h2><p>HTTP 请求由客户端发送给服务器，包含了请求行、请求头和请求体三部分。其中，请求行包含了请求方法、URL 和协议版本；请求头包含了客户端的信息、请求的内容类型等；请求体包含了具体的数据。</p><p>服务器接收到请求之后，根据请求的内容进行处理，并返回一个响应。响应由状态行、响应头和响应体三部分组成。状态行包含了响应状态码和协议版本；响应头包含了服务器的信息、响应的内容类型等；响应体包含了具体的数据。</p><h2 id="HTTP-方法和状态码"><a href="#HTTP-方法和状态码" class="headerlink" title="HTTP 方法和状态码"></a>HTTP 方法和状态码</h2><p>HTTP 定义了一些常用的方法，常见的有 GET、POST、PUT 和 DELETE 等。其中，GET 用于获取资源，POST 用于提交数据，PUT 用于更新资源，DELETE 用于删除资源。服务器根据请求的方法来进行不同的操作。</p><p>HTTP 还定义了一些状态码，用于表示服务器对请求的处理结果。常见的状态码有 200 OK、404 Not Found 和 500 Internal Server Error 等。客户端可以根据状态码来判断请求是否成功，并适当地进行处理。</p><h2 id="HTTP-会话和-Cookie"><a href="#HTTP-会话和-Cookie" class="headerlink" title="HTTP 会话和 Cookie"></a>HTTP 会话和 Cookie</h2><p>由于 HTTP 是一种无状态协议，服务器无法在不同的请求之间保留客户端的状态信息。为了解决这个问题，HTTP 使用了一个名为 Cookie 的机制。客户端在发送请求时，可以附带一个包含了状态信息的 Cookie，服务器在返回响应时也可以附带一个新的 Cookie。通过这种方式，服务器和客户端之间可以维持一个会话。</p><h2 id="网络服务器通信过程"><a href="#网络服务器通信过程" class="headerlink" title="网络服务器通信过程"></a>网络服务器通信过程</h2><p>网络服务器通信过程分为以下几个步骤：</p><ol><li>DNS 解析：客户端将 URL 解析成 IP 地址，以便发送请求。</li><li>TCP 连接：客户端与服务器建立 TCP 连接，以便进行数据传输。</li><li>发送请求：客户端将请求发送给服务器，请求中包含了请求行、请求头和请求体三部分。</li><li>接收响应：服务器接收到请求之后，根据请求的内容进行处理，并返回一个响应。响应由状态行、响应头和响应体三部分组成。</li><li>断开连接：客户端和服务器断开 TCP 连接。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>HTTP 是一种常用的应用层协议，它定义了请求和响应的格式、常用的方法和状态码等。了解 HTTP 的基本工作原理和网络服务器的通信过程，对于开发者来说是非常有帮助的。希望本文能够帮助读者更好地理解 HTTP 以及网络服务器通信的基本原理。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何实现一个自己的Node.js脚手架工具</title>
      <link href="/posts/2022-04-35772/"/>
      <url>/posts/2022-04-35772/</url>
      
        <content type="html"><![CDATA[<p>脚手架是一种快速创建项目结构的工具，它可以让你在使用某个框架或库时，快速地创建出一个基础项目的结构，而不需要从头开始编写代码。本博客将会向你展示如何使用 Node.js 创建一个简单的脚手架工具，并通过一个示例项目演示其用法。</p><h2 id="步骤一：创建项目结构"><a href="#步骤一：创建项目结构" class="headerlink" title="步骤一：创建项目结构"></a>步骤一：创建项目结构</h2><p>首先，我们需要创建我们的脚手架项目。我们可以使用以下命令来创建一个新文件夹并初始化项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> my-scaffold-tool</span><br><span class="line"><span class="built_in">cd</span> my-scaffold-tool</span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>这将创建一个名为“my-scaffold-tool”的文件夹，并在其中初始化一个新的 Node.js 项目。</p><p>接下来，我们需要安装一些必要的依赖项，包括 Commander 和 Inquirer。Commander 是一个命令行界面库，可以帮助我们解析命令行参数，而 Inquirer 则是一个交互式命令行工具，可以帮助我们收集用户输入信息。</p><p>运行以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commander inquirer@^8.0.0 --save</span><br></pre></td></tr></table></figure><h2 id="步骤二：创建命令行接口"><a href="#步骤二：创建命令行接口" class="headerlink" title="步骤二：创建命令行接口"></a>步骤二：创建命令行接口</h2><p>现在，我们需要用 Commander 库来为我们的脚手架创建一个命令行接口。在项目根目录新建 index.js 文件并添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">&quot;commander&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&quot;inquirer&quot;</span>);</span><br><span class="line"></span><br><span class="line">program.<span class="title function_">version</span>(<span class="string">&quot;0.1.0&quot;</span>).<span class="title function_">description</span>(<span class="string">&quot;My awesome scaffold tool&quot;</span>);</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&quot;create&quot;</span>)</span><br><span class="line">  .<span class="title function_">description</span>(<span class="string">&quot;Create a new project&quot;</span>)</span><br><span class="line">  .<span class="title function_">action</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Creating a new project...&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">program.<span class="title function_">parse</span>(process.<span class="property">argv</span>);</span><br></pre></td></tr></table></figure><p>上述代码中，我们通过调用 require 函数引入了 Commander 库和 Inquirer 库，并创建了一个新的命令行程序对象。我们还定义了一个“create”子命令，该子命令将在用户运行“my-scaffold-tool create”时被调用。</p><p>现在，我们可以使用以下命令来测试我们的命令行接口是否工作正常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js --version</span><br></pre></td></tr></table></figure><p>如果一切正常，这应该输出版本号“0.1.0”。</p><h2 id="步骤三：收集用户输入"><a href="#步骤三：收集用户输入" class="headerlink" title="步骤三：收集用户输入"></a>步骤三：收集用户输入</h2><p>现在我们已经创建了一个简单的命令行接口，接下来让我们使用 Inquirer 库来收集用户输入。打开 index.js 文件并添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&quot;create&quot;</span>)</span><br><span class="line">  .<span class="title function_">description</span>(<span class="string">&quot;Create a new project&quot;</span>)</span><br><span class="line">  .<span class="title function_">action</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    inquirer</span><br><span class="line">      .<span class="title function_">prompt</span>([</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;input&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;projectName&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;Enter the project name:&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;projectType&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;Select a project type:&quot;</span>,</span><br><span class="line">          <span class="attr">choices</span>: [<span class="string">&quot;Web application&quot;</span>, <span class="string">&quot;Node.js module&quot;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;confirm&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;useGit&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;Use Git for version control?&quot;</span>,</span><br><span class="line">          <span class="attr">default</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ])</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Creating a new project with the following options:&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; - Project name:&quot;</span>, answers.<span class="property">projectName</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; - Project type:&quot;</span>, answers.<span class="property">projectType</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; - Use Git:&quot;</span>, answers.<span class="property">useGit</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="步骤四：创建项目"><a href="#步骤四：创建项目" class="headerlink" title="步骤四：创建项目"></a>步骤四：创建项目</h2><p>运行以下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install simple-git fs-extra --save</span><br></pre></td></tr></table></figure><p>最后，我们需要将用户输入转换为实际的项目结构。我们可以定义一个 createProject 函数来完成此任务。打开 index.js 文件并添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs-extra&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createProject</span>(<span class="params">projectName, projectType, useGit</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> projectPath = path.<span class="title function_">join</span>(process.<span class="title function_">cwd</span>(), projectName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建项目目录</span></span><br><span class="line">  fs.<span class="title function_">mkdirSync</span>(projectPath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 复制模板文件</span></span><br><span class="line">  <span class="keyword">const</span> templatePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;templates&quot;</span>, projectType);</span><br><span class="line">  fs.<span class="title function_">copySync</span>(templatePath, projectPath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化Git仓库</span></span><br><span class="line">  <span class="keyword">if</span> (useGit) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Initializing Git repository...&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> gitInit = <span class="built_in">require</span>(<span class="string">&quot;simple-git&quot;</span>)(projectPath).<span class="title function_">init</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">program</span><br><span class="line">  .<span class="title function_">command</span>(<span class="string">&quot;create&quot;</span>)</span><br><span class="line">  .<span class="title function_">description</span>(<span class="string">&quot;Create a new project&quot;</span>)</span><br><span class="line">  .<span class="title function_">action</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    inquirer</span><br><span class="line">      .<span class="title function_">prompt</span>([</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;input&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;projectName&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;Enter the project name:&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;projectType&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;Select a project type:&quot;</span>,</span><br><span class="line">          <span class="attr">choices</span>: [<span class="string">&quot;webapp&quot;</span>, <span class="string">&quot;node-module&quot;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;confirm&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;useGit&quot;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;Use Git for version control?&quot;</span>,</span><br><span class="line">          <span class="attr">default</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ])</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">answers</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">createProject</span>(answers.<span class="property">projectName</span>, answers.<span class="property">projectType</span>, answers.<span class="property">useGit</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>上述代码中，我们首先导入了 Node.js 内置的 fs 和 path 模块，以及第三方的 fs-extra 模块，该模块提供了一些额外的功能，例如创建目录和复制文件。然后，我们定义了一个 createProject 函数，该函数根据用户输入创建项目目录，并复制适当的模板文件。</p><p>最后，我们在命令行接口中调用 createProject 函数，并将用户输入传递给该函数。</p><h2 id="步骤五：添加模板文件"><a href="#步骤五：添加模板文件" class="headerlink" title="步骤五：添加模板文件"></a>步骤五：添加模板文件</h2><p>现在我们需要为我们的脚手架添加一些模板文件，以便我们可以在创建项目时使用它们。我们将在 my-scaffold-tool 文件夹中创建一个名为“templates”的子文件夹，并在其中添加两个子文件夹，“webapp”和“node-module”。每个子文件夹将包含该类型项目所需的所有文件和文件夹结构。</p><p>以下是一个简单的示例模板文件结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- templates</span><br><span class="line">  - webapp</span><br><span class="line">    - index.html</span><br><span class="line">    - css</span><br><span class="line">      - style.css</span><br><span class="line">    - js</span><br><span class="line">      - main.js</span><br><span class="line">  - node-module</span><br><span class="line">    - index.js</span><br><span class="line">    - package.json</span><br></pre></td></tr></table></figure><p>你可以根据自己的需求添加或修改这些模板文件。</p><h2 id="步骤六：测试脚手架工具"><a href="#步骤六：测试脚手架工具" class="headerlink" title="步骤六：测试脚手架工具"></a>步骤六：测试脚手架工具</h2><p>现在我们已经完成了我们的脚手架工具，让我们来测试一下它是否正常工作。运行以下命令来创建一个名为“my-project”的新 Web 应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js create</span><br></pre></td></tr></table></figure><p>在提示你输入项目名称、项目类型和是否使用 Git 进行版本控制后，输入以下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Enter the project name: my-project</span><br><span class="line">Select a project type: webapp</span><br><span class="line">Use Git for version control? Yes</span><br></pre></td></tr></table></figure><p>然后，你应该看到以下输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Creating a new project with the following options:</span><br><span class="line"> - Project name: my-project</span><br><span class="line"> - Project type: webapp</span><br><span class="line"> - Use Git: true</span><br><span class="line">Initializing Git repository...</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure><p>现在，你可以浏览 my-project 文件夹，以查看是否已成功创建 Web 应用程序结构，并且如果你选择使用 Git 进行版本控制，还会发现已初始化了一个新的 Git 仓库。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>至此，我们已经演示了如何使用 Node.js 创建一个简单的脚手架工具。通过创建你自己的脚手架工具，你可以快速地创建出符合你需求的项目结构，并避免重复编写基础代码。同时，你也可以根据需要扩展这个脚手架工具，使其更加适合你的项目需求。例如，你可以添加更多的命令行选项，以便用户可以选择使用特定功能或插件。你还可以将你自己的模板文件添加到“templates”文件夹中，以便在创建项目时使用。</p><p>另外，请注意，在实际开发中，你可能需要继续优化和完善你的脚手架工具，并确保它可以处理各种不同的情况和异常情况。同时，还需要考虑如何与其他工具和流程进行集成，例如自动化测试、构建和部署工具等。</p><p>希望本文对你有所帮助，希望你通过创建自己的 Node.js 脚手架工具来提高生产效率和代码质量。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 文件操作与模块化</title>
      <link href="/posts/2022-04-64689/"/>
      <url>/posts/2022-04-64689/</url>
      
        <content type="html"><![CDATA[<p>Node.js 是一种基于事件驱动、非阻塞 I&#x2F;O 的开发技术，可以在服务器端运行 JavaScript，并且具备 I&#x2F;O 操作能力。在 Node.js 开发中，文件操作和模块化是两个非常重要的概念。</p><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>Node.js 提供了一系列的内置模块，例如 <code>fs</code>（文件系统）模块、<code>path</code> 模块等，用于完成各种与文件相关的操作。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p><code>fs.readFile()</code> 方法用于读取文件，它的语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;file.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>readFile()</code> 方法接收两个参数：要读取的文件路径以及读取完成后的回调函数。</li><li>回调函数包含两个参数：错误信息 <code>err</code> 和读取到的数据 <code>data</code>。</li><li>这里使用 <code>toString()</code> 方法将二进制数据转换为字符串。</li></ul><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p><code>fs.writeFile()</code> 方法用于写入文件，它的语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;Hello World!&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;File saved!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>writeFile()</code> 方法接收三个参数：要写入的文件路径、要写入的数据以及写入完成后的回调函数。</li><li>回调函数只包含一个参数，即错误信息 <code>err</code>。</li></ul><h3 id="其他文件操作"><a href="#其他文件操作" class="headerlink" title="其他文件操作"></a>其他文件操作</h3><p>除了读取和写入文件，Node.js 还提供了一系列的文件操作方法，例如：</p><ul><li><code>fs.unlink(path, callback)</code>：删除文件；</li><li><code>fs.rename(oldPath, newPath, callback)</code>：重命名文件；</li><li><code>fs.appendFile(file, data[, options], callback)</code>：追加数据到文件末尾。</li></ul><p>更多操作可参考 fs 模块文档：<a href="https://nodejs.org/dist/latest-v14.x/docs/api/fs.html">1</a>。</p><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>Node.js 旨在让开发者能够通过模块化的方式来组织代码，使得代码更加简洁、易于维护。在 Node.js 中，每个 JavaScript 文件都是一个模块。</p><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><p>在 Node.js 中，可以使用 module.exports 对象导出模块。以下是一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module1.js</span></span><br><span class="line"><span class="keyword">const</span> myModule = &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="string">&quot;Hello, World!&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = myModule;</span><br></pre></td></tr></table></figure><p>在另一个文件中，可以使用 <code>require()</code> 方法引入模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> myModule = <span class="built_in">require</span>(<span class="string">&quot;./module1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myModule.<span class="property">greeting</span>);</span><br></pre></td></tr></table></figure><p>上述代码中，<code>require()</code> 方法会返回 <code>module1.js</code> 中导出的对象，然后可以通过该对象访问该模块的内容。</p><h3 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h3><p>Node.js 除了支持自定义模块外，还提供了一些内置模块，例如 <code>os</code>（操作系统）、<code>path</code>（文件路径）等等。这些内置模块可以直接使用，无需进行安装。</p><p>以下是一个例子展示如何使用 <code>os</code> 模块获取操作系统的信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&quot;os&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Platform: <span class="subst">$&#123;os.platform()&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`CPU Architecture: <span class="subst">$&#123;os.arch()&#125;</span>`</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Memory: <span class="subst">$&#123;os.totalmem() / <span class="number">1024</span> ** <span class="number">3</span>&#125;</span> GB`</span>);</span><br></pre></td></tr></table></figure><h3 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h3><p>除了内置模块外，Node.js 还支持使用第三方模块，可以通过 npm 安装和管理。例如，<code>axios</code> 是一种流行的第三方模块，可以用于发送 HTTP 请求。</p><p>以下是一个简单的例子展示如何使用 <code>axios</code> 发送 GET 请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line">axios</span><br><span class="line">  .<span class="title function_">get</span>(<span class="string">&quot;https://jsonplaceholder.typicode.com/todos/1&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br></pre></td></tr></table></figure><p>上述代码中，我们使用了 axios 的 get() 方法发送 GET 请求，并处理响应结果或错误信息。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简要介绍了 Node.js 中的文件操作和模块化开发，希望读者能够掌握 Node.js 中的基础知识并能够使用它们构建高效、可维护的程序。Node.js 提供的强大功能使其在网络应用程序开发中具有很高的实用性，同时也是前端工程师的一种必备技能。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 编程基础</title>
      <link href="/posts/2022-04-3320/"/>
      <url>/posts/2022-04-3320/</url>
      
        <content type="html"><![CDATA[<p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，使得 JavaScript 能够在服务器端运行并具有 I&#x2F;O 操作能力。本文主要介绍 Node.js 的基本概念、安装及使用方法。</p><h2 id="什么是-Node-js？"><a href="#什么是-Node-js？" class="headerlink" title="什么是 Node.js？"></a>什么是 Node.js？</h2><p>Node.js 是一个可以在服务器端运行 JavaScript 的开源、跨平台运行时环境。它是一个基于事件驱动、非阻塞 I&#x2F;O 的模型，使得开发者能够使用 JavaScript 快速地构建高性能的网络应用程序。</p><p>Node.js 的核心是 V8 引擎，V8 是 Google Chrome 浏览器中的 JavaScript 引擎，它将 JavaScript 编译为机器码，使得 JavaScript 在浏览器中可以运行得非常快。Node.js 利用了 V8 引擎的优势，同时为后端提供了 I&#x2F;O 操作的能力，使得 JavaScript 可以在服务器端实现系统级别的操作，如文件读写、网络通信等。</p><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>Node.js 的安装非常简单，只需要到官网下载对应的安装包，然后按照提示进行安装即可。官网地址为：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a>。</p><p>安装完成后，我们可以在命令行中输入以下命令来检查是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v <span class="comment"># 显示 Node.js 的版本号</span></span><br><span class="line">npm -v <span class="comment"># 显示 npm 的版本号</span></span><br></pre></td></tr></table></figure><p>运行成功后，会分别显示 Node.js 和 npm 的版本号。</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>接下来我们将创建一个简单的 Node.js 应用程序，输出 “Hello World!”。首先，在命令行中创建一个文件夹并进入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> myapp</span><br><span class="line"><span class="built_in">cd</span> myapp</span><br></pre></td></tr></table></figure><p>然后，创建一个名为 app.js 的文件，输入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure><p>保存后，可以在命令行中通过以下命令运行该应用程序：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure><p>运行成功后，会在命令行中输出 “Hello World!”。</p><h2 id="Node-js-模块与包管理器"><a href="#Node-js-模块与包管理器" class="headerlink" title="Node.js 模块与包管理器"></a>Node.js 模块与包管理器</h2><p>Node.js 的一个重要特性是模块化开发。在 Node.js 中，每个 .js 文件都是一个模块，一个模块可以引用其他模块，形成一个完整的程序。</p><p>除了使用内置模块外，开发者还可以选择安装第三方模块或自己编写模块。而包管理器 npm 则是管理这些模块的工具。</p><p>npm 是 Node.js 的默认包管理器，它可以让你轻松地查找、安装和管理 Node.js 模块。以下是一些常用的 npm 命令：</p><ul><li><code>npm install &lt;package&gt;</code>：安装一个 Node.js 模块；</li><li><code>npm uninstall &lt;package&gt;</code>：卸载一个 Node.js 模块；</li><li><code>npm init</code>：创建一个新项目；</li><li><code>npm search &lt;keywords&gt;</code>：搜索 Node.js 模块；</li><li><code>npm list</code>：列出当前项目所安装的所有模块。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了 Node.js 的基本概念、安装方法、应用程序开发以及模块化开发和包管理器 npm。Node.js 在 web 开发、网络编程等方面具有很大的优势，是一种非常强大的后端开发技术。希望本文可以帮助读者快速入门 Node.js 基础开发。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慧用药圈子融合总结</title>
      <link href="/posts/2021-12-42346/"/>
      <url>/posts/2021-12-42346/</url>
      
        <content type="html"><![CDATA[<h2 id="圈子合进慧用药的主要原则"><a href="#圈子合进慧用药的主要原则" class="headerlink" title="圈子合进慧用药的主要原则"></a>圈子合进慧用药的主要原则</h2><ul><li>尽量保持圈子的之前的目录的相对位置</li><li>尽量把圈子相关的放到一起</li><li>圈子的分包里只放圈子相关的组件和页面和静态文件</li><li>圈子的一些通用文件，比如 api，常量，store，mixin，stles，utils 等放到一个目录下，方便后面查找维护</li></ul><h2 id="如何把一个小程序变成一个分包"><a href="#如何把一个小程序变成一个分包" class="headerlink" title="如何把一个小程序变成一个分包"></a>如何把一个小程序变成一个分包</h2><p>圈子小程序和慧用药小程序用的都是 uni-app 框架，所以把圈子小程序变成慧用药的一个分包是完全可行的，基本思路就是圈子的页面和组件放到一个分包里，圈子主包的一些全局初始化定义，如钩子函数、mixin、store、styles、插件等合入到慧用药主包的相应位置</p><h3 id="第一步：把-packageUcb-目录完整复制到慧用药主目录"><a href="#第一步：把-packageUcb-目录完整复制到慧用药主目录" class="headerlink" title="第一步：把 packageUcb 目录完整复制到慧用药主目录"></a>第一步：把 packageUcb 目录完整复制到慧用药主目录</h3><p>因为给过来的就是分包好的，所以把整个目录复制过来就行</p><h3 id="第二步：把-packageUcb-配置为子包"><a href="#第二步：把-packageUcb-配置为子包" class="headerlink" title="第二步：把 packageUcb 配置为子包"></a>第二步：把 packageUcb 配置为子包</h3><p>把圈子 pages.json 下的 packageUcb 相关的配置拷贝到慧用药 pages.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;packageUcb&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/topic/post&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发布&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarBackgroundColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#fff&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;black&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;navigationStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/topic/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;navigationBarTitleText&quot;</span><span class="punctuation">:</span> <span class="string">&quot;动态详情&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;enablePullDownRefresh&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/home/index&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;style&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;navigationStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;enablePullDownRefresh&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;backgroundTextStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dark&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;onReachBottomDistance&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="第三步：把圈子下的组件定义到全局"><a href="#第三步：把圈子下的组件定义到全局" class="headerlink" title="第三步：把圈子下的组件定义到全局"></a>第三步：把圈子下的组件定义到全局</h3><p>圈子把它大部分的组件都定义到了全局组件里，所以在使用的时候不用再次引入，我们也需要把这些定义复制慧用药的 pages.json 里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/pages.json</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;custom&quot;</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;qui-(.*)&quot;</span>: <span class="string">&quot;@/packageUcb/components/qui-$1/qui-$1.vue&quot;</span>,</span><br><span class="line">  <span class="string">&quot;ucb-(.*)&quot;</span>: <span class="string">&quot;@/packageUcb/components/ucb-$1/ucb-$1.vue&quot;</span>,</span><br><span class="line">  <span class="string">&quot;uni-icons&quot;</span>: <span class="string">&quot;@/packageUcb/components/uni-icons/uni-icons.vue&quot;</span>,</span><br><span class="line">  <span class="string">&quot;uni-nav-bar&quot;</span>: <span class="string">&quot;@/packageUcb/components/uni-nav-bar/uni-nav-bar.vue&quot;</span>,</span><br><span class="line">  <span class="string">&quot;uni-status-bar&quot;</span>: <span class="string">&quot;@/packageUcb/components/uni-status-bar/uni-status-bar.vue&quot;</span>,</span><br><span class="line">  <span class="string">&quot;uni-popup(.*)&quot;</span>: <span class="string">&quot;@/packageUcb/components/uni-popup/uni-popup$1.vue&quot;</span>,</span><br><span class="line">  <span class="string">&quot;uni-transition&quot;</span>: <span class="string">&quot;@/packageUcb/components/uni-transition/uni-transition.vue&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;globalStyle&quot;</span>: &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&quot;usingComponents&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;painter&quot;</span>: <span class="string">&quot;/wxcomponents/painter/painter&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第四步：目录整合"><a href="#第四步：目录整合" class="headerlink" title="第四步：目录整合"></a>第四步：目录整合</h3><p>这一步的目的是为了方便后续维护，如果都放到主目录下会造成主目录下很多文件夹，而且有些文件夹还有重名，放到一个 discuzq 的子目录下可以让目录结构更清晰明了，但是路径改变了， 分包里的一些引用路径就会失效，解决办法就是在 vue.config.js 里定义一个 alias</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line">config.<span class="property">resolve</span>.<span class="property">alias</span>.<span class="title function_">set</span>(<span class="string">&quot;discuzq&quot;</span>, path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src/discuzq&quot;</span>));</span><br></pre></td></tr></table></figure><p>然后搜索替换所有引用到 discuzq 目录下子文件夹的引用路径为绝对路径，如 packageUcb&#x2F;page&#x2F;home&#x2F;index.vue 文件： 修改前：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;@/styles/base/variable/global.scss&#x27;</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;@/styles/base/theme/fn.scss&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;discuzq/styles/base/variable/global.scss&#x27;</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;discuzq/styles/base/theme/fn.scss&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="第五步：圈子全局-mixin-合入慧用药全局-mixin"><a href="#第五步：圈子全局-mixin-合入慧用药全局-mixin" class="headerlink" title="第五步：圈子全局 mixin 合入慧用药全局 mixin"></a>第五步：圈子全局 mixin 合入慧用药全局 mixin</h3><p>慧用药的全局 mixin 定义在 mixins&#x2F;global.js 文件下，我们需要把圈子的全局 mixin 混入该文件相应的方法中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/mixins/global.js</span></span><br><span class="line"><span class="keyword">import</span> discuzqMixin <span class="keyword">from</span> <span class="string">&#x27;./discuzqMixin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> discuzqMixin.<span class="property">data</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    discuzqMixin.<span class="property">onLoad</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 慧用药原有逻辑</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onUnload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    discuzqMixin.<span class="property">onUnload</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 慧用药原有逻辑</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...discuzqMixin.<span class="property">methods</span>,</span><br><span class="line">    <span class="comment">// 慧用药原有方法</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="第六步：圈子-store-合入慧用药-store"><a href="#第六步：圈子-store-合入慧用药-store" class="headerlink" title="第六步：圈子 store 合入慧用药 store"></a>第六步：圈子 store 合入慧用药 store</h3><p>圈子里定义了一个 store 实例，慧用药本身也定义了一个 store 实例，我们要做的就是去掉圈子的 store 实例，把配置混入到慧用药的 store 配置里，然后实例化一个新的慧用药 store 实例</p><p>圈子 store 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/discuzq/store/index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    <span class="attr">jv</span>: <span class="title function_">jsonapiModule</span>(http.<span class="property">request</span>.<span class="title function_">bind</span>(http), &#123;</span><br><span class="line">      <span class="attr">preserveJson</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">mergeRecords</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    atMember,</span><br><span class="line">    session,</span><br><span class="line">    forum,</span><br><span class="line">    emoji,</span><br><span class="line">    pay,</span><br><span class="line">    footerTab,</span><br><span class="line">    community,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>混入慧用药 store</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"><span class="keyword">import</span> params <span class="keyword">from</span> <span class="string">&quot;discuzq/store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> conf = &#123;</span><br><span class="line">  modules,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  getters,</span><br><span class="line">  actions,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(params).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (conf[key]) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(conf[key], params[key]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    conf[key] = params[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(conf);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(conf);</span><br></pre></td></tr></table></figure><h3 id="第七步：圈子-App-vue-合入慧用药-App-vue"><a href="#第七步：圈子-App-vue-合入慧用药-App-vue" class="headerlink" title="第七步：圈子 App.vue 合入慧用药 App.vue"></a>第七步：圈子 App.vue 合入慧用药 App.vue</h3><p>App.vue 中包含了 js 代码和 css 代码，我们需要把 js 代码抽取出来，然后把圈子里的混入到慧用药里的，为了方便，我们把圈子里抽取出来的 js 代码命名为 App.js，把慧用药里抽取出来的 js 代码命名为 eyaoApp.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/eyaoApp.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;discuzq/App&quot;</span>; <span class="comment">// 引入圈子App.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eyaoApp = &#123;</span><br><span class="line">  <span class="title function_">onLaunch</span>(<span class="params">option</span>) &#123;</span><br><span class="line">    <span class="title function_">updateManager</span>();</span><br><span class="line">    baikeReport.<span class="title function_">reportEvent</span>(<span class="string">&quot;app.onlaunch&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">current</span>: option.<span class="property">path</span></span><br><span class="line">        ? <span class="title function_">replaceParams</span>(option.<span class="property">query</span> || &#123;&#125;, <span class="string">`/<span class="subst">$&#123;option.path&#125;</span>`</span>)</span><br><span class="line">        : <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    pagePerformance.<span class="title function_">getPerformance</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onShow</span>(<span class="params">option</span>) &#123;</span><br><span class="line">    baikeReport.<span class="title function_">reportEvent</span>(<span class="string">&quot;app.onshow&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">current</span>: option.<span class="property">path</span></span><br><span class="line">        ? <span class="title function_">replaceParams</span>(option.<span class="property">query</span> || &#123;&#125;, <span class="string">`/<span class="subst">$&#123;option.path&#125;</span>`</span>)</span><br><span class="line">        : <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onHide</span>(<span class="params"></span>) &#123;</span><br><span class="line">    baikeReport.<span class="title function_">reportEvent</span>(<span class="string">&quot;app.onhide&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">globalData</span>: &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="string">&quot;eriqkin&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">    report.<span class="title function_">report</span>(error);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">App</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key-------&quot;</span>, key, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="keyword">if</span> (eyaoApp[key]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> eyaoApp[key] === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> originFunc = eyaoApp[key];</span><br><span class="line">      eyaoApp[key] = <span class="keyword">function</span> (<span class="params">option</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;on&quot;</span>, key, option);</span><br><span class="line">        originFunc.<span class="title function_">call</span>(eyaoApp, option);</span><br><span class="line">        <span class="title class_">App</span>[key].<span class="title function_">call</span>(eyaoApp, option);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      eyaoApp[key] = &#123;</span><br><span class="line">        ...eyaoApp[key],</span><br><span class="line">        ...<span class="title class_">App</span>[key],</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    eyaoApp[key] = <span class="title class_">App</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;App&quot;</span>, eyaoApp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> eyaoApp;</span><br></pre></td></tr></table></figure><p>新建一个 App.vue 文件，引入 eyaoApp.js 和圈子的全局样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/App.vue</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">&#x27;./eyaoApp&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> app;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="keyword">@import</span> <span class="string">&quot;./common/uni.scss&quot;</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="comment">/*引入圈子全局样式 */</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="keyword">@import</span> <span class="string">&#x27;discuzq/styles/base/reset.scss&#x27;</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="第八步：圈子主入口文件合入慧用药主入口文件"><a href="#第八步：圈子主入口文件合入慧用药主入口文件" class="headerlink" title="第八步：圈子主入口文件合入慧用药主入口文件"></a>第八步：圈子主入口文件合入慧用药主入口文件</h3><p>主入口文件主要是 Vue 的实例化和一些配置的初始化，我们需要保留慧用药的 vue 实例，去掉圈子的 vue 实例，但是保留圈子 vue 实例化的一些初始配置和初始化操作</p><p>把初始化操作封装到一个 init 函数中，然后在慧用药主入口文件调用该函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/discuzq/main.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">init</span> = (<span class="params">Vue</span>) =&gt; &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="property">values</span> = <span class="title class_">Object</span>.<span class="property">values</span> || <span class="title class_">ObjectValuesPolyfill</span>;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="property">entries</span> = <span class="title class_">Object</span>.<span class="property">entries</span> || <span class="title class_">ObjectEntriesPolyfill</span>;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">apploaded</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="title function_">getApp</span>();</span><br><span class="line">    <span class="keyword">const</span> forums = app.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;jv/get&#x27;</span>](<span class="string">&#x27;forums/1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 千万不能删</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !app.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;session/get&#x27;</span>](<span class="string">&#x27;isLogin&#x27;</span>) &amp;&amp;</span><br><span class="line">      appCommonH.<span class="title function_">isWeixin</span>().<span class="property">isWeixin</span> &amp;&amp;</span><br><span class="line">      forums.<span class="property">set_reg</span>.<span class="property">register_type</span> === <span class="number">2</span> &amp;&amp;</span><br><span class="line">      !uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;oauth_wechat&#x27;</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;register&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">      uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;oauth_wechat&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">      app.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;session/wxh5Login&#x27;</span>);</span><br><span class="line">      <span class="comment">// 无感登录下，需要记录当前url，提供给回调后进行跳转</span></span><br><span class="line">      uni.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="title function_">getCurUrl</span>(),</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line">  uni.$on(<span class="string">&#x27;apploaded&#x27;</span>, apploaded);</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$localeUse</span> = localeUse;</span><br><span class="line">  <span class="comment">// 因为小程序识别不了模板文件中的 $t 等 vue-i18n 相关的语法 api，因此直接挂载到 vue 的原型上，直接使用</span></span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">i18n</span> = i18n;</span><br><span class="line">  <span class="keyword">const</span> currentTheme = uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;theme&#x27;</span>) || <span class="variable constant_">THEME_DEFAULT</span>;</span><br><span class="line">  <span class="keyword">const</span> $u = &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$u</span> = $u;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Vue.prototype.$u&#x27;</span>, $u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; init &#125; <span class="keyword">from</span> <span class="string">&quot;discuzq/main&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>(<span class="title class_">Vue</span>);</span><br></pre></td></tr></table></figure><p>初始化配置封装到一个 setup 变量里</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/discuzq/main.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setup = &#123;</span><br><span class="line">  <span class="comment">// 注入配置好的国际化语言配置</span></span><br><span class="line">  i18n,</span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; setup &#125; <span class="keyword">from</span> <span class="string">&#x27;discuzq/main&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">  ...setup,</span><br><span class="line">&#125;);</span><br><span class="line">app.$mount();</span><br></pre></td></tr></table></figure><h3 id="第九步：圈子图片上传到-mms"><a href="#第九步：圈子图片上传到-mms" class="headerlink" title="第九步：圈子图片上传到 mms"></a>第九步：圈子图片上传到 mms</h3><p>上传到 mms 是为了减少子包的大小</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>家庭灯光设计技巧</title>
      <link href="/posts/2021-11-56450/"/>
      <url>/posts/2021-11-56450/</url>
      
        <content type="html"><![CDATA[<p>家庭灯光设计技巧：<strong>“灯光分散，有明有暗，各尽其用。”</strong></p><h2 id="灯光分散："><a href="#灯光分散：" class="headerlink" title="灯光分散："></a>灯光分散：</h2><ol><li>每间屋子至少三个光源，小卧室至少两盏</li><li>基础照明：基础照明照亮流线就好，每间屋子流明总数为 1000 左右，80lm 每平。如果有老人小孩、近视散光建议亮点。流明是灯光亮度的单位，但个人灯光感受不同，购买灯具建议眼见为实，及时退换灯泡。</li><li>主灯设计：不要过分亮的，至少主灯瓦数小于 70，基础照明就已经很够了。层高低也可以使用主灯，选择照亮方式向下的主灯，可以视觉上吸引注意力到地面。</li></ol><h2 id="有明有暗："><a href="#有明有暗：" class="headerlink" title="有明有暗："></a>有明有暗：</h2><ol><li>有明暗变化容易出层次和多焦点对比，空间感受会更丰富。分散照明，自然也就有明暗惹</li><li>关于灯泡类型，常见的灯泡类型有磨砂灯泡、射灯灯泡、爱迪生灯泡、钨丝灯泡等。磨砂灯泡柔和明亮，射灯灯泡边界清晰，犀利高级，爱迪生灯泡适合搭配镂空灯具使用。</li><li>关于灯泡光束角，15 度的超窄射灯，适合像博物馆一样照亮装饰品。常见射灯的光束角在 30－45 度间，地面和四周都能被照亮。</li></ol><h2 id="各尽其用："><a href="#各尽其用：" class="headerlink" title="各尽其用："></a>各尽其用：</h2><ol><li>阅读、工作、吃饭、找东西、做菜、展示等有视觉照明需求的位置再额外添置灯。阅读工作灯常需灯罩集中照亮；光向朝下适合做餐厅灯；四周发散的灯责适合作为基础照明灯。</li><li>建议装修前确定好，功能照明区域，留好灯位或插头。没留电位，可以用充电灯。</li><li>北欧风明线吊灯、钓鱼灯也可以解决灯位缺失的顶部光源。</li><li>搭配智能灯具，一键开关，还可以叫小爱同学，语音灯控。</li></ol><h3 id="tips："><a href="#tips：" class="headerlink" title="tips："></a>tips：</h3><ol><li>分散照明比超大吸顶灯要便宜，不论在耗电还是灯具采买上的花费。LED 灯以及宜家相当部分的灯具都能做到便宜又美观或省电。</li><li>装饰性灯光：无论有无不影响正常空间使用。比如星星灯、蜡烛、床下氛围灯、电视墙背景灯、玄关柜下氛围灯等</li><li>灯具色温建议选择在 2700－3000K 较合适，温馨又有情调~否则有强烈的阴阳感。如果非要冷暖对比，建议控制好照明比例，1：10 或 1：5。住宅灯具不超过 4000K，不然睡不好的。（对于显色度低的灯具，如卤素灯，又是带颜色的光，如果用在带颜色的物品上要慎重。景观中的绿叶红灯就有点诡异。</li><li>一般建议不选择色温变化的灯，花里胡哨，质量一般不好</li><li>灯的显色指数，越高对视力保护越好。建议 90CRI 以上，常见是 80CRI。化妆灯、阅读灯、展示灯由要注意。钨丝灯泡的显色度</li><li>LED 灯泡不要外露，不然伤眼睛。爱迪生灯泡等四面出光、对比强烈的灯泡不宜过亮，超过主光，否则伤眼。射灯建议灯头朝下或对着墙，买可调节角度的轨道灯、斗胆灯组。有必要的话可以买防眩光灯泡。老人小孩房间建议不用射灯。</li><li>床头射灯买无炫光款，布在床边靠外。高级又实用，尤其适合睡前阅读党。射灯角度要控好，小心投影。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活技能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Figma 自动复制并过滤 Css 代码</title>
      <link href="/posts/2021-10-42777/"/>
      <url>/posts/2021-10-42777/</url>
      
        <content type="html"><![CDATA[<p>使用方法：、</p><ol><li>复制以下代码</li><li>打开浏览器控制台粘贴后回车运行</li><li>在 Figma 设计稿中选择元素，就会自动复制并过滤当前元素 Css 代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMiniCss</span>(<span class="params">rawStr</span>) &#123;</span><br><span class="line">  result = rawStr.<span class="title function_">replace</span>(<span class="regexp">/([\d\.]+)px/g</span>, <span class="function">(<span class="params">pxStr, number</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> number * <span class="number">2</span> + <span class="string">&quot;rpx&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">``</span>;</span><br><span class="line">  [</span><br><span class="line">    <span class="string">&quot;width&quot;</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-weight&quot;</span>,</span><br><span class="line">    <span class="string">&quot;font-size&quot;</span>,</span><br><span class="line">    <span class="string">&quot;color&quot;</span>,</span><br><span class="line">    <span class="string">&quot;line-height&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border&quot;</span>,</span><br><span class="line">    <span class="string">&quot;border-radius&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background&quot;</span>,</span><br><span class="line">    <span class="string">&quot;background-color&quot;</span>,</span><br><span class="line">  ].<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&quot;font-weight&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> fontWeightRegx = <span class="regexp">/font-weight:\s(\d+)/m</span>;</span><br><span class="line">      <span class="keyword">const</span> fontWeightMatch = result.<span class="title function_">match</span>(fontWeightRegx);</span><br><span class="line">      <span class="keyword">if</span> (fontWeightMatch &amp;&amp; fontWeightMatch[<span class="number">1</span>] === <span class="string">&quot;500&quot;</span>) &#123;</span><br><span class="line">        str += <span class="string">`font-weight: 700;\n`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> match = result.<span class="title function_">match</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^<span class="subst">$&#123;key&#125;</span>:.+;`</span>, <span class="string">&quot;m&quot;</span>));</span><br><span class="line">      <span class="keyword">if</span> (match) &#123;</span><br><span class="line">        str += match[<span class="number">0</span>] + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">  str = str.<span class="title function_">trim</span>().<span class="title function_">replace</span>(<span class="regexp">/[^\S]$/gm</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setClipboardText</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="variable language_">window</span>.<span class="title function_">getSelection</span>(<span class="number">0</span>).<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (result.<span class="title function_">match</span>(<span class="regexp">/[a-z-]+:\s.+;/</span>)) &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    str = <span class="title function_">getMiniCss</span>(result);</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">clipboardData</span>) &#123;</span><br><span class="line">      <span class="comment">// event.clipboardData.setData(&quot;text/html&quot;, htmlData);</span></span><br><span class="line">      event.<span class="property">clipboardData</span>.<span class="title function_">setData</span>(<span class="string">&quot;text/plain&quot;</span>, str);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">clipboardData</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">clipboardData</span>.<span class="title function_">setData</span>(<span class="string">&quot;text&quot;</span>, str);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> setClipboardText !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;copy&quot;</span>, setClipboardText);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;copy&quot;</span>, setClipboardText);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Css </tag>
            
            <tag> Figma </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序页面预加载</title>
      <link href="/posts/2021-10-27770/"/>
      <url>/posts/2021-10-27770/</url>
      
        <content type="html"><![CDATA[<p>目前小程序需求场景在业务侧已经有了越来越多的实现落地，伴随着需求量的增加，小程序侧的用户也越来越多，业务侧也越来越关注小程序页面内部的访问体验，极速的页面打开速度才能给用户一个优秀的使用体验，本文介绍了一种小程序页面内容预加载的方案。</p><h2 id="页面加载流程"><a href="#页面加载流程" class="headerlink" title="页面加载流程"></a>页面加载流程</h2><p>在小程序环境中，点击一个入口至打开一个新的小程序页面，总体的响应渲染流程如下图所示</p><p><img src="/images/cos-file-url(2)%20(1).png" alt="xxx"></p><p>常规情况下，我们要实现一个页面内容加载的主要流程是这样的</p><ul><li><p>在 onLoad 回调中启动接口请求</p></li><li><p>接口请求之后获取数据进行数据裁剪</p></li><li><p>将渲染需要的数据进行 setData</p></li><li><p>页面渲染</p></li><li><p>这样很明显有一个问题，在请求渲染完成之前会有一段时间的空白，一般针对这个白屏问题我们可以考虑使用以下方案提升体验：</p></li><li><p>接口数据使用缓存，在每次接口访问时优先使用缓存，这样节省了接口访问的时间；这个方案适合于数据变动不大的工具类页面，对于数据实时性要求高的页面不可取，且这样的方案无法解决第一次访问的白屏问题；</p></li><li><p>页面使用加载中提示，比如 loading 或者骨架屏；这种方案只是给用户一个加载过程的概念，比白屏好但不解决等候问题。</p></li></ul><p>很明显以上方案都有各自的缺陷，这时候我们可以回头看下之前的渲染流程图，在用户点击入口至页面 onload 回调触发还是有一段时间（主要是页面切换的时间），如果我们利用这段时间来提前处理接口数据处理，那就能够解决白屏问题，达到页面打开即可见的效果。</p><h2 id="预加载方案"><a href="#预加载方案" class="headerlink" title="预加载方案"></a>预加载方案</h2><p>在页面进行跳转时就执行该页面的数据请求处理，这需要在入口处就能操纵页面方法的能力，而在小程序环境中可以通过 getCurrentPages 获取页面实例，但是在入口点击时下一个页面还未完成页面实例化，这样就无法将接口数据处理逻辑内置在原生页面代码里，我们需要抽离这块逻辑，并且在页面实例化完成后将内容注入处理后续逻辑！</p><p>为了减少入口以及页面本身逻辑的改动，降低代码的耦合程度，我们需要将预加载逻辑单独模块化，提供入口与出口的数据处理。这个过程主要有以下几个问题需要解决：</p><ol><li>如何将页面跳转路由上的参数透传给数据请求处理？</li><li>如何在页面跳转时启动数据请求处理？</li><li>如何在页面具体逻辑处理时拿到跳转时启动的数据处理返回？</li></ol><p>针对上面的问题这里设计一套预加载方案 - prefetch，如下图所示：</p><p><img src="/images/cos-file-url(3)%20(1).png" alt="xxx"></p><p>整体开发接入使用流程：</p><ul><li>初始时进行页面预加载配置注册</li><li>在跳转入口切换使用模块提供的路由方法</li><li>在页面逻辑里使用模块数据出口方法获取数据进行渲染</li></ul><p>这个过程中开发只需要引入 prefetch 包，使用 register&#x2F;navigateTo&#x2F;get 方法即可完成页面预加载能力。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>prefetch 设计了一套预加载配置，主要有以下选项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 页面路由</span></span><br><span class="line">  <span class="attr">route</span>: <span class="string">&#x27;pages/index/index&#x27;</span>,</span><br><span class="line">  <span class="comment">// 数据请求处理方法</span></span><br><span class="line">  <span class="title function_">request</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="comment">// 具体逻辑 xxxx</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 默认附带参数</span></span><br><span class="line">  <span class="attr">params</span>: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 路由上附带请求参数</span></span><br><span class="line">  <span class="attr">routeParamMap</span>: &#123;</span><br><span class="line">    <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个参数的含义：</p><ul><li>route，页面路由，能够唯一定位页面的标识；</li><li>request，数据请求处理方法，在这里可以进行接口请求，也可以进行数据裁剪，由开发自定义处理，最后将需要的数据返回；若存在异步请求需申明 async 标识；</li><li>params，默认参数，直接输出到 request 方法的参数里</li><li>routeParamMap，路由参数映射对象，参数为 key，对应的请求参数为 value，映射转换后输出到 request 方法的参数里</li></ul><p>配置注册逻辑，保存预加载配置相关信息</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">register</span> = (<span class="params">options = []</span>) =&gt; &#123;</span><br><span class="line">  options.<span class="title function_">forEach</span>(<span class="function">(<span class="params">option</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      route = <span class="string">&quot;&quot;</span>,</span><br><span class="line">      request = <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">      params,</span><br><span class="line">      routeParamMap,</span><br><span class="line">    &#125; = option || &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (route) &#123;</span><br><span class="line">      registerHttpMap[route] = &#123; request, params, routeParamMap &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>路由跳转，这里需劫持小程序原生的跳转方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">navigateTo</span> = (<span class="params">&#123; url, success, fail, complete &#125; = &#123;&#125;</span>) =&gt; &#123;</span><br><span class="line">  wx.<span class="title function_">navigateTo</span>(&#123; url, success, fail, complete &#125;);</span><br><span class="line">  <span class="comment">// 处理预加载路由</span></span><br><span class="line">  <span class="title function_">processUrl</span>(url);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>路由处理逻辑，拆解路由参数提供给方法使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析获取 route</span></span><br><span class="line">url = url.<span class="title function_">indexOf</span>(<span class="string">&quot;/&quot;</span>) === <span class="number">0</span> ? url.<span class="title function_">substring</span>(<span class="number">1</span>) : url;</span><br><span class="line"><span class="keyword">const</span> result = url.<span class="title function_">split</span>(<span class="string">&quot;?&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> route = result[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 未注册终止处理</span></span><br><span class="line"><span class="keyword">if</span> (!registerHttpMap[route]) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// 通过url参数获取request参数</span></span><br><span class="line"><span class="keyword">const</span> &#123; routeParamMap &#125; = registerHttpMap[route];</span><br><span class="line"><span class="keyword">const</span> urlParams = result[<span class="number">1</span>]</span><br><span class="line">  ? result[<span class="number">1</span>]</span><br><span class="line">      .<span class="title function_">split</span>(<span class="string">&quot;&amp;amp;&quot;</span>)</span><br><span class="line">      .<span class="title function_">map</span>(<span class="function">(<span class="params">s</span>) =&gt;</span> s.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>))</span><br><span class="line">      .<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj, map</span>) =&gt;</span> &#123;</span><br><span class="line">        obj[map[<span class="number">0</span>]] = map[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">      &#125;, &#123;&#125;)</span><br><span class="line">  : &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> params = <span class="title class_">Object</span>.<span class="title function_">keys</span>(routeParamMap)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function">(<span class="params">routeKey</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">key</span>: routeParamMap[routeKey],</span><br><span class="line">    <span class="attr">value</span>: urlParams[routeKey],</span><br><span class="line">  &#125;))</span><br><span class="line">  .<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj, param</span>) =&gt;</span> &#123;</span><br><span class="line">    obj[param.<span class="property">key</span>] = param.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line"><span class="comment">// 方法执行</span></span><br><span class="line"><span class="title function_">get</span>(&#123; route, params &#125;);</span><br></pre></td></tr></table></figure><p>get 方法请求执行，主要判断来源是页面内还是跳转入口，入口的话使用 promise 维护状态，页面内直接获取进行数据返回</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标示是否页面内请求</span></span><br><span class="line"><span class="keyword">let</span> inPage = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (!route) &#123;</span><br><span class="line">  <span class="comment">// 无route，表示页面直接请求</span></span><br><span class="line">  <span class="keyword">const</span> pages = <span class="title function_">getCurrentPages</span>();</span><br><span class="line">  route = pages[pages.<span class="property">length</span> - <span class="number">1</span>].<span class="property">route</span>;</span><br><span class="line">  inPage = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (registerHttpMap[route]) &#123;</span><br><span class="line">  <span class="keyword">const</span> strValParam = <span class="title class_">Object</span>.<span class="title function_">keys</span>(params).<span class="title function_">reduce</span>(<span class="function">(<span class="params">obj, key</span>) =&gt;</span> &#123;</span><br><span class="line">    obj[key] = <span class="string">`<span class="subst">$&#123;params[key]&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;, &#123;&#125;);</span><br><span class="line">  <span class="comment">// 方法key</span></span><br><span class="line">  <span class="keyword">const</span> promiseKey = <span class="string">`<span class="subst">$&#123;route&#125;</span><span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">    params ? <span class="string">&quot;/&quot;</span> + <span class="built_in">JSON</span>.stringify(strValParam) : <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="subst"><span class="string">  &#125;</span>`</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getPromise[<span class="subst">$&#123;promiseKey&#125;</span>]`</span>, getPromise[promiseKey]);</span><br><span class="line">  <span class="keyword">if</span> (getPromise[promiseKey]) &#123;</span><br><span class="line">    <span class="comment">// 取完缓存后清除</span></span><br><span class="line">    <span class="keyword">const</span> tmpl = getPromise[promiseKey];</span><br><span class="line">    <span class="keyword">delete</span> getPromise[promiseKey];</span><br><span class="line">    <span class="keyword">return</span> tmpl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> &#123; request, <span class="attr">params</span>: registerParams &#125; = registerHttpMap[route];</span><br><span class="line">  <span class="comment">// http参数：注册的默认参数 + 路由参数</span></span><br><span class="line">  <span class="keyword">const</span> httpParams = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, registerParams, params);</span><br><span class="line">  <span class="keyword">if</span> (inPage) &#123;</span><br><span class="line">    <span class="comment">// 页面请求，不走 promise ，直接请求</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(httpParams);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 预请求，走 promise 维护状态</span></span><br><span class="line">    getPromise[promiseKey] = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">r</span>(<span class="title function_">request</span>(httpParams));</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> getPromise[promiseKey];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了一种小程序页面预加载方案，利用小程序页面切换的时间来提前执行请求进行数据获取，在页面打开瞬间直接渲染数据，以此提升用户的访问体验！</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SHOW YOUR WORK!</title>
      <link href="/posts/2021-09-43785/"/>
      <url>/posts/2021-09-43785/</url>
      
        <content type="html"><![CDATA[<ol><li><p>你不必是个天才</p></li><li><p>专注过程而非结果</p><ul><li>找到你想学的东西，并在别人面前学习</li><li>分享你的过程和成果，更重要的是分享你的失败</li></ul></li><li><p>每天分享一点内容</p><ul><li>优质内容的权衡标准：他能否帮助到别人</li><li>启发与灵感</li><li>方法与进度</li><li>结果与心得</li><li>管理与协助</li></ul></li><li><p>运用你的想象力</p></li><li><p>讲有趣的故事</p></li><li><p>教给别人你会的东西</p><ul><li>对学到的东西不断的进行总结、归纳、思考、表达</li><li>把学到的东西藏在心里不仅是可耻的，而且是有害的，凡是我们不去努力分享的，也必将从我们这里失去</li></ul></li><li><p>不要分享垃圾内容</p></li><li><p>学会面对各种评论</p></li><li><p>推销自己</p></li><li><p>坚持下去</p><ul><li>你不需要是个天才，才有资格分享内容</li><li>坚持分享有用的内容</li><li>教给别人你会的知识</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序监控体系构建、性能优化与监控保障</title>
      <link href="/posts/2021-08-2948/"/>
      <url>/posts/2021-08-2948/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>腾讯云医业务是为医生和患者打造的一站式云端医疗服务平台。为了降低医生首次入驻平台的成本，并充分利用微信的私域流量，以确保医患双方获得更接近端原生的使用体验，我们选择将微信小程序作为医患双端的核心承载形式。</p><p>在小程序上线后，随着入驻医生和患者的增加，服务场景的丰富，微信小程序的性能面临了越来越多的挑战。在当前阶段，小程序的性能直接影响着用户的长期留存。因此，我们对医患双端进行了全面的性能优化，从加载、渲染等方面深入挖掘小程序的性能潜力，提升总体使用体验。</p><h2 id="当前存在的问题"><a href="#当前存在的问题" class="headerlink" title="当前存在的问题"></a>当前存在的问题</h2><p><img src="/images/cos-file-url(3).jpeg" alt="xxx"><br>在当前，我们面临的最严峻的问题有两个：</p><ol><li>加载时间慢：云医首页作为核心入口，承载了运营位、资讯广场、医生个人资料、常用功能入口等多项功能。间接导致首屏接口请求多，加载时间慢。整个小程序的首次冷启时间超过 5s。而加载时长又直接影响到小程序的到达率。根据《High performance iOS Apps》中用研结论，25% 的用户在应用启动时间超过 3s 时会放弃使用。</li><li>运行时体验差：以高频场景——诊室会话页为例，会话页面临长列表页面卡顿，滚动不流畅，随着历史消息加载，小程序闪退等问题。这些问题带来了极低的用户任务完成率，无法满足用户诉求，拉低用户留存。</li></ol><h2 id="优化历程"><a href="#优化历程" class="headerlink" title="优化历程"></a>优化历程</h2><p>在整个性能优化的历程中，我们采用了一个递进的优化策略：</p><ol><li>监控： 发现问题在哪 ———— 性能优化的前提是性能监控，通过监控我们才可以定位性能瓶颈。</li><li>优化：怎么解决这些问题 ———— 这一步，我们总结了一套通用的性能优化方法论。</li><li>保障： 问题怎么不再出现 ———— 如果在业务的快速迭代中做好高性能的保障，是我们需要长期克服的难题。</li></ol><h3 id="一、打造小程序性能监控体系"><a href="#一、打造小程序性能监控体系" class="headerlink" title="一、打造小程序性能监控体系"></a>一、打造小程序性能监控体系</h3><p>首先说监控，在开始做小程序性能监控的时候，我们面临了两个难点：</p><ol><li>微信官方没有给出权威的性能指标建议，如何将之前提到的性能问题转化为具体可量化的指标?</li><li>指标定好后，如何设计并落地一套稳定、高效、对性能有指导意义的监控方案？</li></ol><p>下面说一说我们是怎么解决这难点的：</p><h4 id="难点一：性能指标定义"><a href="#难点一：性能指标定义" class="headerlink" title="难点一：性能指标定义"></a>难点一：性能指标定义</h4><p>当我们说到合理的性能指标的时候，我觉得这个问题可以换一种方式来问：</p><blockquote><p>性能优化指标如何与用户体验优化的指标结合起来？</p></blockquote><p>按照我们的优化目标，以及小程序官方建议，我们将小程序的性能分为了 <strong>启动性能</strong> 和 <strong>运行时性能</strong>，我认为它们和用户体验可以组成这样的一一对应关系：</p><ul><li>启动性能 ————用户进入小程序时的加载速度。如果白屏时间过长，超出用户忍耐限度，则用户会选择放弃。</li><li>运行时性能 ———— 性能不止是 “足够快”；除了首次加载速度以外，我们还需要关注到小程序使用过程是否卡顿、是否常常会闪退、是否有白屏过程，是否会出现用户操作无响应等；全方位衡量用户在使用过程中能感知到的每个节点。</li></ul><h5 id="启动性能"><a href="#启动性能" class="headerlink" title="启动性能"></a>启动性能</h5><p>为了得到启动性能指标，我们从 小程序框架 还有 用户感知 两个维度分析了小程序启动全流程：<br><img src="/images/cos-file-url(4).jpeg" alt="xxx"></p><p>整个小程序的启动流程大概分为了五步：</p><ol><li><p>包拉取阶段：此时用户会看到一个 loading，这个时期框架做的主要事情包括：</p><ul><li>信息准备：微信客户端需要从微信后台获取小程序的配置、版本、权限等相关信息，以对小程序进行必要的版本管理、权限控制和校验。</li><li>运行环境准备：在执行小程序代码之前，微信客户端需要准备小程序运行的基础环境。</li><li>拉小程序代码包：小程序托管在腾讯云上，一个小程序可以由一个主包和若干分包组成，小程序启动时需要从服务器获取代码包地址、下载小程序代码包。</li></ul></li><li><p>代码注入阶段：小程序分为逻辑层和渲染层，在这个阶段，框架会从代码包内读取小程序的配置和代码，将 js 代码注入到 JS 引擎中，并触发小程序的 App.onLaunch 生命周期，我们将 App.onLaunch 视作小程序启动完成的标志。wxss 和 wxml 会经过编译注入到渲染层， 包含页面渲染需要的页面结构和样式信息。渲染层的注入耗时主要和页面结构复杂度和使用的自定义组件数量有关。</p></li><li><p>首屏创建阶段：这个时期逻辑层会创建页面实例，渲染层等待 initialData 进行渲染。</p></li><li><p>首屏首次渲染阶段：结合逻辑层得到的初始数据和渲染层得到的页面结构和样式信息，框架会进行小程序首屏的渲染，并在渲染完成后触发首屏的 Page.onReady 事件。这个时候用户会看到一个基于前端默认的数据状态的页面，由于这不是后端接口请求返回的真实数据，可以认为用户此时看到的信息是没有有价值的。</p></li><li><p>首屏可交互阶段：如果 onLoad 和 onShow 中没有其他方法，那么初次渲染完成后，页面已经是一个可交互的状态了。但实际情况下，页面中往往有很多逻辑方法和异步接口请求，请求到具体业务数据完成计算之后，进行多次 setData，并渲染最终的页面。这个时候用户才会看到完整的首屏内容。</p></li></ol><p>到这里为止，我们就简单的了解下启动阶段小程序做了什么事情，可以看到这个过程中，从开发者的角度，可以影响小程序启动流程的步骤有以下几个：<br><img src="/images/cos-file-url(7).jpeg" alt="xxx"></p><ol><li>主&#x2F;分包的下载和载入时间。</li><li>代码注入时间</li><li>onLaunch 和 onShow 同步脚本的执行时间</li><li>首屏首次渲染时间</li><li>首屏核心区域可交互时间</li></ol><p>我们把这几个步骤对应到五个启动性能指标，再加一个启动总耗时，此时，启动性能的指标就制定好了。<br><img src="/images/cos-file-url(8).jpeg" alt="xxx"></p><h5 id="运行时性能"><a href="#运行时性能" class="headerlink" title="运行时性能"></a>运行时性能</h5><p>接着再说一下运行时性能，我们针对用户在运行过程中遇到能问题进行分析，并把它们抽象为三类：体验类、异常类、加载类。</p><ul><li>体验类： 表现主要是页面卡顿。</li><li>异常类： 表现为白屏或者小程序闪退。</li><li>加载类： 页面首次加载或者某一个模块下载慢。<br><img src="/images/cos-file-url(9).jpeg" alt="xxx"></li></ul><p>然后针对这些性能问题的表现，总结原因，再将它们对应成立相应的运行时性能指标，此时，运行时性能指标就制定好了：<br><img src="/images/cos-file-url(10).jpeg" alt="xxx"><br><img src="/images/cos-file-url(11).jpeg" alt="xxx"><br>这里重点解释一下 setData 耗时、运行内存告警：<br><img src="/images/cos-file-url(12).jpeg" alt="xxx"></p><ol><li>setData 耗时：setData 是小程序在进行数据更新的时候调用的跨线程通信 API, 无论是用户交互还是后端接口返回数据，都会发生数据更新，setData 耗时的起始点是在逻辑层发起调用时，终止点是渲染层完成渲染并通知到逻辑层的时候，所以 setData 耗时可以最直观的反映出页面的渲染情况。</li><li>内存告警：小程序闪退一般是由于运行内存不足引起的；当小程序占用系统资源过高，可能会被系统销毁或被微信客户端主动回收，由于我们无法直接监控到小程序闪退，所以通过监控内存告警的方式来间接关注，分析出哪些页面 Crash 率比较高，从而针对性地做优化。</li></ol><p>到此为止，指标定义的过程就讲完了。</p><h4 id="难点二：监控方案的选择与落地"><a href="#难点二：监控方案的选择与落地" class="headerlink" title="难点二：监控方案的选择与落地"></a>难点二：监控方案的选择与落地</h4><p>在做监控方案之前，我们定了三个目标：</p><ul><li>指标收集：监控手段要能帮助我们收集到上面总结的性能指标，这也是最基本的要求。</li><li>明细数据：我们不仅要拿到性能指标本身，我们还要拿到很多附加信息，例如当前页面、用户机型、网络情况、这样才可以对数据进一步维度拆分、才能对性能优化有实际的指导意义。</li><li>灵活度：我们希望可以自己管控数据存储，一方面是为了把控数据存续时间，另一方面是为了方便做功能拓展，例如数据分析及告警。</li></ul><p>我们针对微信官方和公司的性能监控手段进行了分析来补充它缺失的能力：</p><p><img src="/images/cos-file-url(16).jpeg" alt="xxx"></p><p>并在最后选用了表格里的绿色部分作为我们的性能监控手段的补充：</p><p><img src="/images/cos-file-url(17).jpeg" alt="xxx"></p><p>它们分别是：</p><ul><li>性能 Trace 工具 &#x2F; 性能面板： 在开发版小程序下可以打开性能面板，看到小程序运行中的部分性能数据，通过它，我们可以得到 “运行内存” 这种常规前端监控手段得不到的数据。</li><li>微信开放平台指标： 微信官方提供的服务端调用接口，与小程序后台比起来自由度更高，可以由业务方自己做数据的存储和展示。</li><li>wx.getperfotmance： 前端调用的 API ，我们利用它，获得我们关注的启动总耗时 ，代码注入时间。</li><li>TAM ： 公司级一站式前端监控解决方案，它偏重传统 web 前端监控能力，我们利用它来补全前端错误监控。</li><li>miniprogram-ci：从微信开发者工具中抽离的关于小程序代码编译模块，可以通过它在每次流水线的时候获得主包，分包的大小。</li></ul><p>就这样，我们构建好了自己的性能监控体系。他的主流程是在小程序运行过程中，通过自动上报向微信官方上报数据，通过 wx.getperformance 和自定义上报向 TAM 上报数据，然后分别从 微信开放平台以及 TAM 开放平台进行数据拉取，数据处理，数据入库和展示。</p><p>这个时候，我们又面临了第二个问题：怎么保证服务的稳定性和数据的完整性，为了解决这个问题，我们做了以下几件事情：</p><ul><li>增加再次拉取机制保证数据拉取成功率，5 点 ，20 点分别拉取昨日数据。</li><li>数据拉取重复性校验，对已经拉取成功的数据，再次拉取时直接跳过拉取。</li><li>增加人为干预机制，开放 API，在有数据缺失或者数据异常的时候，可以手动触发的方式进行补充。</li><li>增加基于 json-schema 数据自检能力，针对数据合法性做异步校验，有问题的数据剔除并报警。</li></ul><p><img src="/images/cos-file-url(18).jpeg" alt="xxx"></p><p>到此为止，整个小程序性能监控体系就构建好了。</p><h3 id="二、性能优化"><a href="#二、性能优化" class="headerlink" title="二、性能优化"></a>二、性能优化</h3><p>监控的部分讲完了，下面说一下优化的部分。在监控体系构建好之后，我们就可以把性能问题以指标形式量化了。</p><p>以下是优化前云医的性能报道,我们通过和微信体验评分以及业内性能表现优秀的小程序做对比，找到以下性能瓶颈，主要是表格的中红字部分。</p><p><img src="/images/cos-file-url(20).jpeg" alt="xxx"></p><p>针对这些指标做一个简单的分析，可以看到问题主要有三个：</p><p><img src="/images/cos-file-url(21).jpeg" alt="xxx"></p><p>在小程序启动过程中，appLaunch 时间平均有 2s 左右，首屏核心区域可交互时间平均有 2 到 3 s，这两个时间都太长了。</p><p><img src="/images/cos-file-url(22).jpeg" alt="xxx"></p><p>类似于上图中这种 IM 场景的长列表页面，在拉取列表数据过程中，setData 时间随着数据拉取不断的增大，导致页面越来越卡顿。并且运行内存也有增大的趋势，刚进入页面的时候运行内存大概在 100M 左右，随着使用过程可能会逐渐上升到 800M.</p><p>因此，我们确立了三个重点的优化方向，分别是启动优化，首屏渲染优化，setData 优化.</p><h4 id="重点一：启动时间（appLaunch）优化"><a href="#重点一：启动时间（appLaunch）优化" class="headerlink" title="重点一：启动时间（appLaunch）优化"></a>重点一：启动时间（appLaunch）优化</h4><p>首先讲启动（appLaunch）时间优化，对启动初始化时间进行简单分析，前面这一部分信息&#x2F;环境准备时间作为开发者而言是没有优化空间的，因此我们主要做的事情就是<strong>包拉取耗时</strong>以及<strong>代码注入耗时</strong>的优化。<br><img src="/images/cos-file-url(24).jpeg" alt="xxx"></p><h5 id="启动时间（appLaunch）-包拉取耗时优化"><a href="#启动时间（appLaunch）-包拉取耗时优化" class="headerlink" title="启动时间（appLaunch） - 包拉取耗时优化"></a>启动时间（appLaunch） - 包拉取耗时优化</h5><p>包拉取耗时与小程序主包大小正相关，经过简单的调研我们发现，当整个小程序的主包体积保持在 1M 以内的时候, 拉包时间大约可以控制在 1s 左右。我们当时的主包大小已经到 1.9M，即将达到微信的主包上限 2M，因此，我们决定针对小程序包体积进行一次瘦身。</p><p>在做包体积优化前，需要考虑的主要问题有两个：</p><ol><li>优化包体积的时候不可避免要删掉很多模块，如何防止误删影响线上功能 ？</li><li>小程序里资源类型较多，如何针对每一种资源找到适合它的优化策略？</li></ol><p>问题一的解决策略是：通过微信开发工具静态分析功能找出无依赖模块；通过蓝盾流水线接入 code CC 插件找出重复模块。<br><img src="/images/cos-file-url(25).jpeg" alt="xxx"></p><p>这样就可以快速把要移除的模块快速找出来，并且对线上功能影响最小。在优化完之后，我们也进行功能全量测试再上线。避免对线上产生不良影响。</p><p>问题二的解决策略是：使用传统 web 场景优化手段针对文件资源进行优化；使用小程序场景特殊优化手段针对分包，组件进行优化。 下面这张图包含了我们用到的所有包大小优化策略：</p><p><img src="/images/cos-file-url(26).jpeg" alt="xxx"></p><p>它的核心思路可以用四个字概括：</p><ol><li>删： 已下线、已废弃、无关、冗余不再需要的内容进行删除。</li><li>搬： 将所有非核心非必要的内容搬出主包。静态资源可以迁到 cdn，静态页面可以挪至 h5，通过 webview 载入，非 tab 页用到的公共组件以及页面也尽量挪到分包。</li><li>压： 针对不同的资源类型使用不同的压缩方式，例如通过 js-treeshaking 对 vendor.js 进行压缩，把 png 改为 jpg 格式体积可以减少 50%等等。</li><li>合： 将可以复用的模块进行合并。</li></ol><blockquote><p>经过一系列优化后，医生端的代码包从 1.9M 缩小到 1.36M；患者端的代码包从 1.57M 缩小到 1M, 医生端启动耗时大概下降了 300ms 左右。</p></blockquote><h5 id="启动时间（appLaunch）-代码注入耗时优化"><a href="#启动时间（appLaunch）-代码注入耗时优化" class="headerlink" title="启动时间（appLaunch） - 代码注入耗时优化"></a>启动时间（appLaunch） - 代码注入耗时优化</h5><p>在小程序启动时，主包里的代码会统一注入到小程序运行环境，打包成一个 appjs （一都有 1-2 M），这里面包括了首屏用不到的逻辑代码，影响启动耗时。</p><p>解决方案：开启了小程序官方提供的代码懒注入，原理类似 webpack 按需打包，仅注入当前页面需要的自定义组件和当前页面代码。开发者可以在 app.json 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;lazyCodeLoading&quot;</span>: <span class="string">&quot;requiredComponents&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>开启这项配置之后，代码注入的时间下降了 50%，启动耗时大概减少 150ms 左右。</p></blockquote><p>Tips: 官方提供的 useExtendedLib 扩展库 api 和 lazyCodeLoading 同时使用会存在冲突暂未解决，因此用到 useExtendedLib 的情况下无法使用 lazyCodeLoading。</p><h5 id="启动时间（appLaunch）优化-总收益"><a href="#启动时间（appLaunch）优化-总收益" class="headerlink" title="启动时间（appLaunch）优化 - 总收益"></a>启动时间（appLaunch）优化 - 总收益</h5><p>针对医患双端进行优化完后，小程序启动（ applaunch ）时间大概 下降 20% 左右</p><h4 id="重点二-首屏渲染优化"><a href="#重点二-首屏渲染优化" class="headerlink" title="重点二:首屏渲染优化"></a>重点二:首屏渲染优化</h4><p>首先我们针对首屏渲染时间进行详细分析，在小程序启动完成后，会发起两个请求，分别是登陆接口和获取医生信息的接口，首页所有其他的逻辑要等待这两个接口请求完毕，严重阻塞了首屏时间；</p><p>另外，首页其他的接口和渲染耗时加起来也有 1900ms，因此，针对这两部分用到的优化策略分别是<strong>首屏阻塞时间优化</strong>以及<strong>首页接口逻辑优化</strong>。</p><h5 id="首屏渲染-首屏阻塞时间优化"><a href="#首屏渲染-首屏阻塞时间优化" class="headerlink" title="首屏渲染 - 首屏阻塞时间优化"></a>首屏渲染 - 首屏阻塞时间优化</h5><p>登陆接口平均耗时有 600ms，我们首先针对这部分进行分析，发现建立 SSL 连接的时间就占了整个接口的 50%，那么这部分有没有办法优化呢？经详细调研后发现，这个过程中需要和微信多次交互，没有优化空间。我们还想到一个办法，针对这两个接口在后端进行聚合，但是聚合完后也只优化了 100ms，这个对于首屏而言是远远不够的。</p><p><img src="/images/cos-file-url(31).jpeg" alt="xxx"></p><p>最终解决方式是采用数据预拉取，也就是在小程序启动时，通过微信的服务器代理小程序发起一个 HTTP 请求到第三方服务器来获取数据，并且把响应数据存储在本地客户端供小程序前端调取。当小程序加载完成后，只需调用微信提供的 API wx.getBackgroundFetchData 从本地缓存获取数据。通过这种方式，我们可以把这两个阻塞的请求发起的时间从 appLaunch 的时间提前到用户点击进入小程序的时间。</p><blockquote><p>预拉取上线后，首屏核心区域可交互时间大概减少了 700ms，优化效果非常明显。</p></blockquote><p>tips： 预拉取的数据会被强缓存，在缓存失效前微信客户端不会再次发起请求，所以对于数据实时性要求较高的接口不适用于使用预拉取。</p><h5 id="首屏渲染-首页接口逻辑优化"><a href="#首屏渲染-首页接口逻辑优化" class="headerlink" title="首屏渲染 - 首页接口逻辑优化"></a>首屏渲染 - 首页接口逻辑优化</h5><p>医生端首页作为核心入口，承载功能较多。首屏共调用了 18 个业务接口，还有自己的日志上报和云通信查询。接口堆积排队导致加载较慢，同时我们还发现首页实现逻辑上还有一些不合理的地方，比如一些不需要频繁更新的状态查询放在了 Page.show 里面。</p><p>针对这部分，我们主要用到的优化方式是：</p><ol><li>关键请求提前，例如获取医生注册信息，从首页移至 app.onLaunch。从 app.onLaunch 到首页的 onLoad 大概有 200ms ~ 300ms，这就赢得了 200ms 的首屏渲染时间。</li><li>非关键请求延后，例如非第一屏的数据，放到最后请求。</li><li>将一些更新较频繁，但是频率接近的接口，在后端做了接口聚合。</li><li>没有上下依赖关系的串行请求，改为并行。</li><li>优化了静态资源的缓存逻辑，由于我们的静态资源都使用了 hash，不存在同名不同文件问题，我们将静态资源的浏览器缓存时间从默认的十分钟延长至一周。</li><li>开启 http2：wx.request 从 2.10.4 开始支持 http2，我们知道：在 HTTP&#x2F;1.1 中，如果客户端想发送多个并行的请求，那么必须使用多个 TCP 连接，而 HTTP&#x2F;2 的二进制分帧层突破了这一限制，所有的请求和响应都在同一个 TCP 连接上发送。这样就可以消除不必要的延迟，从而减少页面加载的时间。</li></ol><p>除了上述优化以外，我们还用到了<strong>接口缓存</strong>，我们发现云医首屏大部分接口数据比较稳定，时效性要求低，因此我们设计了一套通用的接口数据缓存方案，接口请求数据先读取本地缓存数据。</p><p>无论本地缓存数据有没有都发送 http 请求。我们本地缓存的数据只是作为页面的首次渲染数据，减少用户等待时间。接口成功返回后更新本地缓存，再用新数据更新页面，这样确保用户看到最新的数据。<br><img src="/images/cos-file-url(32).jpeg" alt="xxx"></p><blockquote><p>使用首屏接口缓存后，页面核心区域可交互时间大概下降了 300ms 左右</p></blockquote><h5 id="首屏渲染-总收益"><a href="#首屏渲染-总收益" class="headerlink" title="首屏渲染 - 总收益"></a>首屏渲染 - 总收益</h5><blockquote><p>首屏渲染优化完成后，医生端首屏核心区域可交互时间 从 2560ms 减少至 983ms，可交互时间缩短了一倍多。患者端首屏核心区域可交互时间从 1030ms 减少至 650ms</p></blockquote><h4 id="重点三：-setData-优化"><a href="#重点三：-setData-优化" class="headerlink" title="重点三： setData 优化"></a>重点三： setData 优化</h4><p>当前我们面临的问题是在长列表页面，setData 时长不断增大，导致页面卡顿。首先针对这个问题进行一个简单的分析：</p><ol><li>setData 是小程序内用于数据更新的跨线程通信方式，本身就是一个比较昂贵的操作，在长列表页面，setdata 数据量大，调用次数频繁，进一步降低性能表现。</li><li>我们使用的底层开发框架 mpvue 又针对了 setData 做了进一步封装，对于开发者而言 setData 基本上是黑盒过程，难以定位问题原因</li></ol><p>为了解决这个问题，我们针对云医小程序上的 setData 过程从框架运行的角度进行了一次深入分析。<br><img src="/images/cos-file-url(35).jpeg" alt="xxx"></p><p>我们使用的 mpvue 是一个类 vue 的小程序跨端框架它借助了 vue 的响应式双向绑定、vnode 能力来优化小程序原生 setData。 在进入页面的时候，会初始化一个 vue 实例，再初始化一个小程序的 Page 实例，在有数据变更的时候， vue 的数据响应层会收集数据更改并且提供给 render 函数，render 函数会生成 vnode。</p><p>正常情况下在 web 上，下一步就是将 vnode 映射为真实 dom，但是小程序并没有提供操作 dom 的 api，所以框架会给更新的值加一个脏检查标记，并且遍历一下 vnode，将有标记的数据组装成 json，然后传递给 Page 实例进行更新。</p><p>针对这个过程进行分析后，我们发现了两个问题：</p><ol><li>由于进行数据脏检查标记的时候，数组类型对比的是 vm 中的值，Vue 不会保留变化之前数组的副本，因此数组类型无法做 diff ，所以数组类型的数据更新都是全量更新。</li><li>小程序里无法操作 dom。虚拟 dom 在这里属于一个多余设计。</li></ol><p>我们还发现一个问题： mpvue 不支持小程序自定义组件。</p><p>这是因为在 mpvue 诞生之初，微信小程序尚不支持自定义组件，无法进行组件化开发, 为了解决这个问题，mpvue 将用户写的组件，编译为 wxml 中的 模版。看一个编译产出的例子：</p><p><img src="/images/cos-file-url(37).jpeg" alt="xxx"></p><p>通过 import 的方式，子组件 —— 父组件 —— page 会被最终编译为一个大的 template，在组件中定义的数据会被编译为 Page 中的数据，对组件进行数据更新也会基于路径映射调用 Page.setData。每个组件的局部更新都会成为页面级别的全局更新。</p><p>小程序的组件模型与 Web Components 标准中的 ShadowDOM 非常类似，每个组件都有独立的节点树，拥有各自独立的逻辑空间（包括独立的数据、setData 调用、createSelectorQuery 执行域等）。从页面级别的更新是要比组件级别的局部更新性能表现更差的。</p><p>到此为止，可以得出一个结论，mpvue 上的性能表现已经不满足我们的需要，由于项目是基于 vue 开发的，迁移到同类型的类 vue 语法小程序框架上的成本很低，因此，我们选择使用框架迁移来解决这个问题。</p><p>我们从增量更新，自定义组件，适配 h5，社区活跃几个角度，对市面上几种其它的类 vue 语法小程序开发框架进行了调研和对比,最终选择了 uni-app 作为我们的开发框架。</p><p><img src="/images/cos-file-url(38).jpeg" alt="xxx"><br>uni-app 带来的提升主要有：</p><ul><li>Vue 层取消 vnode 对比。</li><li>借鉴了 westore 的 JSON Diff 库，该库高效轻量，可以进行更彻底的 diff 计算，对于常熟组类型的数据也可以进行高效准确的 diff。</li><li>支持小程序自定义组件。<br>迁移完成后，我们以之前性能表现较差的会话页为例，进入会话页上拉历史记录，统计十三次拉取聊天记录的情况下的 setData 渲染耗时平均值，可以得到这样一个对比图表。</li></ul><p><img src="/images/cos-file-url(39).jpeg" alt="xxx"></p><blockquote><ol><li>长列表场景下，mpvue 【setData 时间】与【拉取新数据次数】成正相关</li><li>uni-app 上 【seData 时间】与【拉取新数据次数】无明显关联，基本上稳定在 3ms 左右</li></ol></blockquote><p>在框架迁移后，随着 setData 的性能提升，长列表场景的卡顿问题已经得到了暂时的缓解，但是仍然没有从根本上解决问题，只要列表在加载新的内容，页面内容就会越来越多，dom 树结构就会越来越复杂，数据更新引起的 Recalculate Style 和 Layout 时间也会更长，最后 setData 性能还是退化。</p><p>针对这个问题。我们采用的优化思路是<strong>虚拟滚动</strong>：它的核心的思路是只渲染显示在屏幕的数据，仅更新局部可见区域，对于已经脱离了可视区域的列表项，改用空白节点占位。</p><p>这里主要遇到的困难有两个：</p><ol><li><p>虚拟滚动的空白节点高度怎么算？<br>首先由开发者定义多少个列表项算一屏，把长列表的一维数组改成一个二维数组，二维数组的每一项对应了每一屏（不一定是真实的屏幕上的一屏，只要比一屏的长度长就行了），在渲染完成后，获取当前最新渲染这一屏的高度，将其赋值给用于记录每一屏高度的数组：pageHeightArr。然后在翻过当前一屏后，将其作为空白节点的高度计算标准。</p></li><li><p>虚拟滚动在快速滚动的时候怎么做？<br>在可视元素列表前后预先多渲染几个列表元素。这样我们在少量滚动时可以偏移这些已渲染的元素而不是重新渲染，当滚动量超过缓存元素时，再进行重新渲染。</p></li></ol><blockquote><p>优化收益：对比腾讯云医小程序-&gt;群发助手下的患者列表初始化和选中时接入长列表组件前后的对比,横坐标为列表数据条数，当列表数据较少的时候，虚拟滚动优化效果不大，当列表数据指数级别上升，从 100 到 10000 条的时候，setData 时长变成一条相当陡峭的曲线，而虚拟滚动几乎不变。另外运行内存的峰值也从 800M 下降到 500M</p></blockquote><p><img src="/images/cos-file-url(40).jpeg" alt="xxx"></p><h4 id="优化-总收益"><a href="#优化-总收益" class="headerlink" title="优化 - 总收益"></a>优化 - 总收益</h4><p>到此为止，优化手段就介绍的差不多了。这是性能优化总的优化结果：<br><img src="/images/cos-file-url(44).jpeg" alt="xxx"></p><h3 id="三、保障"><a href="#三、保障" class="headerlink" title="三、保障"></a>三、保障</h3><p>在做性能优化的过程中，我们也注意到，随着业务的逐渐迭代，曾经优化过一轮的性能指标又面临了部分退化；<strong>如何在快速的版本迭代中做好高性能的保证</strong> 成为我们需要长期克服的难题。</p><p>针对这个问题，我们用到的主要方式是：</p><h4 id="性能评分"><a href="#性能评分" class="headerlink" title="性能评分"></a>性能评分</h4><p>为页面性能和小程序启动性能构建评分机制。</p><h4 id="性能告警"><a href="#性能告警" class="headerlink" title="性能告警"></a>性能告警</h4><p><img src="/images/cos-file-url(46).jpeg" alt="xxx"></p><ol><li>耗时：利用大盘用户大数据，与历史版本进行比对分析。发现新增性能下降，采用周期性告警策略。</li><li>异常：前端异常 类型的数据，采用 TAM 趋势性告警 能力。</li><li>专项优化：建立页面性能负责人机制，对于新版本性能下降的页面进行页面专项优化。</li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这次的性能优化，我们找寻了小程序运行中可能影响性能的点，再针对这些影响点我们提出可行的优化建议，落地方案，最终一个个小的优化汇合成一个大的结果，使小程序的性能得到大幅的改善。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Meta 标签改进 NuxtJs 站点的 SEO，以及解决 data-n-head 导致网站验证失败的问题</title>
      <link href="/posts/2021-08-2347/"/>
      <url>/posts/2021-08-2347/</url>
      
        <content type="html"><![CDATA[<p>这篇文章并非 SEO 指南，它只是一篇简短的文章，让你了解一些基本的 meta 标签和 Nuxt 相关的概念。</p><h2 id="Nuxt-Meta"><a href="#Nuxt-Meta" class="headerlink" title="Nuxt Meta"></a>Nuxt Meta</h2><p>NuxtJs 使每个页面的 Mete 配置变得非常简单，我们可以通过全局引入和单个页面引入两种方式进行配置。</p><p>首先是全局配置，在项目根目录的 nuxt.config.js 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">head</span>: &#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;TITLE GOES HERE&quot;</span>,</span><br><span class="line">    <span class="attr">meta</span>: [</span><br><span class="line">      &#123; <span class="attr">charset</span>: <span class="string">&quot;utf-8&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;viewport&quot;</span>, <span class="attr">content</span>: <span class="string">&quot;width=device-width, initial-scale=1&quot;</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">hid</span>: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;description&quot;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&quot;Tips for having a Nuxt site optimized for SEO&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">hid</span>: <span class="string">&quot;keywords&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;keywords&quot;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&quot;vuejs, nuxtjs, seo, meta, sitemap, modules&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Title 值直接映射 HTML 的 <code>&lt;title&gt;&lt;/title&gt;</code> ，然后元数组中的每个值分别创建一个个新的 <code>&lt;meta&gt;&lt;/meta&gt;</code> 标记，其中包含相应的 name 和 content 属性。</p><p>对应结果是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">data-n-head</span>=<span class="string">&quot;true&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-n-head</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-n-head</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-hid</span>=<span class="string">&quot;description&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;description&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;Tips for having a Nuxt site optimized for SEO&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-n-head</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">data-hid</span>=<span class="string">&quot;keywords&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keywords</span>=<span class="string">&quot;vuejs, nuxtjs, seo, meta, sitemap, modules&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span> <span class="attr">data-n-head</span>=<span class="string">&quot;true&quot;</span>&gt;</span>TITLE GOES HERE<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>NuxtJs 在其中添加了 data-n-head，官方文档解释说大多数情况下它是非常标准的 meta 标签。但这是个大坑：当我们要在百度和搜狗进行站长认证时，想通过在 meta 标签放验证信息来验证，就会发现总无法验证通过。此处按下不表，文章最后会详细剖析并给出解决方案。</p><h2 id="Hid"><a href="#Hid" class="headerlink" title="Hid"></a>Hid</h2><p>这个属性是用来覆盖 meta 标签用的，如果你想用另一个元标签覆盖任何 Meta 标签，这是必需的。<strong>我们可以通过相同的 Hid 匹配全局定义的相同的 meta 标签，以覆盖标签的描述和关键字。</strong></p><h2 id="给单个页面定制-meta-标签和-Hid"><a href="#给单个页面定制-meta-标签和-Hid" class="headerlink" title="给单个页面定制 meta 标签和 Hid"></a>给单个页面定制 meta 标签和 Hid</h2><p>在单个 vue 页面文件中，有一个名为 head() 的函数负责返回定制的头部数据。</p><p>要点如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">  head () &#123;</span><br><span class="line">    <span class="keyword">let</span> post = <span class="variable language_">this</span>.<span class="property">post</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">title</span>: post.<span class="property">meta</span>.<span class="property">name</span>,</span><br><span class="line">      <span class="attr">meta</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">hid</span>: <span class="string">`description`</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;description&#x27;</span>,</span><br><span class="line">          <span class="attr">content</span>: post.<span class="property">meta</span>.<span class="property">content</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">hid</span>: <span class="string">`keywords`</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;keywords&#x27;</span>,</span><br><span class="line">          <span class="attr">keywords</span>: post.<span class="property">meta</span>.<span class="property">keywords</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>利用这个基本函数，我们需要做的是 post 请求数据并将其返回结果映射到 head 对象中。其中，相同的 Hid 会覆盖全局定义的相同 Hid 的 meta 标签。</p><p><a href="https://nuxtjs.org/docs/2.x/components-glossary/pages-head#the-head-method">在这里</a>，官方文献对 head 方法进行了更详细的解释。</p><p>基本上就是这些了！有了这个基本的设置，你现在可以为每个页面定制 meta 标签。</p><p>但有个遇到的问题不吐不快，就是接下来要说的 data-n-head。</p><h2 id="data-n-head-x3D-”ssr”-导致站点验证失败的坑"><a href="#data-n-head-x3D-”ssr”-导致站点验证失败的坑" class="headerlink" title="data-n-head&#x3D;”ssr” 导致站点验证失败的坑"></a>data-n-head&#x3D;”ssr” 导致站点验证失败的坑</h2><p>当我们想通过“ HTML 标签验证”的方式验证网站的所有权，以完成提交 sitemap、快速收录等来做 SEO 优化。如下图：</p><p><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/image_1629183198477.png" alt="image.png"></p><p>如果 Meta 标签被添加了 data-n-head&#x3D;”ssr” 属性，将会提示“找不到验证的 HTML 标签或者验证的 HTML 标签内容错误”。如下图：</p><p><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/image_1629183442267.png" alt="image.png"></p><p>看到“问题分析 &amp; 解决办法： 一般是 html 的 meta 标签没有正确放置，注意 meta 标签必需严格使用搜索资源平台提供的形式，不要做任何修改。”这个提示让我一度<strong>怀疑自己的怀疑</strong>，因为相同结构的 meta 标签，google、bing、360、头条、神马等搜索引擎都可以验证通过，就百度和搜狗出现了验证失败问题。</p><h2 id="寻求解决方案之：data-n-head-可以“一键”删除光吗？"><a href="#寻求解决方案之：data-n-head-可以“一键”删除光吗？" class="headerlink" title="寻求解决方案之：data-n-head 可以“一键”删除光吗？"></a>寻求解决方案之：data-n-head 可以“一键”删除光吗？</h2><p>很遗憾，并不能。</p><p>最开始我以为可以在 nuxt 的 hooks 里，直接处理编译后的 html 文件。但我发现在我们的项目中，存在以下一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRouteType</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line">  <span class="keyword">var</span> isSpa = !html.<span class="title function_">hasAttribute</span>(<span class="string">&quot;data-n-head-ssr&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> isSpa ? <span class="string">&quot;spa.enter&quot;</span> : <span class="string">&quot;ssr.enter&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里由于我们的项目太大业务十分的复杂，使用了 spa 和 ssr 混用的方式，所以需要利用 ‘data-n-head-ssr’ 来判断当前页面是否是 spa 单页应用。</p><p>没办法，只能想在 NuxtJs 和 Vue-meta 的文档和 issue 里看看有没有参数可以配置不要给我的标签（拿出 She is my girlfriend！ 的气势）添加多余的属性，很可惜，最终结论是官网不支持。</p><p>在<a href="https://github.com/nuxt/vue-meta/issues/524">not data-n-head&#x3D;”true”? #524</a>中，vue-meta 的作者给出的方案是“See the docs: <a href="https://vue-meta.nuxtjs.org/api/#callback">https://vue-meta.nuxtjs.org/api/#callback</a>”，在 callback 中处理 html。对应 NuxtJs 的解决方案是<a href="https://nuxtjs.org/docs/2.x/internals-glossary/internals-generator">https://nuxtjs.org/docs/2.x/internals-glossary/internals-generator</a>。</p><h2 id="NuxtJs-“-generate-“和”-build-“打包方式的区别"><a href="#NuxtJs-“-generate-“和”-build-“打包方式的区别" class="headerlink" title="NuxtJs “ generate “和” build “打包方式的区别"></a>NuxtJs “ generate “和” build “打包方式的区别</h2><p>在利用 Hooks 处理文件之间，需要分清 “ generate “和” build “打包方式</p><p>“ generate “和” build “打包方式主要有两个：文件打包和发布的区别。</p><p>在文件打包的区别上，使用 generate 打包后每个对应的页面都会生成一个 html ，在打包的时候不能关闭后台，它会请求后台数据生成首屏的数据。这样打包有一个弊端，当首屏的数据发生更改的时候，他还是显示的是之前的数据，要想改变的话，需要重新打包发布才行。所以，如果首屏是动态的就不建议使用这种打包方式。</p><p>而 build 打包生成的是动态页面，会灵活很多，每次 render 的都会是新的数据，这种方式也是具有 SEO 功能的。</p><p>在发布的区别上，使用 generate 打包和之前使用 vue 打包一样，生成一个 dist 文件夹，发布操作和普通 vue 项目没有区别。</p><p>而 build 打包会生成 .nuxt 文件夹，目录结构类似下图，发布操作会相对复杂一些。<br><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/image_1629190453784.png" alt="image.png"></p><h2 id="站点验证失败的解决方案"><a href="#站点验证失败的解决方案" class="headerlink" title="站点验证失败的解决方案"></a>站点验证失败的解决方案</h2><p>在 nuxt.config.js 添加以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">hooks</span>: &#123;</span><br><span class="line">    <span class="string">&quot;render:route&quot;</span>: <span class="function">(<span class="params">url, result</span>) =&gt;</span> &#123;</span><br><span class="line">      result.<span class="property">html</span> = result.<span class="property">html</span></span><br><span class="line">        .<span class="title function_">replace</span>(<span class="regexp">/ data-n-head=&quot;.*?&quot;/gi</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="regexp">/ data-hid=&quot;.*?&quot;/gi</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 此处我另写了正则针对百度和搜狗做了特殊处理，而不是示例这样之间去除全部</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>本解决方案更多细节可见：</p><p><a href="https://nuxtjs.org/docs/2.x/internals-glossary/internals-generator">Nuxt hooks</a></p><p><a href="https://stackoverflow.com/questions/62155583/nuxt-meta-tags-not-scraped-by-facebook-debugger">Nuxt meta-tags not scraped by Facebook Debugger</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>NuxtJs 是个很不错的工具，配置 Meta 标签也很方便，不过在兼容百度、搜狗浏览器做 SEO 优化的过程中，发现 data-n-head 的出现且无法通过配置来限制，感觉有种不受控的可怕感觉！当然这种解决方案看起来也很拉，十分的不优雅。其实我认为这个锅应该由国内的搜索引擎来背，meta 标签多了个无关的属性就不给验证通过，是不是有点“人工智障”？（或者说死板？）。</p><p>嗯… 发现一黑黑了俩。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> ssr </tag>
            
            <tag> nuxt </tag>
            
            <tag> seo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于微信小程序的微前端探索</title>
      <link href="/posts/2021-08-51728/"/>
      <url>/posts/2021-08-51728/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是微前端"><a href="#什么是微前端" class="headerlink" title="什么是微前端"></a>什么是微前端</h2><p>与微服务一样，微前端可以理解为一种架构，也可以是一种技术手段或方法策略，旨在让多个团队用独立发布功能的方式来共同构建现代化 web 应用，它有以下特点：</p><ul><li>每个子应用可独立开发、独立部署</li><li>每个子应用可以用不同的框架、技术栈来实现</li><li>每个子应用可独立升级</li></ul><h2 id="什么是小程序微前端"><a href="#什么是小程序微前端" class="headerlink" title="什么是小程序微前端"></a>什么是小程序微前端</h2><p>常见的网页微前端是把多个网页的应用进行整合，显而易见，小程序微前端就是把多个小程序的应用进行整合，合并成一个小程序。</p><h2 id="小程序微前端解决了什么痛点"><a href="#小程序微前端解决了什么痛点" class="headerlink" title="小程序微前端解决了什么痛点"></a>小程序微前端解决了什么痛点</h2><p>小程序微前端？这玩意有啥用？为啥要把多个小程序合并成一个小程序？从小程序跳到另一个小程序不香吗？理论任何的小程序可以任意跳转，而且还解耦，为啥要整合到一起？</p><p>首先小程序之间的跳转确实可以满足大部分小程序之间的联动，但这种方式也有缺点：</p><ul><li>需要打开一个外部小程序，在体验上让用户觉得突兀，在安全性上也会让用户疑惑</li><li>多个小程序之间很难进行通信<br>小程序微前端的方式可以把每个小程序作为主小程序的一个独立分包，主包和子包之间的通信也更容易实现。</li></ul><h2 id="关于-guru"><a href="#关于-guru" class="headerlink" title="关于 guru"></a>关于 guru</h2><p>guru 是为实现小程序微前端而开发的一个命令行工具，通过 guru 可以无痛的对多个小程序进行合并，它有以下优势：</p><p>接入简单，通过读取配置文件的方式进行合并<br>与框架无关，支持原生, uni-app, mpvue, taro 等开发的小程序<br>支持 js 沙箱、样式隔离、主子应用通信<br>轻量，注入代码在 4KB 左右</p><h2 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h2><ol><li>安装 guru<br><code>tnpm install -g @tencent/guru-cli</code></li><li>生成配置文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// guru.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 列表的第一项默认为主包</span></span><br><span class="line"><span class="comment">// @projectDir: 小程序app.js所在的根目录，如果是框架打包生成的，则是打包生成后的根目录</span></span><br><span class="line"><span class="comment">// @namespace: 子包所在的根目录名称</span></span><br><span class="line"><span class="comment">// @distDir: 合并后的小程序目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> apps = [</span><br><span class="line">  &#123; <span class="attr">projectDir</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;main/dist&quot;</span>), <span class="attr">namespace</span>: <span class="string">&quot;main-app&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">projectDir</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;sub/dist&quot;</span>), <span class="attr">namespace</span>: <span class="string">&quot;sub-app&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">compose</span>: &#123;</span><br><span class="line">    <span class="attr">apps</span>: apps,</span><br><span class="line">    <span class="attr">distDir</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;compose_dist&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>合并<br><code>guru compose -c guru.config.js</code></li><li>打开<br>合并后的小程序在 compose_dist 目录下，用微信开发者工具打开整个目录即可。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础知识梳理-运行环境</title>
      <link href="/posts/2021-08-20514/"/>
      <url>/posts/2021-08-20514/</url>
      
        <content type="html"><![CDATA[<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>运行环境即浏览器（server 端有 nodejs）</li><li>下载网页代码，渲染出页面，期间会执行若干 JS</li><li>要保证代码在浏览器中：稳定且高效</li></ul><h2 id="网页加载过程"><a href="#网页加载过程" class="headerlink" title="网页加载过程"></a>网页加载过程</h2><h3 id="加载资源的形式"><a href="#加载资源的形式" class="headerlink" title="加载资源的形式"></a>加载资源的形式</h3><ul><li>html 代码</li><li>媒体文件，如图片、视频等</li><li>JavaScript css</li></ul><h3 id="加载资源的过程"><a href="#加载资源的过程" class="headerlink" title="加载资源的过程"></a>加载资源的过程</h3><ul><li>DNS 解析：域名-&gt;IP 地址</li><li>浏览器根据 IP 地址向服务器发起 http 请求</li><li>服务器处理 http 请求，并返回给浏览器</li></ul><h3 id="渲染页面的过程"><a href="#渲染页面的过程" class="headerlink" title="渲染页面的过程"></a>渲染页面的过程</h3><ul><li>根据 HTML 代码生成 DOM Tree</li><li>根据 CSS 代码生成 CSSOM</li><li>将 DOM Tree 和 CSSOM 整合行程 Render Tree</li><li>根据 Render Tree 渲染页面</li><li>遇到 <code>&lt;script&gt;</code> 则暂停渲染，优先加载并执行 JS 代码，完成再继续</li><li>直至把 Render Tree 渲染完成</li></ul><p><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/D29D1C29-AFAE-47CF-819C-DC9EA37D5419_1628617459202.jpeg" alt="D29D1C29AFAE47CF819CDC9EA37D5419.jpeg"></p><h4 id="window-onload-和-DOMContentLoaded-的区别"><a href="#window-onload-和-DOMContentLoaded-的区别" class="headerlink" title="window.onload 和 DOMContentLoaded 的区别"></a>window.onload 和 DOMContentLoaded 的区别</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;lead&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 页面的全部资源加载完才会执行，包括图片、视频等</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// DOM 渲染完即可执行，此时图片、视频还可能没有加载完</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><blockquote><ul><li>是一个综合性问题，没有标准答案，但要求尽量全面</li><li>某些细节问题可能会单独提问：手写防抖、节流</li><li>只关注核心点，针对面试</li></ul></blockquote><h3 id="性能优化原则"><a href="#性能优化原则" class="headerlink" title="性能优化原则"></a>性能优化原则</h3><ul><li>多使用内存、缓存或其他方法</li><li>减少 CPU 计算量，减少网络加载耗时</li><li>（适用于所有编程的性能优化——空间换时间）</li></ul><h3 id="让加载更快"><a href="#让加载更快" class="headerlink" title="让加载更快"></a>让加载更快</h3><ul><li>减少资源体积：压缩代码</li><li>减少访问次数：合并代码，SSR 服务器端渲染，缓存<ul><li>合并代码：模块化合并、css 合并、雪碧图合并</li><li>服务端渲染：<ul><li>将网页和数据一起加载，一起渲染</li><li>非 SSR（前后端分离）：先加载网页，再加载数据，再渲染数据</li><li>早先的 JSP ASP PHP，现在的 vue React SSR</li></ul></li><li>命中缓存：<ul><li>静态资源加 hash 后缀，根据文件内容计算 hash</li><li>文件内容不变，则 hash 不变，则 url 不变</li><li>url 和文件不变，则会自动触发 http 缓存机制，返回 304</li></ul></li></ul></li><li>使用更快的网络：CDN</li></ul><h3 id="让渲染更快"><a href="#让渲染更快" class="headerlink" title="让渲染更快"></a>让渲染更快</h3><ul><li>CSS 放在 head，JS 反正 body 最下面</li><li>今早开始执行 JS，用 DOMContentLoaded 触发</li><li>懒加载（图片懒加载，上滑加载更多）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片懒加载</span></span><br><span class="line">&lt;img id=<span class="string">&quot;img1&quot;</span> src=<span class="string">&quot;preview.png&quot;</span> data-realsrc=<span class="string">&quot;abc.png&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 滑动判断图片显示在屏幕</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> img1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;img1&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">img.<span class="property">src</span> = img1.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-realsrc&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>对 DOM 查询进行缓存</li><li>频繁 DOM 操作，合并到一起插入 DOM 结构<ul><li>document.ceateDocumentFragment</li></ul></li><li>节流 throttle 防抖 debounce（体验优化）</li></ul><h2 id="体验优化"><a href="#体验优化" class="headerlink" title="体验优化"></a>体验优化</h2><h3 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖 debounce"></a>防抖 debounce</h3><ul><li>监听一个输入框，文字变化后触发 change 事件</li><li>直接用 keyup 事件，则会频繁触发 change 事件</li><li>防抖：用户输入结束或暂停时，才会触发 change 事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay = <span class="number">500</span></span>) &#123;</span><br><span class="line">  <span class="comment">// timer 是闭包中的</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// fn 调用的this和参数</span></span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;keyup&quot;</span>,</span><br><span class="line">  <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>);</span><br><span class="line">  &#125;, <span class="number">300</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流 throttle"></a>节流 throttle</h3><ul><li>拖拽一个元素时，要随时拿到该元素被拖拽的位置</li><li>直接用 drag 事件，则会频繁触发，很容易导致卡顿</li><li>节流：无论拖拽速度多快，都会间隔 100ms 触发一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay = <span class="number">100</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div1.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&quot;drag&quot;</span>,</span><br><span class="line">  <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">offsetX</span>);</span><br><span class="line">  &#125;, <span class="number">200</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h3 id="XSS-跨站请求攻击"><a href="#XSS-跨站请求攻击" class="headerlink" title="XSS 跨站请求攻击"></a>XSS 跨站请求攻击</h3><ul><li>嵌入<code>script</code>脚本</li><li>脚本内容：获取 cookie，发送到我的服务器（服务器配合跨域）</li></ul><h4 id="XSS-预防"><a href="#XSS-预防" class="headerlink" title="XSS 预防"></a>XSS 预防</h4><ul><li>替换特殊字符，如&lt;变为 &lt; &gt; 变为 &gt;</li><li><code>&lt;script&gt;</code>变为 &lt;script&gt;，直接显示，而不会作为脚本执行</li><li>前后端都要替换</li></ul><h4 id="XSS-工具"><a href="#XSS-工具" class="headerlink" title="XSS 工具"></a>XSS 工具</h4><ul><li>npm 下载</li></ul><h3 id="XSRF-跨站请求伪造"><a href="#XSRF-跨站请求伪造" class="headerlink" title="XSRF 跨站请求伪造"></a>XSRF 跨站请求伪造</h3><ul><li><p><code>&lt;img src=xxx.com/pay?id=200&gt;</code></p></li><li><p>使用 POST 接口</p></li><li><p>增加验证，如密码、短信验证码、指纹等</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础知识梳理-开发环境</title>
      <link href="/posts/2021-08-22487/"/>
      <url>/posts/2021-08-22487/</url>
      
        <content type="html"><![CDATA[<h2 id="关于开发环境"><a href="#关于开发环境" class="headerlink" title="关于开发环境"></a>关于开发环境</h2><ul><li>实际工作情况</li><li>体现工作产出效率</li><li>聊天为主，不会为具体问题</li></ul><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><ul><li>最常用的代码版本管理工具</li><li>大型项目需要多人协作开发，必须熟用 git</li><li>防丢失</li><li>对比提交记录</li></ul><h3 id="git-常用命令"><a href="#git-常用命令" class="headerlink" title="git 常用命令"></a>git 常用命令</h3><ul><li>git add .<ul><li>暂存</li></ul></li><li>git checkout xxx<ul><li>撤销修改</li></ul></li><li>git commit -m “xxx”<ul><li>提交</li></ul></li><li>git push origin master</li><li>git pull origin master</li><li>git branch</li><li>git checkout -b xxx &#x2F; git checkout xxx<ul><li>新建分支</li></ul></li><li>git merge xxx<ul><li>合并分支</li></ul></li><li>git diff<ul><li>修改了什么</li></ul></li><li>git log</li><li>git show xxxid</li><li>git status</li><li>冲突</li><li>git stash<ul><li>把改动的代码搁置一边</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git stash // 暂存当前修改</span><br><span class="line">git checkout -b new-b</span><br><span class="line">git stash pop // 推出来</span><br></pre></td></tr></table></figure><h2 id="chrome-调试工具"><a href="#chrome-调试工具" class="headerlink" title="chrome 调试工具"></a>chrome 调试工具</h2><ul><li>Elements<ul><li>审查元素</li><li>盒子模型</li></ul></li><li>Console<ul><li>打印</li></ul></li><li>debugger<ul><li>Sources 源码</li><li>断点</li></ul></li><li>Network<ul><li>资源的加载</li></ul></li><li>Application<ul><li>缓存</li></ul></li></ul><h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><ul><li>移动端 h5 页，查看网络请求，需要工具抓包</li><li>windows 一般用 fiddler</li><li>Mac OS 一般用 charles</li></ul><h3 id="抓包过程"><a href="#抓包过程" class="headerlink" title="抓包过程"></a>抓包过程</h3><ul><li>手机和电脑连同一个局域网</li><li>将手机代理到电脑上</li><li>手机浏览网页，即可抓包</li><li>查看网络请求</li><li>网址代理</li><li>https</li></ul><h2 id="webpack-和-babel"><a href="#webpack-和-babel" class="headerlink" title="webpack 和 babel"></a>webpack 和 babel</h2><ul><li>ES6 模块化，浏览器暂不支持</li><li>ES6 语法，浏览器并不完全支持</li><li>压缩代码，整合代码，以让网页加载更快</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line">const path = require(&quot;path&quot;)</span><br><span class="line">// webpack.config.js</span><br><span class="line">module.exports = &#123;</span><br><span class="line">mode: &quot;development&quot; // production</span><br><span class="line">entry: path.join(__dirname, &#x27;src&#x27;, &#x27;index.js&#x27;)</span><br><span class="line">output: &#123;</span><br><span class="line">filename: &#x27;bundle.js&#x27;,</span><br><span class="line">path: path.join(__dirname, &#x27;dist&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// html-webpack-plugin webpack-dev-server</span><br></pre></td></tr></table></figure><h3 id="babe"><a href="#babe" class="headerlink" title="babe"></a>babe</h3><ul><li>npm i @babel&#x2F;core @babel&#x2F;preset-env babel-leader -D</li><li>.babelrc</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="attr">leader</span>: [<span class="string">&quot;babel-leader&quot;</span>],</span><br><span class="line">      <span class="attr">include</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;src&quot;</span>),</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="linux-常用命令"><a href="#linux-常用命令" class="headerlink" title="linux 常用命令"></a>linux 常用命令</h2><ul><li><p>公司的线上机器一般都是 linux （参考阿里云）</p></li><li><p>测试机也要保持一致，用 linux</p></li><li><p>测试机或线上机出了问题，本地又不能复现，需要去排查</p></li><li><p>本地登陆线上机器</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh work@192.168.10.21</span><br></pre></td></tr></table></figure><ul><li>查看文件夹<ul><li>ls</li><li>ls -a （查看全部文件，.开头都是隐藏文件）</li></ul></li><li>看文件列表<ul><li>ll</li></ul></li><li>清屏<ul><li>clear</li></ul></li><li>新建文件夹<ul><li>mkdir abc</li></ul></li><li>删除文件夹<ul><li>rm -rf abc (-rf 递归、强制删除)</li></ul></li><li>去某目录<ul><li>cd ..</li></ul></li><li>修改文件<ul><li><strong>mv</strong> index index1.html</li></ul></li><li>拷贝文件<ul><li><strong>cp</strong> a.js a1.js</li></ul></li><li>删除文件<ul><li><strong>rm</strong> a1.js (没有回收站)</li></ul></li><li>创建文件<ul><li><strong>touch</strong> d.js</li><li><strong>vi</strong> d.js （新建并且打开–vim 编辑器）</li></ul></li><li>查看文件<ul><li><strong>vim</strong> d.js（没有文件会新建）</li><li><strong>cat</strong> d.js（打印文件所有内容到控制台）</li><li><strong>head</strong> d.js（打印前面几行）</li><li><strong>tail</strong> d.js（打印最末尾几行）</li></ul></li><li>查找文件内容<ul><li><strong>grep</strong> “babel” package.json</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础知识梳理-http</title>
      <link href="/posts/2021-08-43742/"/>
      <url>/posts/2021-08-43742/</url>
      
        <content type="html"><![CDATA[<h2 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h2><h3 id="状态码分类"><a href="#状态码分类" class="headerlink" title="状态码分类"></a>状态码分类</h3><ul><li>1xx 服务器收到请求</li><li>2xx 请求成功，如 200</li><li>3xx 重定向，如 302</li><li>4xx 客户端错误，如 404</li><li>5xx 服务端错误，如 500</li></ul><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><ul><li>200 成功</li><li>301 永久重定向（配合 location，浏览器自动处理）</li><li>302 临时重定向（配合 location，浏览器自动处理）<ul><li>如百度的搜索结果链接</li><li>短链接</li></ul></li><li>304 资源未被修改</li><li>404 资源为找到</li><li>403 没有权限</li><li>500 服务器错误</li><li>504 网关超时</li></ul><h3 id="协议和规范"><a href="#协议和规范" class="headerlink" title="协议和规范"></a>协议和规范</h3><ul><li>就是一个约定</li><li>要求大家都跟着执行</li></ul><h2 id="http-methods"><a href="#http-methods" class="headerlink" title="http methods"></a>http methods</h2><h3 id="传统的-methods"><a href="#传统的-methods" class="headerlink" title="传统的 methods"></a>传统的 methods</h3><ul><li>get 获取服务器的数据</li><li>post 向服务器提交数据</li><li>简单的网页功能，就这两个操作</li></ul><h3 id="现在的-methods"><a href="#现在的-methods" class="headerlink" title="现在的 methods"></a>现在的 methods</h3><ul><li>get 获取数据</li><li>post 新建数据</li><li>patch（补丁）&#x2F;put 更新数据</li><li>delete 删除数据</li></ul><h2 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h2><ul><li>一种新的 API 设计方法（早已推广使用）</li><li>传统 API 设计：把每个 url 当作一个功能</li><li>Restful API 设计：把每个 url 当作一个唯一的资源（标识、ID）</li></ul><h3 id="如何设计成一个资源？"><a href="#如何设计成一个资源？" class="headerlink" title="如何设计成一个资源？"></a>如何设计成一个资源？</h3><ul><li>尽量不用 url 参数<ul><li>传统 API 设计： <code>/api/list?pageIndex=2</code></li><li>Restful API 设计：<code>/api/list/2</code></li></ul></li><li>用 method 表示操作类型（传统 API 设计）<ul><li>post 请求 <code>/api/create-blog</code></li><li>post 请求 <code>/api/update-blog?id=100</code></li><li>get 请求 <code>/api/get-blog?id=100</code></li></ul></li><li>用 method 表示操作类型（Restful API 设计）<ul><li>post 请求 <code>/api/blog</code></li><li>patch 请求 <code>/api/blog/100</code></li><li>get 请求 <code>/api/blog/100</code></li></ul></li></ul><h2 id="http-headers"><a href="#http-headers" class="headerlink" title="http headers"></a>http headers</h2><h3 id="常见的-Request-Headers"><a href="#常见的-Request-Headers" class="headerlink" title="常见的 Request Headers"></a>常见的 Request Headers</h3><ul><li>Accept 浏览器可接收的数据格式</li><li>Accept-Encoding 浏览器可接收的压缩算法，如 gzip</li><li>Accept-Language 浏览器可接收的语言，如 zh-CN</li><li>Connection:keep-alive 一次 TCP 连接重复使用</li><li>cookie 每次都会带上</li><li>Host 请求的域名</li><li>User-Agent（UA）浏览器信息</li><li>Content-type 发送数据的格式，如 application&#x2F;json</li></ul><h3 id="常见的-Response-Headers"><a href="#常见的-Response-Headers" class="headerlink" title="常见的 Response Headers"></a>常见的 Response Headers</h3><ul><li>Content-type 返回数据的格式，如 application&#x2F;json</li><li>Content-length 返回数据的大小，多少字节</li><li>Content-Encoding 返回数据的压缩算法，如 gzip</li><li>Set-Cookie</li></ul><h2 id="http-缓存机制"><a href="#http-缓存机制" class="headerlink" title="http 缓存机制"></a>http 缓存机制</h2><h3 id="关于缓存"><a href="#关于缓存" class="headerlink" title="关于缓存"></a>关于缓存</h3><ul><li>什么是缓存？<ul><li>把没必要重新获取的资源，缓存到本地。第二次访问，不用重新请求资源。</li></ul></li><li>为什么需要缓存？<ul><li>减少网络请求的数量和体积，加快加载的速度</li><li>网络存在不稳定性，缓存提高稳定性</li></ul></li><li>哪些资源可以被缓存？<ul><li>静态资源（js css img）</li></ul></li></ul><h3 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h3><p><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/817C4317-8082-4B60-A476-FFC3FB79577D_1628602441877.jpeg" alt="817C431780824B60A476FFC3FB79577D.jpeg"></p><ul><li>初次请求</li><li>Cache-Control<ul><li>max-age（最大缓存时间）</li><li>no-cache（不用本地缓存）</li><li>no-store（不用本地缓存，也不让服务端缓存–不常见）</li><li>private（只允许最终用户缓存，如手机、电脑）</li><li>public（中间路由、代理也可以缓存）</li></ul></li><li>Expires（不用了）<ul><li>同在 Response Headers 中</li><li>同为控制缓存过期</li><li>已被 Cache-Control 代替</li></ul></li></ul><h3 id="协商缓存（对比缓存）"><a href="#协商缓存（对比缓存）" class="headerlink" title="协商缓存（对比缓存）"></a>协商缓存（对比缓存）</h3><ul><li>服务端缓存策略<ul><li>服务端判断可不可以被缓存</li></ul></li><li>服务器判断客户端资源，是否和服务端资源一样</li><li>一致则返回 304 ，否则返回 200 和最新的资源<br><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/BF414EC8-FD0A-4EE1-B3F5-30CAA94AE18D_1628602467056.jpeg" alt="BF414EC8FD0A4EE1B3F530CAA94AE18D.jpeg"></li></ul><h4 id="资源标识"><a href="#资源标识" class="headerlink" title="资源标识"></a>资源标识</h4><ul><li>在 Response Headers 中，有两种</li><li>Last-Modified 资源的最后修改时间</li><li>Etag 资源的唯一标识（一个字符串，类似人类的指纹）<ul><li>会优先使用 Etag</li><li>原因：Last-Modified 只能精确到秒级（计算机 ms 级）</li><li>如果资源被重复生成，而内容不变，则 Etag 更精确</li></ul></li></ul><p><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/7268C876-8B78-4A2A-A470-CC375BF1F1C7_1628602502908.jpeg" alt="7268C8768B784A2AA470CC375BF1F1C7.jpeg"><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/0839006A-6947-4E53-AF60-ABE5BCF0C5DF_1628602506805.jpeg" alt="0839006A69474E53AF60ABE5BCF0C5DF.jpeg"><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/5A216BE3-7DFC-48D3-BEF5-EE944EB2457F_1628602509600.png" alt="5A216BE37DFC48D3BEF5EE944EB2457F.png"></p><h2 id="刷新操作"><a href="#刷新操作" class="headerlink" title="刷新操作"></a>刷新操作</h2><h3 id="三种刷新操作对缓存的影响"><a href="#三种刷新操作对缓存的影响" class="headerlink" title="三种刷新操作对缓存的影响"></a>三种刷新操作对缓存的影响</h3><ul><li>正常操作：地址栏输入 url，链接跳转，前进后退</li><li>手动刷新：F5，点击刷新按钮，右击菜单刷新</li><li>强制刷新：ctrl + F5 （win）&#x2F; shif + com + r（mac）</li></ul><h3 id="不同刷新操作，不同的缓存策略"><a href="#不同刷新操作，不同的缓存策略" class="headerlink" title="不同刷新操作，不同的缓存策略"></a>不同刷新操作，不同的缓存策略</h3><ul><li>正常操作：强制缓存有效，协商缓存有效</li><li>手动刷新：强制缓存失效，协商缓存有效</li><li>强制刷新：强制缓存失效，协商缓存失效</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础知识梳理-JS Web API</title>
      <link href="/posts/2021-08-9488/"/>
      <url>/posts/2021-08-9488/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-Web-API"><a href="#JS-Web-API" class="headerlink" title="JS Web API"></a>JS Web API</h2><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h4 id="DOM-本质"><a href="#DOM-本质" class="headerlink" title="DOM 本质"></a>DOM 本质</h4><ul><li>树（DOM 树）</li></ul><h4 id="DOM-节点操作"><a href="#DOM-节点操作" class="headerlink" title="DOM 节点操作"></a>DOM 节点操作</h4><ul><li><p>获取 DOM 节点</p><ul><li>document.getElementById(‘div1’) &#x2F;&#x2F; 元素</li></ul><ul><li>document.getElementsByTabName(‘div’) &#x2F;&#x2F; 集合</li><li>document.getElementsByClassName(‘.container’) &#x2F;&#x2F; 集合</li><li>document.querySelectorAll(‘p’) &#x2F;&#x2F; 集合</li></ul></li></ul><ul><li><p>attribute</p><ul><li>p.setAttribute(‘data-name’, ‘imooc’)</li><li>p.setAttribute(‘style’, ‘width: 5px’)</li><li>p.getAttribute(‘data-name’)</li></ul></li><li><p>property</p><ul><li>p.style.width &#x2F;&#x2F; 获取样式</li><li>p.style.width &#x3D;&#x3D;&#x3D; ‘100px’ &#x2F;&#x2F; 修改样式</li><li>p.className &#x2F;&#x2F; 获取 class</li><li>p.className &#x3D; ‘p1’ &#x2F;&#x2F;修改 class</li><li>p.nodeName &#x2F;&#x2F; 节点名字</li><li>p.nodeType &#x2F;&#x2F; 一般 dom 类型是 1，不常用</li></ul></li></ul><h5 id="property-和-attribute"><a href="#property-和-attribute" class="headerlink" title="property 和 attribute"></a>property 和 attribute</h5><ul><li>property：修改对象属性，不会体现到 html 结构中</li><li>attribute：修改 html 属性，会改变 html 结构</li><li>两者都有可能引起 DOM 重新渲染</li></ul><h4 id="DOM-结构操作"><a href="#DOM-结构操作" class="headerlink" title="DOM 结构操作"></a>DOM 结构操作</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> div2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建节点</span></span><br><span class="line"><span class="keyword">const</span> newP = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">newP.<span class="property">innerHTML</span> = <span class="string">&quot;this is newP&quot;</span>;</span><br><span class="line"><span class="comment">// 插入节点</span></span><br><span class="line">div.<span class="title function_">appendChild</span>(p1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动节点</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line">div2.<span class="title function_">appendChild</span>(p1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取子元素列表</span></span><br><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> child = div1.<span class="property">childNodes</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取父元素</span></span><br><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> parent = div1.<span class="property">parentNode</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点</span></span><br><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> child = div.<span class="property">childNodes</span>;</span><br><span class="line">div1.<span class="title function_">removeChild</span>(child[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h4 id="DOM-性能"><a href="#DOM-性能" class="headerlink" title="DOM 性能"></a>DOM 性能</h4><ul><li>DOM 操作非常“昂贵”，避免频繁的 DOM 操作</li><li>对 DOM 查询做缓存</li><li>将频繁操作改为一次性操作</li></ul><hr><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><h4 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ua = navigator.<span class="property">userAgent</span>;</span><br><span class="line"><span class="keyword">const</span> isChrome = ua.<span class="title function_">indexOf</span>(<span class="string">&quot;Chrome&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isChrome);</span><br></pre></td></tr></table></figure><h4 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen.<span class="property">width</span>;</span><br><span class="line">screen.<span class="property">height</span>;</span><br></pre></td></tr></table></figure><h4 id="location"><a href="#location" class="headerlink" title="location"></a>location</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">href</span>; <span class="comment">// 整个网址</span></span><br><span class="line">location.<span class="property">host</span>; <span class="comment">// coding.imooc.com</span></span><br><span class="line">location.<span class="property">protocol</span>; <span class="comment">// &#x27;http:&#x27; &#x27;https:&#x27;</span></span><br><span class="line">location.<span class="property">pathname</span>; <span class="comment">// /learn/199</span></span><br><span class="line">location.<span class="property">search</span>; <span class="comment">// ?a=xxx&amp;b=xxx</span></span><br><span class="line">location.<span class="property">hash</span>; <span class="comment">// #xxx</span></span><br></pre></td></tr></table></figure><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">back</span>();</span><br><span class="line">history.<span class="title function_">forward</span>();</span><br></pre></td></tr></table></figure><hr><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><blockquote><p>阻止事件冒泡<br>e.stopPropagation()</p></blockquote><ul><li>基于 DOM 树形结构</li><li>事件会顺着触发元素往上冒泡</li><li>应用场景：事件代理</li></ul><h4 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h4><ul><li>基于事件冒泡来做的</li><li>场景：一般为瀑布流</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>a2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击增加一个a标签<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> div1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"></span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">nodeName</span> === <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(target.<span class="property">innerHTML</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>代码简洁</li><li>减少浏览器内存占用</li><li>但是，不要滥用（有一定的复杂度）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindEvent</span>(<span class="params">elem, type, selector, fn</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (fn == <span class="literal">null</span>) &#123;</span><br><span class="line">fn = selector</span><br><span class="line">selector = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line">elem.<span class="title function_">addEventListener</span>(type, <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> target = event.<span class="property">target</span></span><br><span class="line"><span class="keyword">if</span> (selector) &#123;</span><br><span class="line"><span class="comment">// 代理绑定</span></span><br><span class="line"><span class="comment">// 判断target有没符合的标签</span></span><br><span class="line"><span class="keyword">if</span> (target.<span class="title function_">matches</span>(selector)) &#123;</span><br><span class="line">fn.<span class="title function_">call</span>(target, event) <span class="comment">// call绑定this</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 普通绑定</span></span><br><span class="line">fn.<span class="title function_">call</span>(target, event)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通模式</span></span><br><span class="line"><span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn1&#x27;</span>)</span><br><span class="line"><span class="title function_">bindEvent</span>(btn1, <span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">event.<span class="title function_">preventDefault</span>()</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">innerHTML</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理模式</span></span><br><span class="line"><span class="keyword">const</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn2&#x27;</span>)</span><br><span class="line"><span class="title function_">bindEvent</span>(btn2, <span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">event.<span class="title function_">preventDefault</span>()</span><br><span class="line"><span class="title function_">alert</span>(innerHTML)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h3><h4 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get 请求</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// false同步，true异步</span></span><br><span class="line"><span class="comment">// POST</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/api&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST</span></span><br><span class="line"><span class="keyword">const</span> postData = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;zhangshan&quot;</span>,</span><br><span class="line">  <span class="attr">num</span>: <span class="string">&quot;100&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringy</span>(postData));</span><br></pre></td></tr></table></figure><h4 id="xhr-readyState"><a href="#xhr-readyState" class="headerlink" title="xhr.readyState"></a>xhr.readyState</h4><ul><li>0-(未初始化)还没调用 send 方法</li><li>1-（载入）已调用 send 方法，正在发送请求</li><li>2-（载入完成）send()方法执行完成，已经接收到全部响应内容</li><li>3-（交互）正在解析响应内容</li><li>4-（完成）响应内容解析完成，可以在客户端调用</li></ul><h4 id="状态码-xhr-status-http-协议"><a href="#状态码-xhr-status-http-协议" class="headerlink" title="状态码 xhr.status(http 协议)"></a>状态码 xhr.status(http 协议)</h4><ul><li>2xx-表示成功处理请求，如 200</li><li>3xx-需要重定向，浏览器直接跳转，如 301 302 304</li><li>4xx-客户端请求错误，如 404 403</li><li>5xx-服务器端错误</li></ul><h4 id="跨域：同源策略，跨域解决方案"><a href="#跨域：同源策略，跨域解决方案" class="headerlink" title="跨域：同源策略，跨域解决方案"></a>跨域：同源策略，跨域解决方案</h4><h5 id="什么是跨域（同源策略）"><a href="#什么是跨域（同源策略）" class="headerlink" title="什么是跨域（同源策略）"></a>什么是跨域（同源策略）</h5><ul><li><p>ajax 请求时，浏览器要求当前网页和 server 必须同源（安全）</p></li><li><p>同源：协议、域名、端口，三者必须一致</p></li><li><p>加载图片 css js 可无视同源策略</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;跨域的图片地址&quot;</span>/&gt; <span class="comment">// 可用于统计打点，可使用第三方统计服务</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;跨域的css地址&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;跨域的js地址&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// &lt;link&gt;&lt;script&gt;可使用CDN，CDN一般是外域</span></span><br><span class="line"><span class="comment">//&lt;script&gt;可实现JSONP</span></span><br></pre></td></tr></table></figure><ul><li>所有的跨越，都必须经过 server 端允许和配合</li><li>未经 server 端允许就实现跨域，说明浏览器有漏洞，危险信号</li></ul><h5 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h5><ul><li><code>&lt;script&gt;</code> 可绕过跨域限制</li><li>服务器可以任意动态拼接数据返回</li><li>所以， <code>&lt;script&gt;</code> 就可以获得跨域的数据，只要服务端愿意返回</li></ul><h5 id="CORS（服务端支持）-服务器端设置-http-header"><a href="#CORS（服务端支持）-服务器端设置-http-header" class="headerlink" title="CORS（服务端支持）-服务器端设置 http header"></a>CORS（服务端支持）-服务器端设置 http header</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二个参数填写允许跨域的域名称，不建议直接写“*”</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;http://localhost:8011&quot;</span>);</span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;X-Requested-With&quot;</span>);</span><br><span class="line">response.<span class="title function_">setHeader</span>(</span><br><span class="line">  <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">  <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收跨域的cookie</span></span><br><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h3><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><ul><li>本身用于浏览器和 server 通讯</li><li>被借用到本地存储</li><li>可用 document.cookie &#x3D; ‘…’来修改</li></ul><h5 id="cookie-的缺点"><a href="#cookie-的缺点" class="headerlink" title="cookie 的缺点"></a>cookie 的缺点</h5><ul><li>存储大小，最大 4kb</li><li>http 请求时要发送到服务端，增加请求数据量</li><li>只能用 document.cookie &#x3D; ‘…’来修改，太过简陋</li></ul><h4 id="localStorge-和-sessionStorage"><a href="#localStorge-和-sessionStorage" class="headerlink" title="localStorge 和 sessionStorage"></a>localStorge 和 sessionStorage</h4><ul><li>HTML5 专门为存储而设计的，最大可存 5M</li><li>API 简单易用，setItem getItem</li><li>不会随着 http 请求被发送出去</li></ul><h5 id="localStorge-和-sessionStorage-的区别"><a href="#localStorge-和-sessionStorage-的区别" class="headerlink" title="localStorge 和 sessionStorage 的区别"></a>localStorge 和 sessionStorage 的区别</h5><ul><li>localStorage 数据会永久存储，除非代码或手动删除</li><li>sessionStorage 数据只存在于当前会话，浏览器关闭则清空</li><li>一般用 localStorage 多</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局配置和单个仓库的用户名邮箱配置</title>
      <link href="/posts/2021-08-1926/"/>
      <url>/posts/2021-08-1926/</url>
      
        <content type="html"><![CDATA[<h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;github&#x27;s Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;github@xx.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="单个仓库"><a href="#单个仓库" class="headerlink" title="单个仓库"></a>单个仓库</h2><p>在项目根目录下进行单独配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">&quot;gitlab&#x27;s Name&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;gitlab@xx.com&quot;</span></span><br></pre></td></tr></table></figure><h2 id="查看当前配"><a href="#查看当前配" class="headerlink" title="查看当前配"></a>查看当前配</h2><p><code>git config --list</code> 查看当前配置, 在当前项目下面查看的配置是全局配置+当前项目的配置, 使用的时候会优先使用当前项目的配置</p><h2 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h2><p>密码过期或错误提示以下错误：</p><p>fatal: Authentication failed for ‘<a href="https://git.woa.com/tencent-doctor/medical-doctor-uniapp.git/">https://git.woa.com/tencent-doctor/medical-doctor-uniapp.git/</a>‘</p><p>使用如下命令重置密码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system --<span class="built_in">unset</span> credential.helper</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础知识点梳理-JS篇</title>
      <link href="/posts/2021-08-54080/"/>
      <url>/posts/2021-08-54080/</url>
      
        <content type="html"><![CDATA[<h2 id="变量类型和计算"><a href="#变量类型和计算" class="headerlink" title="变量类型和计算"></a>变量类型和计算</h2><h3 id="值类型-amp-amp-引用类型"><a href="#值类型-amp-amp-引用类型" class="headerlink" title="值类型&amp;&amp;引用类型"></a>值类型&amp;&amp;引用类型</h3><ul><li>引用类型：堆栈关系<ul><li>object</li><li>array</li><li>null（特殊引用类型，指针指向为空地址）</li><li>函数（特殊引用类型，但不用于存储数据，所以没有”拷贝、复制函数”这一说）</li></ul></li><li>值类型：<ul><li>undefined</li><li>String</li><li>number</li><li>boolean</li><li>symbol</li></ul></li></ul><h3 id="typeof-能判断什么类型？"><a href="#typeof-能判断什么类型？" class="headerlink" title="typeof 能判断什么类型？"></a>typeof 能判断什么类型？</h3><ul><li>识别所有值类型</li><li>识别函数</li><li>判断是否是引用类型（不可再细分）–全为 object</li></ul><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">reture obj</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result</span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">result = []</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">result[key] = <span class="title function_">deepClone</span>(obj[key])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="何时使用-x3D-x3D-x3D-何时使用-x3D-x3D"><a href="#何时使用-x3D-x3D-x3D-何时使用-x3D-x3D" class="headerlink" title="何时使用&#x3D;&#x3D;&#x3D;何时使用&#x3D;&#x3D;"></a>何时使用&#x3D;&#x3D;&#x3D;何时使用&#x3D;&#x3D;</h3><h3 id="变量计算-类型转换"><a href="#变量计算-类型转换" class="headerlink" title="变量计算-类型转换"></a>变量计算-类型转换</h3><ul><li><p>字符串拼接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">100</span> + <span class="number">10</span>; <span class="comment">// 110</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">100</span> + <span class="string">&quot;10&quot;</span>; <span class="comment">// &#x27;10010&#x27;</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="literal">true</span> + <span class="string">&quot;10&quot;</span>; <span class="comment">// &#x27;true10&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 除了 == null 之外，其他一律中 ===， 例如</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">if</span> (obj.<span class="property">a</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于：</span></span><br><span class="line"><span class="comment">// if (obj.a === null || obj.a === undefined) &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>if 语句和逻辑运算</p><ul><li>判断的是 truly 或 falsely</li><li>truly 变量： !!a &#x3D;&#x3D;&#x3D; true</li><li>falsely 变量：!!a &#x3D;&#x3D;&#x3D; false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下是falsely变量。除此之外都是truly变量</span></span><br><span class="line">!!<span class="number">0</span> === <span class="literal">false</span>;</span><br><span class="line">!!<span class="string">&quot;&quot;</span> === <span class="literal">false</span>;</span><br><span class="line">!!<span class="title class_">NaN</span> === <span class="literal">false</span>;</span><br><span class="line">!!<span class="literal">null</span> === <span class="literal">false</span>;</span><br><span class="line">!!<span class="literal">undefined</span> === <span class="literal">false</span>;</span><br><span class="line">!!<span class="literal">false</span> === <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><p>js 基于原型来继承</p><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ul><li><p>如何准确判断一个变量是不是数组？</p></li><li><p>手写一个简易的 jQuery，考虑插件和扩展性</p></li><li><p>class 的原型本质，怎么理解？</p></li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="class-和继承"><a href="#class-和继承" class="headerlink" title="class 和继承"></a>class 和继承</h4><blockquote><p>面向对象的方法</p></blockquote><ul><li><p>class</p><ul><li>constructor</li><li>属性</li><li>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, number</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">number</span> = number;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`姓名 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, 学号 <span class="subst">$&#123;<span class="variable language_">this</span>.number&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过类声明对象/实例</span></span><br><span class="line"><span class="keyword">const</span> xialuo = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;夏洛&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">number</span>);</span><br><span class="line">xialuo.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure></li><li><p>继承</p><ul><li>extends</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> eat something`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, number</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">number</span> = number;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`姓名 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 学号 <span class="subst">$&#123;<span class="variable language_">this</span>.number&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, major</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">major</span> = major;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">teach</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 教授 <span class="subst">$&#123;<span class="variable language_">this</span>.major&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xialuo = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;夏洛&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">number</span>);</span><br><span class="line">xialuo.<span class="title function_">sayHi</span>();</span><br><span class="line">xialuo.<span class="title function_">eat</span>();</span><br><span class="line"><span class="keyword">const</span> wanglaoshi = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;王老师&quot;</span>, <span class="string">&quot;语文&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>instanceof 怎么写？</p><ul><li>类型判断 - instanceof</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">xialuo <span class="keyword">instanceof</span> <span class="title class_">Student</span> <span class="comment">// true</span></span><br><span class="line">xialuo <span class="keyword">instanceof</span> <span class="title class_">People</span> <span class="comment">// true</span></span><br><span class="line">xialuo <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true Object是所有引用类型的父类（js引擎做的）</span></span><br><span class="line"></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">// true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span> <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>instanceof 为匹配最近一层的显示原型</li></ul></li><li><p>原型和原型链</p><ul><li><p>原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class 实际上是函数，可见是语法糖</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">People</span>; <span class="comment">// &#x27;function&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Student</span>; <span class="comment">// &#x27;function&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式原型和显示原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">__proto__</span>); <span class="comment">// 隐式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 显示</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xialuo.<span class="property">__proto__</span> === <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br></pre></td></tr></table></figure><p><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210806231255234.png" alt="image-20210806231255234"></p><ul><li>原型关系<ul><li>每个 class 都有显示原型<code>prototype</code></li><li>每个实例都有隐式原型<code>__proto__</code></li><li>实例的<code>__proto__</code>指向对应 class 的<code>prototype</code></li></ul></li><li>基于原型的执行规则<ul><li>获取属性 xialuo.name 或执行方法 xialuo.sayHi()时</li><li>先在自身属性和方法寻找</li><li>如果找不到则自动去<code>__proto__</code>中查找</li></ul></li></ul></li></ul></li></ul><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210806232121897.png" alt="image-20210806232121897"></p><p><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210806232251151.png" alt="image-20210806232251151"></p><h4 id="题目解答"><a href="#题目解答" class="headerlink" title="题目解答"></a>题目解答</h4><ul><li><p>如何准确判断一个变量是不是数组？</p><ul><li>a instanceof Array</li></ul></li><li><p>手写一个简易的 jQuery，考虑插件和扩展性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">jQuery</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="comment">// dom选择器</span></span><br><span class="line">    <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(selector);</span><br><span class="line">    <span class="keyword">const</span> length = result.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="variable language_">this</span>[i] = result[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>[index];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">each</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> elem = <span class="variable language_">this</span>[i];</span><br><span class="line">      <span class="title function_">fn</span>(elem);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">type, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">each</span>(<span class="function">(<span class="params">elem</span>) =&gt;</span> &#123;</span><br><span class="line">      elem.<span class="title function_">addEventListener</span>(type, fn, <span class="literal">false</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更多扩展dom操作api</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插件和扩展性</span></span><br><span class="line"><span class="comment">// 方式一：原型链</span></span><br><span class="line">jQuery.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dialog</span> = <span class="keyword">function</span> (<span class="params">info</span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(info);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//方式二：“造轮子”--复写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myJQuery</span> <span class="keyword">extends</span> <span class="title class_ inherited__">jQuery</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">selector</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(selector);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 扩展自己的方法</span></span><br><span class="line">  <span class="title function_">addClass</span>(<span class="params">calssName</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">style</span>(<span class="params">data</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const $p = new jQuery(&#x27;p&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><p>class 的原型本质，怎么理解？</p><ul><li>原型和原型链的图示</li><li>属性和方法的执行规则</li></ul></li></ul><h3 id="作用域和闭包"><a href="#作用域和闭包" class="headerlink" title="作用域和闭包"></a>作用域和闭包</h3><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><ul><li>this 的不同应用场景，如何取值？</li><li>手写 bind 函数</li><li>实际开发中闭包的应用场景，举例说明</li><li><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210807000358876.png" alt="image-20210807000358876"></li></ul><h4 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h4><h5 id="作用域和自由变量"><a href="#作用域和自由变量" class="headerlink" title="作用域和自由变量"></a>作用域和自由变量</h5><ul><li><p>作用域</p><p><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210807000718726.png" alt="image-20210807000718726"></p><ul><li><p>全局作用域</p></li><li><p>函数作用域</p></li><li><p>块级作用域（ES6 新增）</p><p><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210807000832167.png" alt="image-20210807000832167"></p></li></ul></li><li><p>自由变量</p><ul><li>一个变量在当前作用域没有定义，但被使用了</li><li>向上级作用域，一层层依次查找，直到找到为止</li><li>如果在全局作用域都没找到，则报错 xx is not defined</li></ul></li></ul><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><blockquote><p>闭包：自由变量的查找，是在函数定义的地方，向上级作用域查找，而不是在执行的地方</p></blockquote><ul><li>作用域应用的特殊情况，有两种表现：</li><li>函数作为参数被传递</li><li>函数作为返回值被返回</li><li><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210807001251201.png" alt="image-20210807001251201"></li></ul><h5 id="this"><a href="#this" class="headerlink" title="this"></a>this</h5><blockquote><ul><li>场景多</li><li>this 取什么值是在执行的时候确定的，而不是在定义的时候确定的</li></ul></blockquote><ul><li><p>作为普通函数</p></li><li><p>使用 call apply bind</p></li><li><p>作为对象方法被调用</p></li><li><p>在 class 方法中调用</p></li><li><p>箭头函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn1</span>(); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line">f1.<span class="title function_">call</span>(&#123; <span class="attr">x</span>: <span class="number">100</span> &#125;); <span class="comment">// &#123; x: 100 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = fn1.<span class="title function_">bind</span>(&#123; <span class="attr">x</span>: <span class="number">200</span> &#125;); <span class="comment">// bind会返回新的函数去执行</span></span><br><span class="line"><span class="title function_">fn2</span>(); <span class="comment">// &#123; x: 200 &#125;</span></span><br></pre></td></tr></table></figure><p><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210807002419812.png" alt="image-20210807002419812"></p></li></ul><h5 id="原型中的-this"><a href="#原型中的-this" class="headerlink" title="原型中的 this"></a>原型中的 this</h5><h4 id="题目解答-1"><a href="#题目解答-1" class="headerlink" title="题目解答"></a>题目解答</h4><ul><li><p>this 的不同应用场景，如何取值？</p></li><li><p>手写 bind 函数</p><blockquote><p>扩展考法：手写 call、apply</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// arguments是列表，不是数组</span></span><br><span class="line">  <span class="comment">// Array.prototype.slice.call可以将列表转为数组</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取第一项，为要绑定的作用域</span></span><br><span class="line">  <span class="keyword">const</span> t = args.<span class="title function_">shift</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 谁调用，指向谁</span></span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bind是返回一个可执行的参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 返回执行结果</span></span><br><span class="line">    <span class="keyword">return</span> self.<span class="title function_">apply</span>(t, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this&quot;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;this is fn1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn2 = fn1.<span class="title function_">bind1</span>(&#123; <span class="attr">x</span>: <span class="number">100</span> &#125;, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">const</span> res = <span class="title function_">fn2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure></li><li><p>实际开发中闭包的应用场景，举例说明</p><ul><li><p>隐藏数据</p></li><li><p>如做一个 cache 工具</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包隐藏数据，只提供api</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCache</span>(<span class="params">key, val</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;&#125;; <span class="comment">// 闭包中的数据，被隐藏，不被外界访问</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> data[key];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">key, val</span>) &#123;</span><br><span class="line">      data[key] = val;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="title function_">createCache</span>();</span><br><span class="line">c.<span class="title function_">set</span>(<span class="string">&quot;a&quot;</span>, <span class="number">100</span>);</span><br><span class="line">c.<span class="title function_">get</span>(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>![image-20210807000358876](&#x2F;Users&#x2F;yeyuanda&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210807000358876.png)</p></li></ul><h3 id="异步和单线程"><a href="#异步和单线程" class="headerlink" title="异步和单线程"></a>异步和单线程</h3><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><ul><li>同步和异步的区别是什么？</li><li>手写用 Promise 加载一张图片</li><li>前端使用异步的场景有什么？</li><li><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210807134212103.png" alt="image-20210807134212103"></li></ul><h4 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h4><ul><li><p>单线程和异步</p><ul><li>js 是单线程语言，只能同时做一件事</li><li>浏览器和 nodejs 已支持 js 启动进程，如 web worker</li><li>js 和 dom 渲染共用同一个线程，因为 js 可修改 dom 结构</li><li>遇到等待（网络请求，定时任务）不能卡住</li><li>需要异步</li><li>callback 回调函数形式</li></ul></li><li><p>异步和同步</p><ul><li>基于 js 是单线程语言</li><li>异步不会阻塞代码执行</li><li>同步会阻塞代码执行</li></ul></li><li><p>应用场景</p><ul><li><p>网络请求，如 ajax、图片加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 图片加载</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;loaded&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;/xxx.png&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;end&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>定时任务，如 setTimeout</p></li></ul></li><li><p>callback hell 和 promise</p><ul><li><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210807141921795.png" alt="image-20210807141921795"></li><li><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210807142045229.png" alt="image-20210807142045229"></li><li><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210807142157823.png" alt="image-20210807142157823"></li></ul></li></ul><h4 id="题目解答-2"><a href="#题目解答-2" class="headerlink" title="题目解答"></a>题目解答</h4><ul><li><p>同步和异步的区别是什么？</p><ul><li>基于 js 是单线程语言</li><li>异步不会阻塞代码执行</li><li>同步会阻塞代码执行</li></ul></li><li><p>手写用 Promise 加载一张图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">function loadimg(src) &#123;</span><br><span class="line">return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">const img = document.createElement(&#x27;img&#x27;)</span><br><span class="line">img.onload = () =&gt; &#123;</span><br><span class="line">resolve(img)</span><br><span class="line">&#125;</span><br><span class="line">img.onerror = () =&gt; &#123;</span><br><span class="line">const err = new Error(&#x27;图片加载失败&#x27;)</span><br><span class="line">reject(err)</span><br><span class="line">&#125;</span><br><span class="line">img.src = src</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const url = &#x27;https://www.imooc.com/static/img/index/logo2020.png&#x27;</span><br><span class="line">loadimg(url).then(img =&gt; &#123;</span><br><span class="line">console.log(img.width)</span><br><span class="line">// 作为下一个then的参数传入</span><br><span class="line">return img</span><br><span class="line">&#125;).then(img =&gt; &#123;</span><br><span class="line">console.log(img.height)</span><br><span class="line">&#125;).catch(err =&gt; console.error(err))</span><br><span class="line"></span><br><span class="line">const url1 = &#x27;1.png&#x27;</span><br><span class="line">const url2 = &#x27;2.png&#x27;</span><br><span class="line">loadimg(url1).then(img1 =&gt; &#123;</span><br><span class="line">console.log(img1.width)</span><br><span class="line">return img1 // 普通对象</span><br><span class="line">&#125;).then(img1 =&gt; &#123;</span><br><span class="line">console.log(img1.height)</span><br><span class="line">return loadimg(url2) // Promise 实例</span><br><span class="line">&#125;).then(img2 =&gt; &#123;</span><br><span class="line">console.log(img1.width)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>前端使用异步的场景有什么？</p><ul><li>网络请求，如 ajax 图片加载</li><li>定时任务，如 setTimeout</li></ul></li></ul><h4 id="js-异步-进阶"><a href="#js-异步-进阶" class="headerlink" title="js 异步-进阶"></a>js 异步-进阶</h4><h5 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h5><ul><li>请描述 event loop（事件循环&#x2F;事件轮询）的机制，可画图</li><li>什么事宏任务和微任务，两者有什么区别？</li><li>Promise 有哪三种状态？怎么变化？</li><li>场景题-<img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/image_1628349801714.png" alt="image.png"><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210807232232027.png" alt="image-20210807232232027"></li><li><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/image_1628349900583.png" alt="image.png"></li><li><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/image_1628350168074.png" alt="image.png"></li><li>场景题-外加 async&#x2F;await 的顺序问题</li></ul><p><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210807233158019.png" alt="image-20210807233158019"></p><h5 id="event-loop（事件循环-x2F-事件轮询）的机制"><a href="#event-loop（事件循环-x2F-事件轮询）的机制" class="headerlink" title="event loop（事件循环&#x2F;事件轮询）的机制"></a>event loop（事件循环&#x2F;事件轮询）的机制</h5><ul><li>js 是单线程运行的</li><li>异步要基于回调来实现</li><li>event loop 就是异步回调的实现原理</li></ul><h6 id="js-如何执行？"><a href="#js-如何执行？" class="headerlink" title="js 如何执行？"></a>js 如何执行？</h6><ul><li><p>从前到后，一行行执行</p></li><li><p>如果某一行执行报错，则停止下面代码的执行</p></li><li><p>先把同步代码执行完，再执行异步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">cb1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cb1&quot;</span>);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Bye&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>Browser console</li><li>Call Stack（调用栈）</li><li>Web APIs（setTimeout、dom 操作、bom 操作之类，浏览器定义的相关的 api）</li><li>Callback Queue（回调函数的队列）–&gt;event loop</li></ul></li></ul><h5 id="总结-event-loop-过程"><a href="#总结-event-loop-过程" class="headerlink" title="总结 event loop 过程"></a>总结 event loop 过程</h5><ul><li>同步代码，一行一行放在 Call Stack 执行</li><li>遇到异步，会先“记录”下，等待时机（定时、网络请求等）</li><li>时机到了，就移动到 Callback Queue</li><li>如 Call Stack 为空（即同步代码执行完），Event Loop 开始工作</li><li>轮询查找 Call Queue，如有则移动到 Call Stack 执行</li><li>然后继续轮询查找（永动机一样）</li></ul><h5 id="DOM-事件和-event-loop"><a href="#DOM-事件和-event-loop" class="headerlink" title="DOM 事件和 event loop"></a>DOM 事件和 event loop</h5><ul><li>js 是单线程的</li><li>异步（setTimeout， ajax 等）使用回调，基于 event loop</li><li>DOM 事件也使用回调，基于 event loop</li><li>和 setTimeout 的触发时机不一样，DOM 事件不是异步</li></ul><p><img src="/Users/yeyuanda/Documents/blog/blog/Test.assets/image-20210808001336360.png" alt="image-20210808001336360"></p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><h5 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h5><ul><li>pending resolved rejected</li><li>pending –&gt; resolved 或 pending –&gt; rejected</li><li>状态不可逆</li></ul><h5 id="状态的表现和变化"><a href="#状态的表现和变化" class="headerlink" title="状态的表现和变化"></a>状态的表现和变化</h5><ul><li>pending 状态，不会触发 then 和 catch</li><li>resolved 状态，会触发后续的 then 回调函数</li><li>rejected 状态，会触发后续的 catch 回调函数</li></ul><h5 id="then-和-catch-对状态的影响"><a href="#then-和-catch-对状态的影响" class="headerlink" title="then 和 catch 对状态的影响"></a>then 和 catch 对状态的影响</h5><ul><li><p>then 正常返回 resolved，里面有报错则返回 rejected</p></li><li><p>catch 正常返回 resolved，里面有报错则返回 rejected</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// then正常返回resolved，里面有报错则返回rejected [start]</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p1&quot;</span>, p1); <span class="comment">// resolved 触发后续 then 回调函数</span></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;123&quot;</span>); <span class="comment">// 执行</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;then error&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p2&quot;</span>, p2); <span class="comment">// rejected 触发后续 catch 回调函数</span></span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;456&quot;</span>); <span class="comment">// 不执行</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;err&quot;</span>, err); <span class="comment">// 执行</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// then正常返回resolved，里面有报错则返回rejected [end]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// catch正常返回resolved，里面有报错则返回rejected</span></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;my error&quot;</span>).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p3&quot;</span>, p3); <span class="comment">// resolved 注意⚠️ 触发then回调</span></span><br><span class="line">p3.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">100</span>); <span class="comment">// 可以执行</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;my error&quot;</span>).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;catch error&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;p4&quot;</span>, p4); <span class="comment">// rejected 触发catch回调</span></span><br><span class="line">p4.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">200</span>); <span class="comment">// 不执行</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;some err&quot;</span>);</span><br><span class="line">&#125;); <span class="comment">// resolved</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="async-x2F-await"><a href="#async-x2F-await" class="headerlink" title="async&#x2F;await"></a>async&#x2F;await</h2><h3 id="基本语法和应用"><a href="#基本语法和应用" class="headerlink" title="基本语法和应用"></a>基本语法和应用</h3><ul><li><p>异步回调 callback hell</p></li><li><p>Promise then catch 链式调用，但也是基于回调函数</p></li><li><p>async&#x2F;await 是同步语法，彻底消灭回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> img1 = <span class="keyword">await</span> <span class="title function_">loadImg</span>(src1);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(img1.<span class="property">width</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul><h3 id="async-x2F-await-和-Promise-的关系"><a href="#async-x2F-await-和-Promise-的关系" class="headerlink" title="async&#x2F;await 和 Promise 的关系"></a>async&#x2F;await 和 Promise 的关系</h3><ul><li><p>async&#x2F;await 是消灭异步回调的终极武器</p></li><li><p>但和 Promise 不互斥</p></li><li><p>反而，两者相辅相成</p></li><li><p>执行 async 函数，返回的是 Promise 对象</p></li><li><p>await 相当于 Promise 的 then</p></li><li><p>try…catch 可捕获异常，代替了 Promise 的 catch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async 返回Promise对象</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span> <span class="comment">// 相当于return Promise.resolve(100)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> res1 = <span class="title function_">fn1</span>() <span class="comment">// 执行async函数，返回的是一个Promise对象</span></span><br><span class="line">res1.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data) <span class="comment">// 100</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----</span></span><br><span class="line"><span class="comment">// await相当于Promise then</span></span><br><span class="line">!(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">300</span>)</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> p1 <span class="comment">// await相当于Promise then</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data) <span class="comment">// 300</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">!(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">300</span>)</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="number">400</span> <span class="comment">// 相当于await Promise.resolve(400)</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;data&#x27;</span>, data) <span class="comment">// 400</span></span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------</span></span><br><span class="line"><span class="comment">// try...catch相当于</span></span><br><span class="line">!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;err1&#x27;</span>) <span class="comment">// rejected 状态</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> p4</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(ex) <span class="comment">// try...catch 相当于 promise catch</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></li></ul><h4 id="异步的本质"><a href="#异步的本质" class="headerlink" title="异步的本质"></a>异步的本质</h4><ul><li>async&#x2F;await 是消灭异步回调的终极武器</li><li>js 还是单线程，还得是有异步，还得是基于 event loop</li><li>async&#x2F;await 只是一个语法糖</li></ul><h4 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h4><ul><li><p>for…in(forEach for)是常规的同步遍历</p></li><li><p>for…of 常用于异步的遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">muti</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(num * num);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要1s之后才同时打印出1、4、9</span></span><br><span class="line">nums.<span class="title function_">forEach</span>(<span class="keyword">async</span> (i) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">muti</span>(i);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;排队&quot;的效果</span></span><br><span class="line">!(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">muti</span>(i);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul><h3 id="宏任务-macroTask-和微任务-microTask"><a href="#宏任务-macroTask-和微任务-microTask" class="headerlink" title="宏任务 macroTask 和微任务 microTask"></a>宏任务 macroTask 和微任务 microTask</h3><h4 id="什么是宏任务，什么是微任务"><a href="#什么是宏任务，什么是微任务" class="headerlink" title="什么是宏任务，什么是微任务"></a>什么是宏任务，什么是微任务</h4><ul><li>宏任务：setTimeout，setInterval，Ajax，DOM 事件</li><li>微任务：Promise，async&#x2F;await</li><li><strong>微任务执行时机比宏任务早</strong></li></ul><h4 id="event-loop-和-DOM-渲染"><a href="#event-loop-和-DOM-渲染" class="headerlink" title="event loop 和 DOM 渲染"></a>event loop 和 DOM 渲染</h4><ul><li><p>每次 call stack 清空（即每次轮询结束），即同步任务执行完</p></li><li><p>都是 DOM 重新渲染的机会，DOM 结构如有改变则重新渲染</p></li><li><p>然后再去触发下一次 Event Loop</p></li><li><p><img src="/Users/yeyuanda/Documents/blog/blog/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86-JS%E7%AF%87.assets/image-20210808205437375.png" alt="image-20210808205437375"></p></li></ul><h4 id="宏任务和微任务的区别"><a href="#宏任务和微任务的区别" class="headerlink" title="宏任务和微任务的区别"></a>宏任务和微任务的区别</h4><ul><li>宏任务：DOM 渲染后触发，如 setTimeout</li><li>微任务：DOM 渲染前触发，如 Promise</li></ul><h4 id="从-event-loop-解释，为何微任务执行更早"><a href="#从-event-loop-解释，为何微任务执行更早" class="headerlink" title="从 event loop 解释，为何微任务执行更早"></a>从 event loop 解释，为何微任务执行更早</h4><ul><li>微任务是 ES6 语法规定的</li><li>宏任务是由浏览器规定的</li></ul><p><img src="/Users/yeyuanda/Documents/blog/blog/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86-JS%E7%AF%87.assets/image-20210808210607821.png" alt="image-20210808210607821"></p><p><img src="/Users/yeyuanda/Documents/blog/blog/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%A2%B3%E7%90%86-JS%E7%AF%87.assets/image-20210808210715015.png" alt="image-20210808210715015"></p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端基础知识点梳理-HTML+CSS篇</title>
      <link href="/posts/2021-08-40579/"/>
      <url>/posts/2021-08-40579/</url>
      
        <content type="html"><![CDATA[<p>高效学习：找准知识体系；刻意练习；及时反馈。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="如何理解-HTML-语义化？"><a href="#如何理解-HTML-语义化？" class="headerlink" title="如何理解 HTML 语义化？"></a>如何理解 HTML 语义化？</h3><ul><li>让人更易读懂（增加代码可读性）</li><li>让搜索引擎更易读懂（SEO）</li></ul><h3 id="哪些标签是块级元素，哪些是内联元素？"><a href="#哪些标签是块级元素，哪些是内联元素？" class="headerlink" title="哪些标签是块级元素，哪些是内联元素？"></a>哪些标签是块级元素，哪些是内联元素？</h3><ul><li>display:block&#x2F;table;有 div h1 h2 table p ul ol li 等</li><li>display:inline&#x2F;inline-block;有 span label i input button 等</li></ul><hr><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="盒子模型的宽度如何计算？"><a href="#盒子模型的宽度如何计算？" class="headerlink" title="盒子模型的宽度如何计算？"></a>盒子模型的宽度如何计算？</h4><ul><li>offsetWidth&#x3D;（内容宽度+padding+边框）,无外边距</li><li>box-sizing:border-box;</li></ul><h4 id="magin-纵向重叠的问题"><a href="#magin-纵向重叠的问题" class="headerlink" title="magin 纵向重叠的问题"></a>magin 纵向重叠的问题</h4><ul><li>相邻元素的 margin-top 和 margin-bottom 会发送重叠</li><li>空白内容的<code>&lt;p&gt;&lt;/p&gt;</code>也会重叠</li></ul><h4 id="margin-负值的问题"><a href="#margin-负值的问题" class="headerlink" title="margin 负值的问题"></a>margin 负值的问题</h4><ul><li>margin-top 和 margin-left 负值，元素向上&#x2F;向左移动</li><li>margin-right 负值，右侧元素左移，自身不受影响</li><li>margin-bottom 负值，下侧元素上移，自身不受影响</li></ul><h4 id="BFC-的理解和应用"><a href="#BFC-的理解和应用" class="headerlink" title="BFC 的理解和应用"></a>BFC 的理解和应用</h4><ul><li>Block format context，块级格式化上下文</li><li>一块独立渲染区域，内部元素的渲染不会影响边界以外的元素</li><li>形成 BFC 的常见条件：<ul><li>float 不是 none</li><li>position 是 absolute 或 fixed</li><li>overflow 不是 visible</li><li>display 是 flex inline-block 等</li></ul></li><li>BFC 的常见应用<ul><li>清除浮动</li></ul></li></ul><h4 id="float-布局的问题，以及-clearfix"><a href="#float-布局的问题，以及-clearfix" class="headerlink" title="float 布局的问题，以及 clearfix"></a>float 布局的问题，以及 clearfix</h4><ul><li>圣杯布局和双飞翼布局</li></ul><ol><li>特点<ul><li>三栏布局，中间一栏先加载和渲染（内容最重要）</li><li>两侧内容固定，中间内容随宽度自适应</li><li>一般用于 PC 网页</li></ul></li><li>实现方式<ul><li>使用 float 布局</li><li>两侧使用 margin 负值，以便和中间内容横向重叠</li><li>防止中间内容被两侧覆盖，一个用 padding 一个用 margin</li></ul></li></ol><ul><li>手写 clearfix</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom: <span class="number">1</span>; // ie</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="flex-画色子"><a href="#flex-画色子" class="headerlink" title="flex 画色子"></a>flex 画色子</h4><ul><li>flex-direction 方向</li><li>justify-content 水平对齐</li><li>align-items 水平对齐</li><li>flex-wrap 换行</li><li>align-self 子元素</li></ul><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><h4 id="absolute-和-relative-分别依据什么定位？"><a href="#absolute-和-relative-分别依据什么定位？" class="headerlink" title="absolute 和 relative 分别依据什么定位？"></a>absolute 和 relative 分别依据什么定位？</h4><ul><li>relative 依据自身定位</li><li>absolute 依据最近一层的定位元素（absolute relative fixed body）定位</li></ul><h4 id="居中对齐有哪些实现方式？"><a href="#居中对齐有哪些实现方式？" class="headerlink" title="居中对齐有哪些实现方式？"></a>居中对齐有哪些实现方式？</h4><ul><li><p>text-align: center;</p></li><li><p>margin: 0 auto;</p></li><li><p>lineheight 等于 height</p></li><li><p>absolute 和 margin</p></li><li><p>absolute 和 transform</p></li></ul><h3 id="图文样式"><a href="#图文样式" class="headerlink" title="图文样式"></a>图文样式</h3><h4 id="line-height-的继承问题"><a href="#line-height-的继承问题" class="headerlink" title="line-height 的继承问题"></a>line-height 的继承问题</h4><ul><li>写具体数值，则继承该值</li><li>写比例，也继承该比例</li><li>写百分百则继承计算出来的值</li></ul><h3 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h3><h4 id="rem-是什么？"><a href="#rem-是什么？" class="headerlink" title="rem 是什么？"></a>rem 是什么？</h4><ul><li>长度单位，相对于根元素，常用于响应式布局</li></ul><h4 id="如何实现响应式"><a href="#如何实现响应式" class="headerlink" title="如何实现响应式"></a>如何实现响应式</h4><ul><li>媒体查询，media-query，根据不同屏幕宽度设置根元素 font-size</li><li>js 动态设置根元素 font-size</li></ul><h4 id="vw-x2F-vh"><a href="#vw-x2F-vh" class="headerlink" title="vw&#x2F;vh"></a>vw&#x2F;vh</h4><ul><li>rem 弊端:“阶梯”性</li><li>网页视口尺寸</li><li>vw 网页视口宽度的 1&#x2F;100</li><li>vmax 取两者最大值；vmin 取两者最小值</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组件和状态的设计思路</title>
      <link href="/posts/2021-08-33633/"/>
      <url>/posts/2021-08-33633/</url>
      
        <content type="html"><![CDATA[<p>在参与腾讯健康小程序的开发过程中，我遇到了一个常见的问题：由于页面功能过于复杂，导致页面的代码异常复杂，而且年代久远，重构起来成本过高。这个问题也是很多项目都会面临的。</p><p>由于 React、Vue 等框架都是以数据驱动视图，所以我拿到一个模块需求，我会从“状态”和“视图”两方面入手分析需求。基于此，我总结出了以下几点设计要点：</p><h2 id="状态数据结构设计"><a href="#状态数据结构设计" class="headerlink" title="状态数据结构设计"></a>状态数据结构设计</h2><!-- - 用数据描述所有的内容- 数据要结构化，易于程序操作（遍历、查找）- 数据要可扩展，以便增加新的功能 --><p>用数据描述所有的内容。除了一些简单的静态页面外，所有的页面都需要依赖数据来渲染视图。因此，在设计页面结构时，首先要考虑的就是如何设计好状态数据结构。数据要结构化，易于程序操作（遍历、查找），同时也要可扩展，以便增加新的功能。</p><p>例如，在健康小程序中，我们可以定义一个 User 对象来存储用户信息，包含用户名、性别、年龄等属性。然后，对于每个功能模块，我们可以定义单独的对象来存储相关的数据。这样做不仅有利于代码的组织和维护，同时也有助于提高程序的可读性和可扩展性。</p><h2 id="组件设计（拆分、组合）和组件通讯"><a href="#组件设计（拆分、组合）和组件通讯" class="headerlink" title="组件设计（拆分、组合）和组件通讯"></a>组件设计（拆分、组合）和组件通讯</h2><!-- - 从功能上拆分层次- 尽量让组件原子化（一个组件只做一个功能，吸收复杂度）- 容器组件（只管理数据）&UI 组件（只显示视图） --><p>从功能上拆分层次。在设计组件时，首先要考虑的就是如何将页面拆分成更小的组件，并且尽量让组件原子化（一个组件只做一个功能）。这样可以有效地降低组件之间的耦合度，吸收复杂度。</p><p>例如，在健康小程序中，我们可以定义一个 User 组件用于渲染用户信息。对于每个功能模块，我们可以定义一个独立的业务组件，比如“体检报告”组件、”健康资讯”组件等。这些业务组件都可以通过 props 属性来接收和传递数据。此外，为了提高组件的复用性，我们还可以定义一些通用的 UI 组件，比如表格、弹框等。</p><p>容器组件（只管理数据）&amp;UI 组件（只显示视图）。在设计组件时，我们还需要考虑组件之间的通信方式。容器组件（Container Component）负责管理数据，它们从 store 中获取数据并将其传递给 UI 组件。而 UI 组件（Presentational Component）则负责显示视图，它们只接受 props 属性，并将其渲染为对应的 HTML。这种分层的方式可以有效地降低组件之间的耦合度，提高代码的可维护性和可读性。</p><p>最后，需要注意的是，在实际开发中，以上设计思路也需要根据实际情况进行调整和优化。但总的来说，通过从“状态”和“视图”两方面入手，我们可以更好地组织和管理页面的代码结构，提高程序的可扩展性和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程方法论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 background 模拟文字下划线</title>
      <link href="/posts/2021-07-33881/"/>
      <url>/posts/2021-07-33881/</url>
      
        <content type="html"><![CDATA[<p>在实现网页设计中，文字下划线是一种常见的元素。通常情况下我们可以使用 CSS 来直接给文本添加下划线样式。但是，当<code>text-decoration</code> 无法还原设计稿的时候，或者 <code>text-underline-offset</code> 不兼容的时候，就需要使用一些技巧来实现了。</p><p>在本文中，我们将介绍如何使用 background 属性来模拟文字下划线效果。</p><p>首先，在 HTML 中，我们需要为需要添加下划线的文本添加一个 span 标签，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;underline&quot;</span>&gt;</span></span><br><span class="line">  这是一个需要下划线的文本,我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线我需要下滑线</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着，在 CSS 中，我们将给这个 p 标签添加以下样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.underline</span> &#123;</span><br><span class="line">  // 模拟重复的下划线，兼容长留言，<span class="number">64</span>rpx *(<span class="number">1</span>-<span class="number">98%</span>) ≈ <span class="number">1</span>rpx（<span class="number">64</span>rpx为<span class="attribute">line-height</span>）</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    top,</span><br><span class="line">    transparent <span class="number">98%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">117</span>, <span class="number">91</span>, <span class="number">30</span>, <span class="number">0.15</span>) <span class="number">98%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">64</span>rpx <span class="number">64</span>rpx;</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，我们使用了 linear-gradient 函数来创建一个渐变背景色，从透明到灰色。</p><p>现在，我们已经成功地实现了在特定背景下模拟文字下划线的效果。如果我们需要调整下划线的颜色、粗细或者高度等属性，只需要对上述 CSS 代码作相应修改即可。</p><p>总结一下，使用 background 属性来模拟文字下划线是一种简单且实用的技巧，尤其适用于那些具有复杂背景的网页设计中。希望本文能够帮助到大家。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>h5 调试插件 eruda.js</title>
      <link href="/posts/2021-07-4304/"/>
      <url>/posts/2021-07-4304/</url>
      
        <content type="html"><![CDATA[<p>在前端开发中，调试是一个非常重要的环节。为了提高代码质量和开发效率，我们需要使用一些工具来帮助我们快速定位和解决问题。eruda.js 就是这样一款非常实用的前端调试工具。</p><p>eruda.js 是一款基于移动设备的 Web 调试工具，它可以在 safari 等浏览器中使用。通过 eruda.js，我们可以方便地查看当前页面的 DOM 结构、CSS 样式、JavaScript 代码等，并且还能实时查看网络请求和性能数据。这些功能都大大提高了我们的开发效率和代码质量。</p><p>现在，让我们来看一下如何使用 eruda.js。</p><p>首先，在你的 HTML 文件中加入以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;//cdn.jsdelivr.net/npm/eruda&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个代码片段将会从 jsDelivr CDN 中引入 eruda.js 脚本。接着，在页面加载完成后，你需要通过执行以下代码初始化 eruda.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eruda.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><p>这行代码将会启动 eruda.js，并在页面底部添加一个工具栏。点击工具栏上的各个按钮，你可以查看当前页面的元素、控制台、网络请求等信息，以及优化性能和调试代码。</p><p>除了默认工具之外，eruda.js 还支持插件扩展。例如，以下代码演示了如何开发和使用一个 eruda.js 插件，用于查看页面上所使用的 JavaScript 库和版本号：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个新的eruda.js插件</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">JsLibPlugin</span> = eruda.<span class="title function_">get</span>(<span class="string">&quot;JsLib&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title class_">JsLibPlugin</span>) &#123;</span><br><span class="line">  <span class="title class_">JsLibPlugin</span> = eruda.<span class="title function_">add</span>(<span class="string">&quot;JsLib&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> jsLibs = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 遍历所有script标签，获取url中包含“.js”的链接，并记录其名称和版本号</span></span><br><span class="line">      <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">forEach</span>.<span class="title function_">call</span>(</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;script&quot;</span>),</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">node</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (node.<span class="property">src</span>.<span class="title function_">match</span>(<span class="regexp">/\.js$/</span>)) &#123;</span><br><span class="line">            <span class="keyword">var</span> name = node.<span class="property">src</span>.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>).<span class="title function_">pop</span>().<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">var</span> version = node.<span class="title function_">getAttribute</span>(<span class="string">&quot;data-version&quot;</span>) || <span class="string">&quot;1.0.0&quot;</span>;</span><br><span class="line">            jsLibs[name] = version;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在控制台输出JavaScript库信息</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">table</span>(jsLibs);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动eruda.js，并启用我们自定义的JsLib插件</span></span><br><span class="line">eruda.<span class="title function_">init</span>();</span><br><span class="line">eruda.<span class="title function_">add</span>(<span class="title class_">JsLibPlugin</span>);</span><br></pre></td></tr></table></figure><p>以上代码首先定义了一个新的 eruda.js 插件，名为 JsLib。在该插件的初始化方法中，我们遍历了页面中所有的 script 标签，筛选出其中包含“.js”后缀的脚本文件，并将其名称和版本号保存到一个 jsLibs 对象中。然后，我们通过 console.table()函数在控制台输出了 jsLibs 对象，以便查看当前页面所依赖的 JavaScript 库和版本号。</p><p>最后，我们启动了 eruda.js，并将自定义的 JsLib 插件添加到其中。运行以上代码后，在 eruda.js 的控制台中就可以查看当前页面所使用的所有 JavaScript 库及其版本信息了。</p><p>总之，eruda.js 是一款非常有用和实用的前端调试工具。如果你是一名前端开发者，我强烈推荐你尝试使用 eruda.js，相信它会为你的工作带来很多便利和惊喜！</p><!--经常会忘记名字，这里记录一下：```js    <script src="//cdn.jsdelivr.net/npm/eruda"></script>    <script>eruda.init();</script>``` -->]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决超出元素的圆角不显示的问题</title>
      <link href="/posts/2021-06-41408/"/>
      <url>/posts/2021-06-41408/</url>
      
        <content type="html"><![CDATA[<p>当我们在进行前端页面开发时，经常会遇到一些问题，比如圆角不显示的问题。在这篇文章中，我将向大家介绍一些解决这个问题的方法。</p><p><img src="/images/image_1624503610969.png" alt="image.png"></p><p>如上图光效需要隐藏超出部分, 我们发现子元素的圆角没有显示出来:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是基于 <code>Webkit</code> 的浏览器中的一个已知错误，发生这种情况的原因是复合层没有被其父层剪切。因此，有时你需要将具有 <code>overflow: hidden</code> 的父级带到其自己的合成层上，以便它可以正确地应用 <code>overflow: hidden</code>。</p><p>因此，必须将 CSS 属性 <code>transform: translateZ(0)</code> 添加到已转换元素的父元素中。</p><p>然后 <code>overflow: hidden</code> 将起作用，这是因为已转换的元素像其已转换的子代一样在其自己的呈现层上进行了合成。</p><p>解决办法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ele</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">0</span>); // 父元素</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端禁止长按图片弹出菜单和禁止文本选择</title>
      <link href="/posts/2021-06-33773/"/>
      <url>/posts/2021-06-33773/</url>
      
        <content type="html"><![CDATA[<p>在移动设备上，长按图片通常会弹出一个菜单，其中包含了一些选项，比如保存图片、分享图片等功能。这个功能在某些情况下可能不是我们想要的，例如设计师提供的图片水印已经包含了版权信息，用户不能将其存储到本地。类似地，在某些应用场景中，可能需要禁止文本选择，以防止用户复制、粘贴或截屏应用程序内容。本篇文章将介绍如何使用 CSS 实现这两种需求。</p><h2 id="禁止长按图片弹出菜单"><a href="#禁止长按图片弹出菜单" class="headerlink" title="禁止长按图片弹出菜单"></a>禁止长按图片弹出菜单</h2><p>要禁止长按图片弹出菜单，我们可以使用 CSS 的 <code>pointer-events</code> 和 <code>user-select</code> 属性。<code>pointer-events</code> 属性允许控制元素接受鼠标事件的方式，而 <code>user-select</code> 属性允许控制用户是否能够选择元素内部的文本。具体实现代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过将 <code>pointer-events</code> 设置为 <code>none</code>，我们可以禁用图片上的所有鼠标事件，包括长按事件。同时，通过将 <code>user-select</code> 设置为 none，我们也可以禁用图片上的文本选择功能。</p><p>需要注意的是，如果我们想禁止长按图片弹出菜单，但又允许用户点击链接，那么我们需要将 <code>pointer-events</code> 属性设置为 <code>auto</code>，并对链接元素设置 <code>pointer-events: none;</code>。这样，用户就可以点击链接了。</p><h2 id="禁止文本选择"><a href="#禁止文本选择" class="headerlink" title="禁止文本选择"></a>禁止文本选择</h2><p>要禁止文本选择，我们可以使用 CSS 的 <code>user-select</code> 属性。具体实现代码如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过将 <code>user-select</code> 属性设置为 <code>none</code>，我们可以禁用元素内部的所有文本选择功能。当然，如果我们只想禁用某些元素内部的文本选择，可以将 <code>user-select</code> 属性应用于具体的元素或类。</p><p>总之，通过使用 CSS 的 <code>pointer-events</code> 和 <code>user-select</code> 属性，我们可以轻松地禁止长按图片弹出菜单和禁止文本选择。这种方法简单有效，可以帮助我们更好地控制页面上的元素。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序如何避免自定义组件样式对整个页面产生影响？</title>
      <link href="/posts/2021-06-21147/"/>
      <url>/posts/2021-06-21147/</url>
      
        <content type="html"><![CDATA[<p>微信小程序是一种轻量级的应用程序开发框架，它允许开发者使用简单的 JavaScript、CSS 和 HTML 来构建功能强大的小程序。然而，在实际的开发过程中，开发者可能会遇到一个问题：如何避免自定义组件样式对整个页面产生影响？</p><p>默认情况下，自定义组件的样式只受到自定义组件 wxss 的影响。但是，如果在 <code>app.wxss</code> 或页面的 wxss 中使用了标签名选择器（或其他特殊选择器）来直接指定样式，则这些选择器会影响到页面和所有组件，这通常不是我们想要的结果。</p><p>为了解决这个问题，微信小程序引入了样式隔离的概念。开发者可以通过指定特殊的样式隔离选项 <code>styleIsolation</code> 来控制组件的样式隔离程度。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">styleIsolation</span>: <span class="string">&quot;isolated&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>styleIsolation</code> 选项从基础库版本 2.6.5 开始支持。它支持以下取值：</p><ul><li>isolated 表示启用样式隔离，在自定义组件内外，使用 class 指定的样式将不会相互影响（一般情况下的默认值）；</li><li>apply-shared 表示页面 wxss 样式将影响到自定义组件，但自定义组件 wxss 中指定的样式不会影响页面；</li><li>shared 表示页面 wxss 样式将影响到自定义组件，自定义组件 wxss 中指定的样式也会影响页面和其他设置了 <code>apply-shared</code> 或 <code>shared</code> 的自定义组件。（这个选项在插件中不可用。）</li></ul><p>使用样式隔离可以有效地避免组件样式对整个页面产生影响，同时又保持组件内部样式的一致性。不过，在实际使用中，需要注意以下几点：</p><ul><li>如果组件定义了相同的 class 名称，那么它们之间的样式不会被隔离；</li><li><code>styleIsolation</code> 选项只会影响组件的样式，不会影响组件内部的事件、属性等。</li></ul><p>总之，在开发微信小程序时，样式隔离是一个非常有用的特性，可以帮助我们更好地管理组件样式，提高代码复用性和可维护性。</p>  <!--  默认情况下，自定义组件的样式只受到自定义组件 wxss 的影响。除非以下两种情况：- `app.wxss` 或页面的 wxss 中使用了标签名选择器（或一些其他特殊选择器）来直接指定样式，这些选择器会影响到页面和全部组件。通常情况下这是不推荐的做法。- 指定特殊的样式隔离选项 `styleIsolation` 。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">styleIsolation</span>: <span class="string">&quot;isolated&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>styleIsolation</code> 选项从基础库版本 2.6.5 开始支持。它支持以下取值：</p><ul><li><code>isolated</code> 表示启用样式隔离，在自定义组件内外，使用 class 指定的样式将不会相互影响（一般情况下的默认值）；</li><li><code>apply-shared</code> 表示页面 wxss 样式将影响到自定义组件，但自定义组件 wxss 中指定的样式不会影响页面；</li><li><code>shared</code> 表示页面 wxss 样式将影响到自定义组件，自定义组件 wxss 中指定的样式也会影响页面和其他设置了 <code>apply-shared</code> 或 <code>shared</code> 的自定义组件。（这个选项在插件中不可用。） –&gt;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Node.js 中切换或回退版本？</title>
      <link href="/posts/2021-06-45331/"/>
      <url>/posts/2021-06-45331/</url>
      
        <content type="html"><![CDATA[<p>Node.js 是一个非常流行的 JavaScript 运行时，它允许开发人员使用 JavaScript 编写服务器端代码。随着时间的推移，Node.js 的不同版本已经发布，这些版本包含各种新特性和更改。有时候，为了兼容特定的应用程序或库，你可能需要切换或回退到旧版本的 Node.js。</p><p>在本文中，我将介绍如何在 Node.js 中进行版本切换或回退。</p><h2 id="第一步：安装-n-工具"><a href="#第一步：安装-n-工具" class="headerlink" title="第一步：安装 n 工具"></a>第一步：安装 n 工具</h2><p>n 工具是一个简单易用的 Node.js 版本管理器，它允许你快速地切换和安装不同版本的 Node.js。要安装 n 工具，请打开终端窗口并键入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure><p>此命令会在全局范围内安装 n 工具。</p><h2 id="第二步：查看可用的-Node-js-版本"><a href="#第二步：查看可用的-Node-js-版本" class="headerlink" title="第二步：查看可用的 Node.js 版本"></a>第二步：查看可用的 Node.js 版本</h2><p>要查看你可以安装的所有 Node.js 版本，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>此命令将列出 n 工具支持的所有 Node.js 版本。</p><h2 id="第三步：切换到特定版本的-Node-js"><a href="#第三步：切换到特定版本的-Node-js" class="headerlink" title="第三步：切换到特定版本的 Node.js"></a>第三步：切换到特定版本的 Node.js</h2><p>要切换到特定版本的 Node.js，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n &lt;version&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>&lt;version&gt;</code> 是你想要切换到的 Node.js 版本号。例如，如果你想要切换到 Node.js v14.16.0，则可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n 14.16.0</span><br></pre></td></tr></table></figure><p>此命令将下载并安装 Node.js v14.16.0，并将其设置为默认的 Node.js 版本。</p><h2 id="第四步：回退到先前的版本"><a href="#第四步：回退到先前的版本" class="headerlink" title="第四步：回退到先前的版本"></a>第四步：回退到先前的版本</h2><p>如果你想要回退到先前安装的版本，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n -</span><br></pre></td></tr></table></figure><p>此命令将返回先前安装的 Node.js 版本。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本文中，我们已经介绍了如何使用 n 工具在 Node.js 中进行版本切换或回退。这是一种非常简单且快速的方法，你可以在不同的应用程序和库之间轻松切换，以确保兼容性。</p><!-- ##　 node 版本切换/回退1. 安装 node 版本管理模块 n<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install n -g</span><br><span class="line">````</span><br><span class="line"></span><br><span class="line">2. 安装指定版本号</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">sudo n 10.20.1</span><br></pre></td></tr></table></figure><p>跑完搞定。 –&gt;</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序scroll-view组件 flex 布局无效</title>
      <link href="/posts/2021-05-9607/"/>
      <url>/posts/2021-05-9607/</url>
      
        <content type="html"><![CDATA[<p>当我们在使用微信小程序开发时，会遇到许多问题，其中之一就是 scroll-view 组件中的 flex 布局无效的问题。这个问题在很多情况下都会出现，尤其是当我们需要设置一个固定高度的 scroll-view 组件时。</p><p>首先，我们需要了解 scroll-view 组件是如何工作的。scroll-view 组件可以用于在可滚动区域内显示大量内容，它支持竖向和横向滚动，并且可以设置固定高度或者自适应高度。而 flex 布局是一种常用的布局方式，它能够让子元素按照一定的规则排列，使页面更加美观和易于维护。</p><p>但是，在 scroll-view 组件中使用 flex 布局时，我们会发现设置了 flex 属性后，子元素并没有按照我们所期望的方式排列。这是因为 scroll-view 组件默认是不支持 flex 布局的，需要我们手动启用 flexbox 布局。</p><p><img src="/images/image_1620875828262.png" alt="image.png"></p><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-y</span> <span class="attr">enable-flex</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序弹窗禁止滚动穿透</title>
      <link href="/posts/2021-04-56726/"/>
      <url>/posts/2021-04-56726/</url>
      
        <content type="html"><![CDATA[<p>微信小程序中经常会使用弹窗来提示用户或展示内容，但是当弹窗出现时，会发现底部页面仍然可以滚动，这就造成了弹窗的滚动穿透问题。本文将介绍如何解决微信小程序中弹窗滚动穿透的问题。</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>通常情况下，在小程序中使用弹窗需要覆盖全屏幕，为了防止用户在触摸弹窗以外的区域的同时也能滑动背景。但是当我们使用 <code>fixed</code> 定位和设置 <code>z-index</code> 后，发现弹窗层以下的页面依然可以滚动，并且无法通过监听 <code>touchmove</code> 事件来取消滚动。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;view</span><br><span class="line">  <span class="keyword">class</span>=<span class="string">&quot;dialog-modal&quot;</span></span><br><span class="line">  hidden=<span class="string">&quot;&#123;&#123;hide&#125;&#125;&quot;</span></span><br><span class="line">  <span class="attr">bind</span>:tap=<span class="string">&quot;tapClose&quot;</span></span><br><span class="line">  catchtouchmove=<span class="string">&quot;catchTouchMove&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;dialog-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">scroll-y</span>=<span class="string">&quot;&#123;&#123;true&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;dialog-content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;dataList&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        我是弹层滚动内容</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">  <span class="attr">properties</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">hide</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">dataList</span>: <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">50</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">tapClose</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">hide</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">hide</span>: <span class="literal">false</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">hide</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">        <span class="attr">hide</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">catchTouchMove</span>(<span class="params">event</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;modal touchmove&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>滚动元素使用 <code>scroll-view</code> 小程序组件，给最外层元素绑定 <code>catchtouchmove</code> 事件。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 生命周期与组件间通信</title>
      <link href="/posts/2020-12-35436/"/>
      <url>/posts/2020-12-35436/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-生命周期"><a href="#Vue-生命周期" class="headerlink" title="Vue 生命周期"></a>Vue 生命周期</h2><blockquote><p><a href="https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">生命周期图示</a></p></blockquote><p><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/image_1629882393948.png?imageMogr2/format/webp" alt="image.png"></p><h3 id="Vue-父子组件生命周期执行顺序"><a href="#Vue-父子组件生命周期执行顺序" class="headerlink" title="Vue 父子组件生命周期执行顺序"></a>Vue 父子组件生命周期执行顺序</h3><h4 id="加载渲染过程"><a href="#加载渲染过程" class="headerlink" title="加载渲染过程"></a>加载渲染过程</h4><p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p><p>父组件先 beforeCreate &#x3D;&gt; created &#x3D;&gt; beforeMount , 然后子组件开始 beforeCreate &#x3D;&gt; created &#x3D;&gt; beforeMount &#x3D;&gt; mounted 子组件挂载完成了，父组件再 mounted。</p><h4 id="子组件更新过程"><a href="#子组件更新过程" class="headerlink" title="子组件更新过程"></a>子组件更新过程</h4><p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p><h4 id="销毁过程"><a href="#销毁过程" class="headerlink" title="销毁过程"></a>销毁过程</h4><p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p><h2 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h2><h3 id="组件间通信的分类"><a href="#组件间通信的分类" class="headerlink" title="组件间通信的分类"></a>组件间通信的分类</h3><p>Vue 组件间通信大体可以分为以下几类：</p><ul><li>父子组件之间的通信</li><li>兄弟组件之间的通信</li><li>祖孙与后代组件之间的通信</li><li>非关系组件间之间的通信</li></ul><h3 id="组件间通信的方案"><a href="#组件间通信的方案" class="headerlink" title="组件间通信的方案"></a>组件间通信的方案</h3><p>父子组件通信：父组件通过 props 的方式向子组件传递数据，而通过 $emit 子组件可以向父组件通信。</p><h4 id="通过-props-传递"><a href="#通过-props-传递" class="headerlink" title="通过 props 传递"></a>通过 props 传递</h4><ul><li>适用场景：父组件传递数据给子组件</li><li>子组件设置 props 属性，定义接收父组件传递过来的参数</li><li>父组件在使用子组件标签中通过字面量来传递值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Children.vue</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="comment">// 字符串形式</span></span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span> <span class="comment">// 接收的类型参数</span></span><br><span class="line">    <span class="comment">// 对象形式</span></span><br><span class="line">    <span class="attr">age</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Number</span>, <span class="comment">// 接收的类型为数值</span></span><br><span class="line">        <span class="attr">defaule</span>:<span class="number">18</span>,  <span class="comment">// 默认值为18</span></span><br><span class="line">       <span class="attr">require</span>:<span class="literal">true</span> <span class="comment">// age属性必须传递</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Father.vue</span></span><br><span class="line">&lt;<span class="title class_">Children</span> name=<span class="string">&quot;jack&quot;</span> age=<span class="string">&quot;18&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>prop 只可以从上一级组件传递到下一级组件（父子组件），即所谓的单向数据流。而且 prop 只读，不可被修改，所有修改都会失效并警告。</p></blockquote><h4 id="emit-触发自定义事件"><a href="#emit-触发自定义事件" class="headerlink" title="$emit 触发自定义事件"></a>$emit 触发自定义事件</h4><ul><li>适用场景：子组件传递数据给父组件</li><li>子组件通过 $emit 触发自定义事件，$emit 第二个参数为传递的数值</li><li>父组件绑定监听器获取到子组件传递过来的参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Children.vue</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&quot;add&quot;</span>, good);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Father.vue</span></span><br><span class="line">&lt;<span class="title class_">Children</span> @add=<span class="string">&quot;cartAdd($event)&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h4 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h4><ul><li>使用场景：父组件获取子组件的实例</li><li>父组件在使用子组件的时候设置 ref</li><li>父组件通过设置子组件 ref 来获取数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Father.vue</span></span><br><span class="line">&lt;<span class="title class_">Children</span> ref=<span class="string">&quot;foo&quot;</span> /&gt;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">foo</span>; <span class="comment">// 获取子组件实例，通过子组件实例我们就能拿到对应的数据</span></span><br></pre></td></tr></table></figure><h4 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h4><ul><li>使用场景：兄弟组件传值</li><li>创建一个中央时间总线 EventBus</li><li>兄弟组件通过 $emit 触发自定义事件，$emit 第二个参数为传递的数值</li><li>另一个兄弟组件通过 $on 监听自定义事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Bus.js</span></span><br><span class="line"><span class="comment">// 创建一个中央时间总线类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span> = &#123;&#125;; <span class="comment">// 存放事件的名字</span></span><br><span class="line">  &#125;</span><br><span class="line">  $on(name, fn) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>[name] = <span class="variable language_">this</span>.<span class="property">callbacks</span>[name] || [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbacks</span>[name].<span class="title function_">push</span>(fn);</span><br><span class="line">  &#125;</span><br><span class="line">  $emit(name, args) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">callbacks</span>[name]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">callbacks</span>[name].<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(args));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Bus</span>(); <span class="comment">// 将$bus挂载到vue实例的原型上</span></span><br><span class="line"><span class="comment">// 另一种方式</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>(); <span class="comment">// Vue已经实现了Bus的功能</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Children.vue</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&quot;foo&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Father.vue</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;foo&quot;</span>, <span class="variable language_">this</span>.<span class="property">handle</span>);</span><br></pre></td></tr></table></figure><h4 id="parent-或-root"><a href="#parent-或-root" class="headerlink" title="$parent 或 $ root"></a>$parent 或 $ root</h4><ul><li>通过共同祖辈 $parent 或者 $root 搭建通信侨联</li></ul><p>兄弟组件</p><p><code>this.$parent.emit(&#39;add&#39;)</code></p><p>另一个兄弟组件</p><p><code>this.$parent.on(&#39;add&#39;,this.add)</code></p><h4 id="attrs-与-listeners"><a href="#attrs-与-listeners" class="headerlink" title="$attrs 与 $listeners"></a>$attrs 与 $listeners</h4><p><a href="https://cn.vuejs.org/v2/api/#vm-attrs">$attrs</a></p><ul><li>适用场景：祖先传递数据给子孙</li><li>设置批量向下传属性 $attrs 和 $listeners</li><li>包含了父级作用域中不作为 prop 被识别 （且获取） 的特性绑定 ( class 和 style 除外）。</li><li>可以通过 v-bind&#x3D;”$attrs” 传⼊内部组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child：并未在props中声明foo</span></span><br><span class="line">&lt;p&gt;&#123;&#123;$attrs.<span class="property">foo</span>&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parent</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">foo</span>=<span class="string">&quot;foo&quot;</span>/&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给Grandson隔代传值，communication/index.vue</span></span><br><span class="line">&lt;<span class="title class_">Child2</span> msg=<span class="string">&quot;lalala&quot;</span> @some-event=<span class="string">&quot;onSomeEvent&quot;</span>&gt;&lt;/<span class="title class_">Child2</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child2做展开</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Grandson</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span> <span class="attr">v-on</span>=<span class="string">&quot;$listeners&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Grandson</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Grandson使⽤</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;some-event&#x27;, &#x27;msg from grandson&#x27;)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;&#123;msg&#125;&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="provide-与-inject"><a href="#provide-与-inject" class="headerlink" title="provide 与 inject"></a>provide 与 inject</h4><p><a href="https://cn.vuejs.org/v2/api/#provide-inject">provide-inject</a></p><p>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在其上下游关系成立的时间里始终生效。如果你熟悉 React，这与 React 的上下文特性很相似。</p><p>provide 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的 property。在该对象中你可以使用 ES2015 Symbols 作为 key，但是只在原生支持 Symbol 和 Reflect.ownKeys 的环境下可工作。</p><p>inject 选项应该是：</p><ul><li>一个字符串数组，或</li><li>一个对象，对象的 key 是本地的绑定名，value 是：<ul><li>在可用的注入内容中搜索用的 key （字符串或 Symbol)，或</li><li>一个对象，该对象的：<ul><li>from property 是在可用的注入内容中搜索用的 key （字符串或 Symbol)</li><li>default property 是降级情况下使用的 value</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件提供 &#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Provider</span> = &#123;</span><br><span class="line">  <span class="attr">provide</span>: &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件注入 &#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Child</span> = &#123;</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&quot;foo&quot;</span>],</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">foo</span>); <span class="comment">// =&gt; &quot;bar&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h4><ul><li>适用场景：复杂关系的组件数据传递</li><li>Vuex 作用相当于一个用来存储共享变量的容器</li></ul><p><img src="https://blog-1304912906.cos.ap-guangzhou.myqcloud.com/images/image_1629882509052.png?imageMogr2/format/webp" alt="image.png"></p><ul><li>state 用来存放共享变量的地方</li><li>getter，可以增加一个 getter 派生状态，（相当于 store 中的计算属性），用来获得共享变量的值</li><li>mutations 用来存放修改 state 的方法。</li><li>actions 也是用来存放修改 state 的方法，不过 action 是在 mutations 的基础上进行。常用来做一些异步操作</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>父子关系的组件数据传递选择 props 与 $emit 进行传递，也可选择 ref</li><li>兄弟关系的组件数据传递可选择 $bus，其次可以选择 $parent 进行传递</li><li>祖先与后代组件数据传递可选择 attrs 与 listeners 或者 Provide 与 Inject</li><li>复杂关系的组件数据传递可以通过 vuex 存放共享的变量</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS：复制内容到剪贴板（无插件，兼容所有浏览器）</title>
      <link href="/posts/2020-12-20301/"/>
      <url>/posts/2020-12-20301/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-部分"><a href="#HTML-部分" class="headerlink" title="HTML 部分"></a>HTML 部分</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;copyToClip(&#x27;内容&#x27;)&quot;</span>&gt;</span>Copy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JS-部分"><a href="#JS-部分" class="headerlink" title="JS 部分"></a>JS 部分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复制单行内容到粘贴板</span></span><br><span class="line"><span class="comment"> * content : 需要复制的内容</span></span><br><span class="line"><span class="comment"> * message : 复制完后的提示，不传则默认提示&quot;复制成功&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyToClip</span>(<span class="params">content, message</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> aux = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>);</span><br><span class="line">  aux.<span class="title function_">setAttribute</span>(<span class="string">&quot;value&quot;</span>, content);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(aux);</span><br><span class="line">  aux.<span class="title function_">select</span>();</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;copy&quot;</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(aux);</span><br><span class="line">  <span class="keyword">if</span> (message == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;复制成功&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【补充】"><a href="#【补充】" class="headerlink" title="【补充】"></a>【补充】</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复制多行内容到粘贴板</span></span><br><span class="line"><span class="comment"> * contentArray: 需要复制的内容（传一个字符串数组）</span></span><br><span class="line"><span class="comment"> * message : 复制完后的提示，不传则默认提示&quot;复制成功&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyToClip</span>(<span class="params">contentArray, message</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> contents = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; contentArray.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    contents += contentArray[i] + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> textarea = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;textarea&quot;</span>);</span><br><span class="line">  textarea.<span class="property">value</span> = contents;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(textarea);</span><br><span class="line">  textarea.<span class="title function_">select</span>();</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;copy&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">execCommand</span>(<span class="string">&quot;copy&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(textarea);</span><br><span class="line">  <span class="keyword">if</span> (message == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;复制成功&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组排序(字符串排序)</title>
      <link href="/posts/2020-09-56698/"/>
      <url>/posts/2020-09-56698/</url>
      
        <content type="html"><![CDATA[<h2 id="排序常用方法：sort"><a href="#排序常用方法：sort" class="headerlink" title="排序常用方法：sort"></a>排序常用方法：sort</h2><h3 id="1-语法："><a href="#1-语法：" class="headerlink" title="1. 语法："></a>1. 语法：</h3><p>arr.sort([compareFunction]) ： 返回一个新的数组</p><p>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；<br>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；<br>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。<br>compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</p><h3 id="2-用法："><a href="#2-用法：" class="headerlink" title="2. 用法："></a>2. 用法：</h3><p>arr. sort(function(a,b){return a - b})</p><h3 id="3-字符串排序："><a href="#3-字符串排序：" class="headerlink" title="3. 字符串排序："></a>3. 字符串排序：</h3><p>arr.sort(function(a,b){return a.localeCompare(b)})来进行排序<br>但中文排序时发现不是我们想要的 可以通过加参数的方法 a.localeCompare(b,’zh-CN’)</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>医典前端监控</title>
      <link href="/posts/2020-07-46416/"/>
      <url>/posts/2020-07-46416/</url>
      
        <content type="html"><![CDATA[<p>医典的前端监控分为以下几类：</p><ul><li><p>错误、异常监控类：包括 js 错误、后端接口错误、ajax 请求错误、资源加载错误等</p></li><li><p>用户日志类：包括实时日志（白名单日志）、离线日志；</p></li><li><p>测速类：页面测速（首屏和页面切换）、cdn 资源加载测速、cgi 测速</p></li><li><p>用户信息类：包括用户的 ua、机型、网段、地区、ip 等（主要是出现在日志信息内，帮助分析问题）</p></li><li><p>告警：包括各分类的错误量的告警和波动告警</p></li></ul><p>结合医典的场景以及前端的框架，决定使用以下的监控体系：</p><p>使用一站式的监控平台 aegis（原因：支持离线日志和白名单日志；且也涵盖大部分的监控类（js、资源、请求监控），也支持 cgi 等测速；且维护人员稳定，Oteam 协同）</p><h3 id="错误、异常监控类："><a href="#错误、异常监控类：" class="headerlink" title="错误、异常监控类："></a>错误、异常监控类：</h3><p>h5：考虑直接使用 aegis，对聚类可能不是很友好，但是错误信息收集已经比较完善；</p><p>小程序：直接使用 aegis + 微信小程序管理后台的错误日志管理</p><h3 id="用户日志类："><a href="#用户日志类：" class="headerlink" title="用户日志类："></a>用户日志类：</h3><p>日志我们将完全使用 aegis，但是需要进行方案优化（因为医典是使用异步登录）；方案在后面详细说明</p><h3 id="测速类："><a href="#测速类：" class="headerlink" title="测速类："></a>测速类：</h3><ol><li><p>页面测速：完善医典自身的测速（测速维度更加精准，且支持小程序，后续可关联接口耗时）</p></li><li><p>cgi 测速：h5 使用医典的 cgi 测速（医典 cgi 测速包含 performance，更精确）；小程序目前还没有测速，先接入 aegis 的测速，后续迁移到医典测速；</p></li><li><p>cdn 资源测速：使用 aegis 测速；</p></li></ol><h3 id="用户信息类："><a href="#用户信息类：" class="headerlink" title="用户信息类："></a>用户信息类：</h3><p>选用 aegis，各个平台用户基础信息功能差异不大；</p><h3 id="告警："><a href="#告警：" class="headerlink" title="告警："></a>告警：</h3><p>可以尝试使用 aegis 自有告警。支持超每分钟 n 次（阀值）告警 和 错误率（错误数&#x2F;p v）告警；支持大分类告警；</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平安之旅</title>
      <link href="/posts/2020-05-41867/"/>
      <url>/posts/2020-05-41867/</url>
      
        <content type="html"><![CDATA[<blockquote><p>少年游·离多最是</p><p>宋代：晏几道</p><p>离多最是，东西流水，终解两相逢。</p><p>浅情终似，行云无定，犹到梦魂中。</p><p>可怜人意，薄于云水，佳会更难重。</p><p>细想从来，断肠多处，不与今番同。</p></blockquote><p><img src="/images/huizhanzhongxin_1629526547231.jpeg" alt="huizhanzhongxin"><br><img src="/images/pafc_1629526548374.jpeg" alt="pafc"></p><p>多年以后，我再次登上深圳最高楼 PAFC 时，准会想起 Ethan 在会议室面试我的那个遥远的下午。在面试前的中午，我在楼下的购物公园瞎逛，吃了觉得很贵的汉堡王。我当时被深圳的繁华吸引住了，这在广州没有这样的感受。到现在我还是非常喜欢深圳这座年轻的城市，还有这里朝气蓬勃的人。</p><p>来中国平安是很意外的事情，我在上一家公司工作很有成就感，有一个很重视很喜欢我的上司，没有离职重新找工作的想法。转折点是一次和朋友扯淡的过程中，他说结识了一位超级好看的猎头小姐姐，我打趣要照片之类的。于是“骑虎难下”地加了这位猎头的微信。接下来在猎头的多次催促之下，我拖了一个月才给到猎头简历。然后觉得不能辜负这位猎头的热情，本着帮个忙的初衷，从广州到深圳进行了面试。没想到在没有准备的情况下，竟然拿到了 offer。</p><p>后面具体了解平安的平台和技术，结合自己的发展和向更多大牛学习的心态，告别了上一家公司。我是一个特别不喜欢离别的人，会失落会伤感会内疚。但这就是人生，也是每个人的际遇和缘分。人生如逆旅，我亦是行人。</p><p>而现在又到了离别的时刻，很难过、失落、不舍，所以想把这种心情记录下来。平安这段美好时光是我人生中一个驿站。</p><p><img src="/images/smt-fe-team_1629526544096.jpg" alt="smt-fe-team"><br><img src="/images/team-build_1629526548903.jpeg" alt="team-build"></p><p>来平安之后，我认识了很专业的性格很好的上司和一群人生中很重要的小伙伴们。让我有重回大学校园的感觉，总体来说这边的工作强度不大，每天和优秀的同事合作和学习，让我每天感觉精力充沛。这段经历中，我主要是负责 i 深圳的 app 的 web 前端开发工作。接触了好用的 MacBook Pro，完善了 React 技术栈的短板，对前端工程化有了更深刻的了解，也经常去深圳市政府和各种领导、开发、产品、项目人员交流沟通。这段经历收获是很大的。在 Ethan 的带领下，团队做出了很多有意思的产品，如前端 ui 框架、积木平台、支持快速多平台落地的 Zeus CLi、智能客服、口罩预约系统等等。我还也参加了前端技术委员会的“赛码”比赛，获得了一个“小爱同学”（目前在积灰）。申请了 3 个前端相关的专利，获得了现金奖励。总体说来体验是极好的。</p><p>“离多最是，东西流水，终解两相逢。”</p><p>这次离职也是非常意外的，因为疫情的缘故，想要换医疗行业进行发展。于是选择了腾讯的医疗资讯与服务部的前端开发岗位。在和 Ethan 提离职的时候，我很难开口。在简单沟通之后，Ethan 给了我祝福和专业的发展建议，从他个人角度也是希望我到腾讯去历练一番。他在腾讯、阿里、IMB、华为等大公司都待过，也尝试过创业，是我很崇拜的技术大佬，我一直在试图追随他的脚步。</p><p>得益于平时输出的技术文档，交接的过程很顺利。在最后的离职的一天（也就是 9 号），我还在兢兢业业地解决项目中的新问题。这点受到了负责人的夸赞，说我的态度很好很负责。听到夸赞，心头还是很暖，但觉得这是分内的事，并没有什么值得夸赞的。</p><p>最后请小伙伴们吃了饭，下午把个人物品放车后备箱的时候，眼眶是温热的。行驶在沿江高速的路上，阳光洒在方向盘上，打开车窗让新鲜空气进来，带着深深的不舍和感激，那一刻对未来很是憧憬。这就是阳光的作用吧，犹如某个悠闲的午后，空气里是晒过被子的味道。</p><p>回忆起刚来深圳的时候，一个人去华侨城的沃尔玛买日常用品，从一楼到二楼每走一步，每买到一个商品，就越感到孤独。我时常谈起这段沃尔玛购物的体验，那是我认为的，我人生中最孤独的时刻。转眼之间，我在深圳有了很多好朋友，此刻那种孤独的感觉是非常遥远的。感恩时光中的每一位旅人。</p><p>老大和同事都说以后要常联系，我也是这样想的。这个团队是我遇到的最好的团队，感觉更多的不像是同事，而是很好的朋友。</p><p>想到以后能找个地方喝喝果汁，或者一起去自驾游。然后开黑，王者峡谷相逢。心里还有点小激动。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GreenSock 使用指南</title>
      <link href="/posts/2020-04-43307/"/>
      <url>/posts/2020-04-43307/</url>
      
        <content type="html"><![CDATA[<p>在现代 Web 开发中，动画是一个非常重要的组成部分。而在动画实现中，GreenSock（简称 GSAP）是一个非常流行的 JavaScript 动画库。GSAP 功能强大、使用简单，可以快速创建出高效、流畅的动画效果。本文将介绍 GSAP 的基本使用方法和常用功能，帮助读者快速上手 GSAP 库。</p><h2 id="为什么要使用-GreenSock？"><a href="#为什么要使用-GreenSock？" class="headerlink" title="为什么要使用 GreenSock？"></a>为什么要使用 GreenSock？</h2><p>相比于其他动画库，GreenSock 具有以下优点：</p><ol><li>高性能：GreenSock 原生支持硬件加速，保证页面流畅度，尤其适合制作高性能的动画和游戏。</li><li>丰富的 API 和插件：GreenSock 提供了众多 API 和插件，以及详细的文档和示例，有助于开发者快速上手和实现复杂的交互动画效果。</li><li>支持多种类型的动画：GreenSock 支持多种类型的动画，包括 Tween、Timeline、Ease、Bezier 等，使得动画制作更加灵活和多样化。</li><li>跨平台支持：GreenSock 可以用于 Web、移动端和桌面开发，同时支持多种浏览器和设备，具有广泛的应用场景和实际价值。</li></ol><h2 id="安装-GSAP"><a href="#安装-GSAP" class="headerlink" title="安装 GSAP"></a>安装 GSAP</h2><p>在使用 GSAP 之前，需要先安装依赖。使用 npm 包管理器进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gsap</span><br></pre></td></tr></table></figure><p>安装成功后，在项目中引入 GSAP 库：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; gsap &#125; <span class="keyword">from</span> <span class="string">&quot;gsap&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="创建动画"><a href="#创建动画" class="headerlink" title="创建动画"></a>创建动画</h2><p>在 GSAP 中，最基本的动画操作是创建 Tween。Tween 是一个对象，包含了需要进行动画操作的目标属性和动画完成后的状态值。以下是一个基本的 Tween 示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line"></span><br><span class="line">gsap.<span class="title function_">to</span>(box, &#123;</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">x</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">rotation</span>: <span class="number">360</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码使用 <code>gsap.to()</code> 方法创建了一个 Twee，将 .box 元素向右移动 300px，并绕中心点旋转 360 度。</p><h2 id="缓动函数"><a href="#缓动函数" class="headerlink" title="缓动函数"></a>缓动函数</h2><p>在使用 Tween 进行动画时，缓动函数是一个非常重要的概念。缓动函数用于控制动画运动的速度和加速度。GSAP 中内置了许多常用的缓动函数，例如 Linear、Ease、Power 等。</p><p>以下是一个使用 Ease 缓动函数的 Tween 示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line"></span><br><span class="line">gsap.<span class="title function_">to</span>(box, &#123;</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">x</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">ease</span>: <span class="string">&quot;elastic.out(1, 0.3)&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码将缓动函数设置为 elastic.out，使得元素在移动过程中具有弹性效果。</p><h2 id="动画链"><a href="#动画链" class="headerlink" title="动画链"></a>动画链</h2><p>GSAP 提供了 Animation Chain 功能，可以让我们将多个 Tween 链接起来，形成一个连续的动画效果。以下是一个动画链示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line"></span><br><span class="line">gsap</span><br><span class="line">  .<span class="title function_">timeline</span>()</span><br><span class="line">  .<span class="title function_">to</span>(box, &#123; <span class="attr">duration</span>: <span class="number">1</span>, <span class="attr">x</span>: <span class="number">300</span> &#125;)</span><br><span class="line">  .<span class="title function_">to</span>(box, &#123; <span class="attr">duration</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">200</span> &#125;)</span><br><span class="line">  .<span class="title function_">to</span>(box, &#123; <span class="attr">duration</span>: <span class="number">1</span>, <span class="attr">scale</span>: <span class="number">1.5</span> &#125;);</span><br></pre></td></tr></table></figure><p>以上代码使用 <code>gsap.timeline()</code> 方法创建了一个时间轴，将三个 Tween 对象链接起来实现连续的动画效果。</p><h2 id="滚动触发动画"><a href="#滚动触发动画" class="headerlink" title="滚动触发动画"></a>滚动触发动画</h2><p>在 Web 开发中，滚动触发动画是一种非常流行的效果。GSAP 提供了 ScrollTrigger 插件，可以方便地实现滚动触发动画。以下是一个滚动触发动画示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ScrollTrigger</span> <span class="keyword">from</span> <span class="string">&quot;gsap/ScrollTrigger&quot;</span>;</span><br><span class="line"></span><br><span class="line">gsap.<span class="title function_">registerPlugin</span>(<span class="title class_">ScrollTrigger</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>);</span><br><span class="line"></span><br><span class="line">gsap.<span class="title function_">to</span>(box, &#123;</span><br><span class="line">  <span class="attr">duration</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">x</span>: <span class="number">300</span>,</span><br><span class="line">  <span class="attr">opacity</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">scrollTrigger</span>: &#123;</span><br><span class="line">    <span class="attr">trigger</span>: box,</span><br><span class="line">    <span class="attr">start</span>: <span class="string">&quot;top center&quot;</span>,</span><br><span class="line">    <span class="attr">end</span>: <span class="string">&quot;bottom center&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>以上代码使用 ScrollTrigger 插件，实现了当 <code>.box</code> 元素滚动到可视区域时，向右移动并逐渐消失的效果。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了 GSAP 的基础使用方法和常用功能，包括 Tween、缓动函数、动画链和滚动触发动画等。GSAP 库在动画开发中非常强大，可以实现各种复杂的动画效果。阅读本文后，相信读者已经掌握了 GSAP 的基本用法，可以尝试在自己的项目中使用 GSAP 实现出样式炫酷、交互丰富的动态效果。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GreenSock </tag>
            
            <tag> GSAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给 HTML5 Video 视频添加字幕</title>
      <link href="/posts/2020-04-26670/"/>
      <url>/posts/2020-04-26670/</url>
      
        <content type="html"><![CDATA[<p>随着 HTML5 的出现，我们可以用更便捷的方式在网页上添加视频。然而，如果你需要让视频配有字幕，该怎么办呢？</p><p>HTML5 Video 标签支持 WebVTT（Web 视频文本轨道）格式的字幕文件，这意味着你可以通过创建一个简单的 WebVTT 文件来为你的 HTML5 视频添加字幕。</p><p>下面是一个简单的示例。假设你有一个名为 myvideo.mp4 的视频，以及一个名为 mysubtitles.vtt 的字幕文件。你可以按照以下步骤将它们组合起来：</p><h2 id="给-HTML5-Video-视频添加字幕"><a href="#给-HTML5-Video-视频添加字幕" class="headerlink" title="给 HTML5 Video 视频添加字幕"></a>给 HTML5 Video 视频添加字幕</h2><h3 id="步骤-1：准备你的视频"><a href="#步骤-1：准备你的视频" class="headerlink" title="步骤 1：准备你的视频"></a>步骤 1：准备你的视频</h3><p>首先，你需要引入一个 <code>&lt;video&gt;</code> 标签来嵌入你的视频：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;myvideo.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了 <code>&lt;source&gt;</code> 元素来指定视频文件的位置和类型。<code>controls</code> 属性使浏览器显示包括播放&#x2F;暂停按钮、音量控制和时间线等控件的默认视频控件。</p><h3 id="步骤-2：准备你的字幕文件"><a href="#步骤-2：准备你的字幕文件" class="headerlink" title="步骤 2：准备你的字幕文件"></a>步骤 2：准备你的字幕文件</h3><p>接下来，你需要准备一个 WebVTT 字幕文件。WebVTT 文件具有以下格式：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WEBVTT</span><br><span class="line"></span><br><span class="line">00:00:00.000 --&gt; 00:00:05.000</span><br><span class="line">Hello, world!</span><br><span class="line"></span><br><span class="line">00:00:05.000 --&gt; 00:00:10.000</span><br><span class="line">This is a sample subtitle file.</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们定义了两个字幕片段。每个字幕片段都有一个开始时间和一个结束时间，以及一个文本内容。你可以使用 <a href="https://subplayer.js.org/">WebVTT 字幕编辑器</a> 来创建和编辑 WebVTT 文件。</p><h3 id="步骤-3：将字幕文件添加到-video-标签中"><a href="#步骤-3：将字幕文件添加到-video-标签中" class="headerlink" title="步骤 3：将字幕文件添加到 video 标签中"></a>步骤 3：将字幕文件添加到 video 标签中</h3><p>现在，你可以将字幕文件与 video 标签结合起来：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;myvideo.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">track</span> <span class="attr">src</span>=<span class="string">&quot;mysubtitles.vtt&quot;</span> <span class="attr">kind</span>=<span class="string">&quot;subtitles&quot;</span> <span class="attr">srclang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">label</span>=<span class="string">&quot;English&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用了 <code>&lt;track&gt;</code> 元素来指定字幕文件的位置和类型。<code>kind</code> 属性指定字幕类型，这里是 “subtitles”。<code>srclang</code> 属性指定字幕语言（这里是英语），而 <code>label</code> 属性则用于为字幕添加一个标签（这里是“English”）。</p><p>现在，如果你播放该视频，字幕将自动显示在视频控件下方。</p><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><p>目前，所有主流浏览器都支持 HTML5 Video 标签。然而，WebVTT 字幕文件的支持程度则不尽相同。下表列出了各个浏览器对 WebVTT 的支持情况：</p><table><thead><tr><th>浏览器</th><th>支持情况</th></tr></thead><tbody><tr><td>Chrome</td><td>支持</td></tr><tr><td>Firefox</td><td>支持</td></tr><tr><td>Safari</td><td>支持</td></tr><tr><td>Edge</td><td>支持</td></tr><tr><td>Internet Explorer</td><td>不支持</td></tr><tr><td>Opera</td><td>支持</td></tr><tr><td>Android Browser</td><td>支持</td></tr><tr><td>Chrome for Android</td><td>支持</td></tr><tr><td>Firefox for Android</td><td>支持</td></tr><tr><td>Opera for Android</td><td>支持</td></tr><tr><td>Safari on iOS</td><td>支持</td></tr><tr><td>Samsung Internet</td><td>支持</td></tr></tbody></table><h2 id="lt-track-gt-标签属性"><a href="#lt-track-gt-标签属性" class="headerlink" title="&lt;track&gt; 标签属性"></a><code>&lt;track&gt;</code> 标签属性</h2><p>在上文提到的 <code>&lt;track&gt;</code> 标签中，除了 <code>src</code>、<code>kind</code>、<code>srclang</code> 和 <code>label</code> 属性外，还有以下常用属性：</p><ul><li><code>default</code>：如果设置了这个属性，那么这个字幕文件将成为默认字幕。如果视频没有其它可用的字幕文件，则将显示此字幕。</li><li><code>srcLang</code>：指定外部字幕文件中使用的语言。</li><li><code>mime-type</code>：指定外部字幕文件的 MIME 类型。</li></ul><p>样式控制方面，可以使用 CSS 对字幕进行控制。可以使用以下属性：</p><ul><li><code>text-shadow</code>：这个属性可以给字幕添加阴影效果。例如，<code>text-shadow: 2px 2px 2px rgba(0,0,0,0.5);</code>会在字幕下面添加一个黑色半透明阴影。</li><li><code>font-size</code>：可以控制字幕的字号大小。</li><li><code>font-family</code>：可以指定字幕所使用的字体。</li><li><code>color</code>：可以指定字幕的颜色。</li><li><code>background-color</code>：可以为字幕添加背景色。</li><li><code>opacity</code>：可以使用这个属性来改变字幕的透明度。</li></ul><p>需要注意的是，不是所有浏览器都支持使用 CSS 样式控制字幕。一些浏览器可能只支持字幕本身的样式属性，而不支持 CSS 样式属性。</p><h2 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h2><p>HTML5 字幕系统代码如下，可以参考使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5 自定义字幕系统<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">video</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.subtitle</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>: opacity <span class="number">0.2s</span> ease-in-out;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.show-subtitle</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;myVideo&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 添加字幕轨迹 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">track</span></span></span><br><span class="line"><span class="tag">        <span class="attr">label</span>=<span class="string">&quot;My English Subtitles&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">kind</span>=<span class="string">&quot;subtitles&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">srclang</span>=<span class="string">&quot;en&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;subtitles.vtt&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义字幕区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;subtitle&quot;</span> <span class="attr">class</span>=<span class="string">&quot;subtitle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> video = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myVideo&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> subtitleDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;subtitle&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 监听视频时间更新事件</span></span></span><br><span class="line"><span class="language-javascript">      video.<span class="title function_">addEventListener</span>(<span class="string">&quot;timeupdate&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> currentTime = video.<span class="property">currentTime</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取当前时间对应的字幕</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> currentSubtitle = <span class="title function_">getSubtitle</span>(currentTime);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (currentSubtitle) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 更新字幕内容</span></span></span><br><span class="line"><span class="language-javascript">          subtitleDiv.<span class="property">innerHTML</span> = currentSubtitle.<span class="property">text</span>;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 显示字幕</span></span></span><br><span class="line"><span class="language-javascript">          subtitleDiv.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;show-subtitle&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 隐藏字幕</span></span></span><br><span class="line"><span class="language-javascript">          subtitleDiv.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;show-subtitle&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取当前时间对应的字幕</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">getSubtitle</span>(<span class="params">currentTime</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> track = video.<span class="property">textTracks</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; track.<span class="property">cues</span>.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> cue = track.<span class="property">cues</span>[i];</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (currentTime &gt;= cue.<span class="property">startTime</span> &amp;&amp; currentTime &lt;= cue.<span class="property">endTime</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> cue;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个字幕系统使用了自定义的字幕区域，并通过 CSS 样式进行了一些控制。在脚本中，我们监听了视频的时间更新事件，通过 <code>getSubtitle()</code> 函数来获取当前时间对应的字幕，并更新字幕内容。同时，我们也通过 CSS 样式来控制字幕的缓慢显示和隐藏。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过创建 WebVTT 字幕文件并将其与 HTML5 Video 标签结合使用，你可以轻松地为视频添加字幕。这对于那些希望提供多种语言选项、提高可访问性或增强用户体验的网站和应用程序是非常重要的。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.w3schools.com/html/html5_video.asp">HTML5 Video</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> Video </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下vscode快捷键</title>
      <link href="/posts/2018-10-7817/"/>
      <url>/posts/2018-10-7817/</url>
      
        <content type="html"><![CDATA[<h1 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Command + Shift + P / F1 显示命令面板</span><br><span class="line">Command + P 快速打开</span><br><span class="line">Command + Shift + N 打开新窗口</span><br><span class="line">Command + W 关闭窗口</span><br></pre></td></tr></table></figure><h1 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Command + X 剪切（未选中文本的情况下，剪切光标所在行）</span><br><span class="line">Command + C 复制（未选中文本的情况下，复制光标所在行）</span><br><span class="line">Option + Up 向上移动行</span><br><span class="line">Option + Down 向下移动行</span><br><span class="line">Option + Shift + Up 向上复制行</span><br><span class="line">Option + Shift + Down 向下复制行</span><br><span class="line">Command + Shift + K 删除行</span><br><span class="line">Command + Enter 下一行插入</span><br><span class="line">Command + Shift + Enter 上一行插入</span><br><span class="line">Command + Shift +  跳转到匹配的括号</span><br><span class="line">Command + [ 减少缩进</span><br><span class="line">Command + ] 增加缩进</span><br><span class="line">Home 跳转至行首</span><br><span class="line">End 跳转到行尾</span><br><span class="line">Command + Up 跳转至文件开头</span><br><span class="line">Command + Down 跳转至文件结尾</span><br><span class="line">Ctrl + PgUp 按行向上滚动</span><br><span class="line">Ctrl + PgDown 按行向下滚动</span><br><span class="line">Command + PgUp 按屏向上滚动</span><br><span class="line">Command + PgDown 按屏向下滚动</span><br><span class="line">Command + Shift + [ 折叠代码块</span><br><span class="line">Command + Shift + ] 展开代码块</span><br><span class="line">Command + K Command + [ 折叠全部子代码块</span><br><span class="line">Command + K Command + ] 展开全部子代码块</span><br><span class="line">Command + K Command + 0 折叠全部代码块</span><br><span class="line">Command + K Command + J 展开全部代码块</span><br><span class="line">Command + K Command + C 添加行注释</span><br><span class="line">Command + K Command + U 移除行注释</span><br><span class="line">Command + / 添加、移除行注释</span><br><span class="line">Option + Shift + A 添加、移除块注释</span><br><span class="line">Option + Z 自动换行、取消自动换行</span><br></pre></td></tr></table></figure><h1 id="多光标与选择"><a href="#多光标与选择" class="headerlink" title="多光标与选择"></a>多光标与选择</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Option + 点击 插入多个光标</span><br><span class="line">Command + Option + Up 向上插入光标</span><br><span class="line">Command + Option + Down 向下插入光标</span><br><span class="line">Command + U 撤销上一个光标操作</span><br><span class="line">Option + Shift + I 在所选行的行尾插入光标</span><br><span class="line">Command + I 选中当前行</span><br><span class="line">Command + Shift + L 选中所有与当前选中内容相同部分</span><br><span class="line">Command + F2 选中所有与当前选中单词相同的单词</span><br><span class="line">Command + Ctrl + Shift + Left 折叠选中</span><br><span class="line">Command + Ctrl + Shift + Right 展开选中</span><br><span class="line">Alt + Shift + 拖动鼠标 选中代码块</span><br><span class="line">Command + Shift + Option + Up 列选择 向上</span><br><span class="line">Command + Shift + Option + Down 列选择 向下</span><br><span class="line">Command + Shift + Option + Left 列选择 向左</span><br><span class="line">Command + Shift + Option + Right 列选择 向右</span><br><span class="line">Command + Shift + Option + PgUp 列选择 向上翻页</span><br><span class="line">Command + Shift + Option + PgDown 列选择 向下翻页</span><br></pre></td></tr></table></figure><h1 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Command + F 查找</span><br><span class="line">Command + Option + F 替换</span><br><span class="line">Command + G 查找下一个</span><br><span class="line">Command + Shift + G 查找上一个</span><br><span class="line">Option + Enter 选中所有匹配项</span><br><span class="line">Command + D 向下选中相同内容</span><br><span class="line">Command + K Command + D 移除前一个向下选中相同内容</span><br></pre></td></tr></table></figure><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + Space 打开建议</span><br><span class="line">Command + Shift + Space 参数提示</span><br><span class="line">Tab Emmet插件缩写补全</span><br><span class="line">Option + Shift + F 格式化</span><br><span class="line">Command + K Command + F 格式化选中内容</span><br><span class="line">F12 跳转到声明位置</span><br><span class="line">Option + F12 查看具体声明内容</span><br><span class="line">Command + K F12 分屏查看具体声明内容</span><br><span class="line">Command + . 快速修复</span><br><span class="line">Shift + F12 显示引用</span><br><span class="line">F2 重命名符号</span><br><span class="line">Command + Shift + . 替换为上一个值</span><br><span class="line">Command + Shift + , 替换为下一个值</span><br><span class="line">Command + K Command + X 删除行尾多余空格</span><br><span class="line">Command + K M 更改文件语言</span><br></pre></td></tr></table></figure><h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Command + T 显示所有符号</span><br><span class="line">Ctrl + G 跳转至某行</span><br><span class="line">Command + P 跳转到某个文件</span><br><span class="line">Command + Shift + O 跳转到某个符号</span><br><span class="line">Command + Shift + M 打开问题面板</span><br><span class="line">F8 下一个错误或警告位置</span><br><span class="line">Shift + F8 上一个错误或警告位置</span><br><span class="line">Ctrl + Shift + Tab 编辑器历史记录</span><br><span class="line">Ctrl + - 后退</span><br><span class="line">Ctrl + Shift + - 前进</span><br><span class="line">Ctrl + Shift + M Tab 切换焦点</span><br></pre></td></tr></table></figure><h1 id="编辑器管理"><a href="#编辑器管理" class="headerlink" title="编辑器管理"></a>编辑器管理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Command + W 关闭编辑器</span><br><span class="line">Command + K F 关闭文件夹</span><br><span class="line">Command +  编辑器分屏</span><br><span class="line">Command + 1 切换到第一分组</span><br><span class="line">Command + 2 切换到第二分组</span><br><span class="line">Command + 3 切换到第三分组</span><br><span class="line">Command + K Command + Left 切换到上一分组</span><br><span class="line">Command + K Command + Right 切换到下一分组</span><br><span class="line">Command + K Command + Shift + Left 左移编辑器</span><br><span class="line">Command + K Command + Shift + Right 右移编辑器</span><br><span class="line">Command + K Left 激活左侧编辑组</span><br><span class="line">Command + K Right 激活右侧编辑组</span><br></pre></td></tr></table></figure><h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Command + N 新建文件</span><br><span class="line">Command + O 打开文件</span><br><span class="line">Command + S 保存文件</span><br><span class="line">Command + Shift + S 另存为</span><br><span class="line">Command + Option + S 全部保存</span><br><span class="line">Command + W 关闭</span><br><span class="line">Command + K Command + W 全部关闭</span><br><span class="line">Command + Shift + T 重新打开被关闭的编辑器</span><br><span class="line">Command + K Enter 保持打开</span><br><span class="line">Ctrl + Tab 打开下一个</span><br><span class="line">Ctrl + Shift + Tab 打开上一个</span><br><span class="line">Command + K P 复制当前文件路径</span><br><span class="line">Command + K R 在资源管理器中查看当前文件</span><br><span class="line">Command + K O 新窗口打开当前文件</span><br></pre></td></tr></table></figure><h1 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Command + Ctrl + F 全屏、退出全屏</span><br><span class="line">Command + Option + 1 切换编辑器分屏方式（横、竖）</span><br><span class="line">Command + + 放大</span><br><span class="line">Command + - 缩小</span><br><span class="line">Command + B 显示、隐藏侧边栏</span><br><span class="line">Command + Shift + E 显示资源管理器 或 切换焦点</span><br><span class="line">Command + Shift + F 显示搜索框</span><br><span class="line">Ctrl + Shift + G 显示Git面板</span><br><span class="line">Command + Shift + D 显示调试面板</span><br><span class="line">Command + Shift + X 显示插件面板</span><br><span class="line">Command + Shift + H 全局搜索替换</span><br><span class="line">Command + Shift + J 显示、隐藏高级搜索</span><br><span class="line">Command + Shift + C 打开新终端</span><br><span class="line">Command + Shift + U 显示输出面板</span><br><span class="line">Command + Shift + V Markdown预览窗口</span><br><span class="line">Command + K V 分屏显示 Markdown预览窗口</span><br></pre></td></tr></table></figure><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">F9 设置 或 取消断点</span><br><span class="line">F5 开始 或 继续</span><br><span class="line">F11 进入</span><br><span class="line">Shift + F11 跳出</span><br><span class="line">F10 跳过</span><br><span class="line">Command + K Command + I 显示悬停信息</span><br></pre></td></tr></table></figure><h1 id="集成终端"><a href="#集成终端" class="headerlink" title="集成终端"></a>集成终端</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + 显示终端 Ctrl + Shift + 新建终端</span><br><span class="line">Command + Up 向上滚动</span><br><span class="line">Command + Down 向下滚动</span><br><span class="line">PgUp 向上翻页</span><br><span class="line">PgDown 向下翻页</span><br><span class="line">Command + Home 滚动到顶部</span><br><span class="line">Command + End 滚动到底部</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vscode + ESLint + Pretter 配置</title>
      <link href="/posts/2018-09-37336/"/>
      <url>/posts/2018-09-37336/</url>
      
        <content type="html"><![CDATA[<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a></p><p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a></p><h2 id="配置-settings-json"><a href="#配置-settings-json" class="headerlink" title="配置 settings.json"></a>配置 <code>settings.json</code></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;eslint.alwaysShowStatus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.workingDirectories&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span> <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.validate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;javascript&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;javascriptreact&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;typescriptreact&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;vue&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程的学习态度和方法</title>
      <link href="/posts/2017-11-4613/"/>
      <url>/posts/2017-11-4613/</url>
      
        <content type="html"><![CDATA[<p>作为一名程序员，我们需要抱持正确的心态、采用正确的方式来学习和提高自己的编程技术水平。以下是我个人对于编程学习态度和方法的一些看法和总结。</p><h2 id="一、心态"><a href="#一、心态" class="headerlink" title="一、心态"></a>一、心态</h2><!-- 1. 只是一份工作，和快递员没什么区别。目的只有一个，就是赚钱。2. 一定要抱有一个目的：就是没有退路。学不好，这一生就毁了。不能给自己留退路。3. 只听不练，是大忌。软件开发最重要的是练习。4. 心态问题（玩游戏）。不能沿袭上学的状态，不主动学习新的知识。5. 犯错也是好事，只有这样才能明白自己真正想要的是什么。 --><ol><li>把编程当做一份工作，和其他工作一样，目的只有一个——赚钱。这是我们从事编程的最基本动机，也是我们不断努力学习和提升自己的原因之一。</li><li>必须抱有一个目标，就是没有退路。在编程领域，学不好就意味着被淘汰。因此，我们要时刻保持紧张状态，不能给自己留下任何后路。</li><li>要坚持练习。编程最重要的是实践，只有在实践中不断思考、摸索，才能真正掌握知识。</li><li>不能沉迷于游戏等娱乐活动，而忽视了学习新知识的重要性。我们必须不断追求进步，不断挑战自己，才能不断提升自己的能力。</li><li>犯错是很正常的，只有通过犯错才能让自己更加明确自己的目标和方向。</li></ol><h2 id="二、学习效果不好"><a href="#二、学习效果不好" class="headerlink" title="二、学习效果不好"></a>二、学习效果不好</h2><!-- 1. 用功不用心（用心琢磨）2. 培养自己做事情的套路3. 以目的为驱动。（通过分析目的》怎么做》然后才去做）4. 练习的时候要想为什么要这样做5. 举一反三6. 必须要练，练代码 --><ol><li>要用心琢磨。不能光是刻意地用功，还要有深入思考，理解为什么这样做才能真正做到知其然，更要知其所以然。</li><li>培养自己做事情的套路，这样就会对编程技术有自己的理解和方法论。</li><li>以目的为驱动，通过分析目的、确定怎么做，再着手实施，只有如此才能提高学习效率。</li><li>练习的时候要思考为什么要这样做，把握住每个细节，从而达到深入学习的效果。</li><li>要善于举一反三，将一个问题引申到其他相关方面，让自己的学习过程更加全面。</li><li>必须要充分练习，在实践中不断总结经验，才能提高自己的编程水平。</li></ol><h2 id="三、前途、能做到什么？带来的收益"><a href="#三、前途、能做到什么？带来的收益" class="headerlink" title="三、前途、能做到什么？带来的收益"></a>三、前途、能做到什么？带来的收益</h2><!-- 1. 将来的工作内容：   市场调查--》需求分析--》合同定义--》需求分析（难度分析）--》概要设计--》详细设计--》数据库设计--》开发阶段（我们真正从事的）--》[测试阶段--》修改过程][至少重复3次]--》试运行--》正式运行2. 成本/回报率3. 发展：   - 项目经理（最容易）   - 部门经理、系统架构师、1.5 线（前期规划方案）、配合销售人员做市场   - 项目总监、大部门经理   - 管理方面：人际沟通、管理能力（人和事）   - 项目方面：人际沟通、项目进度把控、人的管理   - 市场方面：要外向、人际要好、适应销售环境 --><ol><li>在未来可能的工作中，我们需要完成市场调查、需求分析、合同定义、概要设计、详细设计、数据库设计、开发阶段、测试阶段等一系列任务。只有在做好每一个环节，才能完成整个项目的开发。</li><li>从成本&#x2F;回报率的角度考虑，只有学好编程技术并在实际工作中运用自如，我们才能为公司带来更高的回报。</li><li>在职业发展方面，我们可以晋升为项目经理、部门经理、系统架构师、配合销售人员做市场等职位。同时，也需要提高自己的管理能力和沟通能力，才能更好地应对各种挑战。</li></ol><h2 id="四、怎么学？"><a href="#四、怎么学？" class="headerlink" title="四、怎么学？"></a>四、怎么学？</h2><!-- 1. 特质：程序员都是实践家，用代码来探路2. 软件开发没有捷径。能做的事压缩时间3. 抗压能力（遇到 BUG）4. 应变能力（需求搞不定）5. 沟通能力6. 技术能力 --><ol><li>程序员都是实践家，需要通过不断实践来探索和学习新知识。</li><li>软件开发没有捷径，需要投入大量时间和精力去学习和练习。但是，我们可以通过压缩时间、提高效率来提升学习效果。</li><li>抗压能力是我们必备的素质之一，在遇到问题时应该冷静分析、积极解决。</li><li>应变能力也非常重要，在需求搞不定的情况下，我们需要灵活应对，找到新的解决方案。</li><li>良好的沟通能力是我们在团队合作中必不可少的技能。我们需要主动与同事沟通、分享经验，共同完成项目。</li><li>技术能力是我们最基本的职业素养，需要不断追求和提升。只有掌握了扎实的技术基础，才能更好地应对各种开发挑战。</li></ol><p>总而言之，编程学习是一个长期的过程，需要我们坚持不懈、持之以恒。只有抱有正确的态度和方法，才能在未来的职业生涯中取得更大的成功。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 模板编译原理解析</title>
      <link href="/posts/2017-10-25313/"/>
      <url>/posts/2017-10-25313/</url>
      
        <content type="html"><![CDATA[<h2 id="JS-的-with-语法"><a href="#JS-的-with-语法" class="headerlink" title="JS 的 with 语法"></a>JS 的 with 语法</h2><p>在了解 vue 编译原理之前，需要认识 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with">with</a> 语法。</p><p>简单来说，使用 with ，能改变 <code>&#123;&#125;</code> 内自由变量的查找方式，将 <code>&#123;&#125;</code> 内自由变量，当作 obj 的属性来查找。代码演示如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span> &#125;;</span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 100</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 200</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// Uncaught ReferenceError: c is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>⚠️ 需要注意的是：with 会打破作用域规则，易读性变差，一般不建议使用。</p></blockquote><h2 id="vue-template-complier-将模板编译为-render-函数"><a href="#vue-template-complier-将模板编译为-render-函数" class="headerlink" title="vue template complier 将模板编译为 render 函数"></a>vue template complier 将模板编译为 render 函数</h2><p>vue 能将 template 解析为 JS 代码主要是依赖了<a href="https://www.npmjs.com/package/vue-template-compiler">vue-template-compiler</a>，它的简要使用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compiler = <span class="built_in">require</span>(<span class="string">&quot;vue-template-complier&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`&lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">compiler</span>(template);</span><br><span class="line"><span class="comment">// with(this)&#123;return _c(&#x27;p&#x27;,[_v(_s(toString(message)))])&#125;</span></span><br><span class="line"><span class="comment">// h --&gt; vnode</span></span><br></pre></td></tr></table></figure><p>其作用是，将模板编译为 render 函数，然后执行 render 函数生成 vnode，基于 vnode 再执行 patch 和 diff 使页面得到渲染和更新。</p><p>如果需要，我们的 vue 组件可以使用 render 来替代 template。</p><h2 id="组件渲染和更新过程"><a href="#组件渲染和更新过程" class="headerlink" title="组件渲染和更新过程"></a>组件渲染和更新过程</h2><p>在理解了模板编译原理之后，我们可以继续<a href="https://cn.vuejs.org/v2/guide/reactivity.html">深入响应式原理</a>。</p><p><img src="https://www.jojoer.com/upload/2021/10/data-5a62e8e77a554881823efa93c91d79f2.png" alt="深入响应式原理"><center style="font-size:14px;color:#C0C0C0;">深入响应式原理</center></p><p>我将其分为了以下 3 种情况，简要描述如下：</p><h3 id="初次渲染"><a href="#初次渲染" class="headerlink" title="初次渲染"></a>初次渲染</h3><p>初次渲染第一步会将模板解析为 render 函数；然后会触发响应式，监听 data 的属性（也就是对应的 getter 和 setter）；最后是执行 render 函数，生成 vnode 和执行 patch 方法将 vnode 渲染为真实的 DOM。</p><p>这里需要注意的是执行 render 函数会触发 getter，绑定初始值。</p><h3 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h3><p>当我们修改了 data，会触发相应的 setter；然后会重新出发 render 函数，生成新的 vnode；最后通过 patch(vnode, newVnode)更新渲染页面。</p><h3 id="异步渲染"><a href="#异步渲染" class="headerlink" title="异步渲染"></a>异步渲染</h3><p>vue 组件是异步渲染的，$nextTick 等待 DOM 渲染完再回调。页面渲染会将 data 的修改做整合，多次 data 修改只会渲染一次。目的是为了减少 DOM 的操作次数，提高性能。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端路由原理</title>
      <link href="/posts/2017-10-54782/"/>
      <url>/posts/2017-10-54782/</url>
      
        <content type="html"><![CDATA[<h2 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h2><p>路由（Router）这个概念最先是后端出现的，是用来跟后端服务器进行交互的一种方式，通过不同的路径，来请求不同的资源，请求不同的页面是路由的其中一种功能。</p><p>前端随着 ajax 的流行，数据请求可以在不刷新浏览器的情况下进行。异步交互体验中最盛行的就是 SPA —— 单页应用。单页应用不仅仅是在页面交互时无刷新的，连页面跳转都是无刷新的，为了实现单页应用，所以就有了前端路由。</p><h2 id="网页-url-组成部分"><a href="#网页-url-组成部分" class="headerlink" title="网页 url 组成部分"></a>网页 url 组成部分</h2><p>URL 由多个部分组成。为了讲解，下面是一个比较复杂的 URL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.example.com:80/path/to/myfile.html?key1=value1&amp;key2=value2#anchor</span><br></pre></td></tr></table></figure><h3 id="协议（scheme）"><a href="#协议（scheme）" class="headerlink" title="协议（scheme）"></a>协议（scheme）</h3><p>协议（scheme）是浏览器请求服务器资源的方法，上例是 https:&#x2F;&#x2F;的部分，表示使用 HTTPS 协议。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">protocol</span>; <span class="comment">// https</span></span><br></pre></td></tr></table></figure><h3 id="主机（host）"><a href="#主机（host）" class="headerlink" title="主机（host）"></a>主机（host）</h3><p>主机（host）是资源所在的网站名或服务器的名字，又称为域名。上例的主机是<a href="http://www.example.com./">www.example.com。</a></p><p>有些主机没有域名，只有 IP 地址，比如 192.168.2.15。这种情况常常出现在局域网。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">hostName</span>; <span class="comment">// www.example.com</span></span><br></pre></td></tr></table></figure><h3 id="端口（port）"><a href="#端口（port）" class="headerlink" title="端口（port）"></a>端口（port）</h3><p>同一个域名下面可能同时包含多个网站，它们之间通过端口（port）区分。“端口”就是一个整数，可以简单理解成，访问者告诉服务器，想要访问哪一个网站。默认端口是 80，如果省略了这个参数，服务器就会返回 80 端口的网站。</p><p>端口紧跟在域名后面，两者之间使用冒号分隔，比如<a href="http://www.example.com:80。">www.example.com:80。</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">port</span>; <span class="comment">// 80</span></span><br></pre></td></tr></table></figure><h3 id="路径（path）"><a href="#路径（path）" class="headerlink" title="路径（path）"></a>路径（path）</h3><p>路径（path）是资源在网站的位置。比如，&#x2F;path&#x2F;index.html 这个路径，指向网站的&#x2F;path 子目录下面的网页文件 index.html。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">pathName</span>; <span class="comment">// /path/to/myfile.html</span></span><br></pre></td></tr></table></figure><h3 id="查询参数（parameter）"><a href="#查询参数（parameter）" class="headerlink" title="查询参数（parameter）"></a>查询参数（parameter）</h3><p>查询参数（parameter）是提供给服务器的额外信息。参数的位置是在路径后面，两者之间使用?分隔，上例是?key1&#x3D;value1&amp;key2&#x3D;value2。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">query</span>; <span class="comment">// ?key1=value1&amp;key2=value2</span></span><br></pre></td></tr></table></figure><h3 id="锚点（anchor）"><a href="#锚点（anchor）" class="headerlink" title="锚点（anchor）"></a>锚点（anchor）</h3><p>锚点（anchor）是网页内部的定位点，使用#加上锚点名称，放在网址的最后，比如#anchor。浏览器加载页面以后，会自动滚动到锚点所在的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">hash</span>; <span class="comment">// #anchor</span></span><br></pre></td></tr></table></figure><h2 id="hash-模式"><a href="#hash-模式" class="headerlink" title="hash 模式"></a>hash 模式</h2><p>URL Hash 的形式类似如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 表示文章列表页面</span><br><span class="line">https://www.example.com/#/list</span><br><span class="line"></span><br><span class="line">// 表示文章详情页面</span><br><span class="line">https://www.example.com/#/detailƒ</span><br></pre></td></tr></table></figure><p>hash 模式特点：</p><ul><li>hash 变化会触发网页跳转，即浏览器的前进、后退</li><li>hash 发生变化时，浏览器并不会重新给后端发送请求加载页面，SPA 的特点</li><li>hash 只作用在浏览器，不会在请求中发送给服务器</li><li>修改 hash 时会在浏览器留下历史记录，可以通过浏览器返回按钮回到上一个页面</li><li>hash 发生变化时会触发 hashchange 事件，在该事件中可以通过 window.location.hash 获取到当前 hash 值</li></ul><h2 id="h5-history-模式"><a href="#h5-history-模式" class="headerlink" title="h5 history 模式"></a>h5 history 模式</h2><p>history 在 H5 出现之前，可以使用 history.back() 向后跳转，使用 history.forward() 控制向前跳转。</p><p>在 H5 中新增了 history.pushState() 和 history.replaceState()，分别可以添加和修改历史记录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">pushState</span>(&#123;&#125;, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;https://www.example.com/list&quot;</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">history</span>.<span class="title function_">replaceState</span>(&#123;&#125;, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;https://www.example.com/detail&quot;</span>);</span><br></pre></td></tr></table></figure><p>和 hash 一样，使用 pushState 和 replaceState 修改 URL 同样有 hash 具备的特点。浏览器历史记录的变更会触发 window 的 onpopstate 事件，可以根据这个事件来监听 URL 的变化。</p><p>需要注意的是，history 模式需要服务端配合，要求后端无论访问什么页面都返回 index.htm，然后前端使用 history.pushState 改变路由。</p><h2 id="history-和-hash-对比"><a href="#history-和-hash-对比" class="headerlink" title="history 和 hash 对比"></a>history 和 hash 对比</h2><ol><li>hash 使用 # 后面的内容模拟一个完整路径，不太美观</li><li>hash 在请求时不会发送给服务器，用户手动刷新页面，后端接受到了也是同一个地址</li><li>history 直接修改浏览器 URL，用户手动刷新页面，后端接受到是不同的地址，需要后端做处理跳转到统一的 html 页面</li></ol><h2 id="history-和-hash-如何选择"><a href="#history-和-hash-如何选择" class="headerlink" title="history 和 hash 如何选择"></a>history 和 hash 如何选择</h2><ul><li>to B 的系统推荐使用 hash，简单易用，对 url 规范不敏感</li><li>to C 的系统，可以考虑选择 H5 history，但需要服务端支持</li><li>能选择简单的，就别用复杂的，要考虑成本和收益</li></ul>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟 DOM 与 diff 算法</title>
      <link href="/posts/2017-10-55509/"/>
      <url>/posts/2017-10-55509/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟-DOM-实现原理"><a href="#虚拟-DOM-实现原理" class="headerlink" title="虚拟 DOM 实现原理"></a>虚拟 DOM 实现原理</h2><p>通过 JS 的 Object 对象来模拟 DOM 中的节点，然后通过特定的 render 方法，将其渲染成真实的 DOM 节点。</p><p>dom diff 则是通过 JS 层面的计算，返回 patch 对象（打补丁的方式），通过特定的操作解析 patch 对象，完成页面的重现渲染。</p><p>渲染过程如下：</p><ol><li>用 JS 模拟 DOM 树，并渲染这个 DOM 树</li><li>比较新老 DOM 树，得到比较的差异对象</li><li>把差异对象应用到渲染的 DOM 树</li></ol><h2 id="用-JS-模拟-DOM-结构"><a href="#用-JS-模拟-DOM-结构" class="headerlink" title="用 JS 模拟 DOM 结构"></a>用 JS 模拟 DOM 结构</h2><p>以下是真实的 DOM 节点：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>v dom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">&quot;font-size: 20px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用 JS 对象来模拟 DOM 节点如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">props</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;div1&#x27;</span></span><br><span class="line">        <span class="attr">class</span>: <span class="string">&#x27;container&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">tag</span>: <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: <span class="string">&#x27;v dom&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">tag</span>: <span class="string">&#x27;ul&#x27;</span>,</span><br><span class="line">        <span class="attr">props</span>: &#123;</span><br><span class="line">            <span class="attr">style</span>: <span class="string">&#x27;font-size: 20px&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">tag</span>: <span class="string">&#x27;li&#x27;</span>,</span><br><span class="line">                <span class="attr">children</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 JS 对象模拟 DOM 节点的好处是，页面的更新可以先全部反映在 JS 对象上，操作内存中的 JS 对象的速度显然要快多了。等更新完后，再将最终的 JS 对象映射成真实的 DOM，交由浏览器去绘制。</p><h2 id="diff-算法"><a href="#diff-算法" class="headerlink" title="diff 算法"></a>diff 算法</h2><p>简单的说就是新旧虚拟 DOM 的比较, 如果有差异就以新的为准, 然后再插入的真实的 DOM 中, 重新渲染。</p><p>两棵树如果完全比较时间复杂度是 O(n^3)，1000 个节点，要计算 1 亿次，算法不可用，而 O(n^2)以上的复杂度就基本上意味着是不可用的。</p><p>依据《深入浅出 React 和 Redux》一书中的介绍，React 的 Diff 算法的时间复杂度是 O(n)。</p><p>从 O(n^3)到 O(n)，主要做了以下三件事：</p><ul><li>只比较统一层级，不跨级比较</li><li>tag 不相同，则直接删掉重建，不再深度比较</li><li>tag 和 key 都相同，则认为是相同节点，不再深度比较</li></ul><h3 id="h-函数"><a href="#h-函数" class="headerlink" title="h 函数"></a>h 函数</h3><p>返回的是 vnode(sel, data,children, text, elm, key) 函数，最后返回 vnode 对象。</p><h3 id="patch-函数"><a href="#patch-函数" class="headerlink" title="patch 函数"></a>patch 函数</h3><p>tag 不相同，则直接删掉重建，不再深度比较；tag 和 key 都相同，则认为是相同节点，不再深度比较。</p><p>涉及的相关操作有 addvodes、removeVnodes、undateChildren。</p><h3 id="someVnode-函数"><a href="#someVnode-函数" class="headerlink" title="someVnode 函数"></a>someVnode 函数</h3><p>对比 tag 和 key。</p><h2 id="key-的重要性"><a href="#key-的重要性" class="headerlink" title="key 的重要性"></a>key 的重要性</h2><p>无论是 vue 或者 react，当我们遍历数组生成 dom 元素的时候，都会建议我们给每一个 dom 元素加上 key 值，而且 key 值最好用每一项的唯一 id，而不用 index 值(索引)。</p><p>key 值是追踪列表中哪些元素被添加、被修改、被移除的辅助标志。通俗点来说，就是它可以帮助我们快速对比两个虚拟 dom 对象，找到虚拟 dom 对象被修改的元素。然后仅仅替换掉被修改的元素，然后再生成新的真实 dom。</p><p>如果没有 key 值，就会根据就地复用的原则，一个一个对比，然后修改渲染。</p><p>如果 key 值用 index(索引)，假如我在数组中间插入一项的时候，此时从这一项开始的 key 值就全部都变了，都需要重新对比渲染。</p><p>如果有 key，diff 算法就可以通过对比找到正确的位置插入新节点，而 key 值相同的 dom 节点就不要去比较。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么要使用虚拟 DOM？</title>
      <link href="/posts/2017-10-59417/"/>
      <url>/posts/2017-10-59417/</url>
      
        <content type="html"><![CDATA[<p>有一天，一个朋友问了我一个 React 问题，“组件化、单向数据绑定，这些我都明白，但为什么要使用虚拟 DOM 呢?”</p><p>我给了他一个惯常的回答，“因为直接操作 DOM 操作效率低，速度慢。”</p><p>他继续追问，“那是什么让直接向 DOM 更新变得缓慢?”</p><p>于是引出了本篇文章的主题：<strong>为什么要使用虚拟 DOM？</strong></p><p>为了理解虚拟 DOM，将从浏览器的工作流程开始讲起，以及探究 DOM 更改后到底发生了什么。</p><h2 id="浏览器的引擎工作流程"><a href="#浏览器的引擎工作流程" class="headerlink" title="浏览器的引擎工作流程"></a>浏览器的引擎工作流程</h2><p>下面的图表和相应的解释使用了 Webkit 引擎的工作原理。</p><p><img src="https://www.jojoer.com/upload/2021/10/A%20Browser%E2%80%99s%20Workflow-530acdd7f1184747b591b6fe2a475ac7.png" alt="A Browser’s Workflow.png"></p><p>除了一些细微差别外，所有浏览器的工作流程几乎都是相似的，如上图大致分 5 步：创建 DOM tree –&gt; 创建 Style Rules -&gt; 构建 Render tree -&gt; 布局 Layout –&gt; 绘制 Painting。</p><p>第一步，用 HTML 分析器，分析 HTML 元素，构建 DOM 树。</p><p>第二步：用 CSS 分析器，分析 CSS 文件和元素上的 inline 样式，生成页面的样式表。</p><p>第三步：将上面的 DOM 树和样式表关联起来，构建 Render 树。这一过程又称为 Attachment。每个 DOM 节点都有 attach 方法，接受样式信息，返回一个 render 对象（又名 renderer）。这些 render 对象最终会被构建成 Render 树。</p><p>第四步：有了 Render 树后，浏览器开始布局，会为每个 Render 树上的节点确定一个在显示屏上出现的精确坐标值。</p><p>第五步：最后就是调用每个节点的 paint 方法，让它们显示出来。</p><h2 id="走进虚拟-DOM"><a href="#走进虚拟-DOM" class="headerlink" title="走进虚拟 DOM"></a>走进虚拟 DOM</h2><p>当使用传统的原生 api 或 jQuery 去操作 DOM 时，浏览器会从构建 DOM 树开始从头到尾执行一遍流程。</p><p>DOM 操作的真正问题是，每个操作都有可能触发布局更改、树修改和渲染。假设你一个接一个地修改了 30 个节点。这意味着 30 个节点都可能重新计算布局和重新渲染。</p><p>理想状态是一次性构建完 DOM 树，再执行后续操作。</p><blockquote><p>其实，这种特定行为也可以在没有虚拟 DOM 的情况下得到优化。比如手动将所有 DOM 修改分组到一个 DOM 片段中，然后将其添加到 DOM 中。</p></blockquote><p>即使计算机硬件一直在更新迭代，操作 DOM 的代价仍旧是昂贵的，频繁操作还是会出现页面卡顿，影响用户的体验。真实的 DOM 节点，哪怕一个最简单的 div 也包含着很多属性，可以打印出来直观感受一下：</p><p><img src="https://www.jojoer.com/upload/2021/10/Div%20Property-0e5d216a6925464983f7071692453b3a.webp" alt="Div Property.webp"></p><p>那么，虚拟 DOM 解决了什么问题呢?</p><p>虚拟 DOM 是为了解决如上浏览器性能问题而被设计出来的。例如前面的例子，假如一次操作中有 30 次更新 DOM 的动作，虚拟 DOM 不会立即操作 DOM，而是将这 30 次更新的 diff 内容保存到本地的一个 JS 对象中，最终将这个 JS 对象一次性 attach 到 DOM 树上，通知浏览器去执行绘制工作，这样可以避免大量的无谓的计算量。</p><p>它自动化并抽象了 DOM 树的管理，从而免除了手动操作。不仅如此，它还跟踪了哪些部分已经更改，哪些没有更改，知道哪些部分需要刷新，哪些部分不需要刷新。</p><p>最后，通过放弃对自身的 DOM 操作，它允许不同的组件或代码片段请求 DOM 修改，而不需要它们之间进行交互，也不需要共享它们已经修改或想要修改 DOM 的状态和事件。这意味着它提供了一种方法，可以避免在修改 DOM 的所有部分之间进行同步，同时仍然将所有修改聚合成一次操作。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>为什么我们要引入虚拟 DOM，而不是直接将组件转换为 DOM 节点呢？</p><p>主要是为了增加灵活性和提升性能：</p><ol><li><p>增加灵活性，支持跨平台渲染</p><p>在技术领域一向有增加中间层的思路，利用中间层可以提供更多的灵活性。把原先的过程拆分为标准化和渲染两步之后，标准化的虚拟 DOM 数据根据需要进行渲染就可以适应更多平台。</p><p>虚拟 DOM 不仅可以变成 DOM，还可以变成小程序、 iOS 应用、安卓应用，因为虚拟 DOM 本质上只是一个 JS 对象。</p></li><li><p>提升性能，减少 DOM 的操作</p><p>虚拟 DOM 可以将多次操作合并为一次操作，减少 DOM 操作的次数。</p><p>虚拟 DOM 借助 diff 算法可以把多余的操作省掉，减少 DOM 操作的范围。比如你添加 1000 个节点，其实只有 10 个是新增的。</p></li></ol><p>当然虚拟 DOM 也有缺点，就是需要额外的创建函数，如 create Element 或 h，不够直观。但是可以通过 JSX 等方案来简化成 XML 的写法。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript 的 self 和 this</title>
      <link href="/posts/2017-07-8641/"/>
      <url>/posts/2017-07-8641/</url>
      
        <content type="html"><![CDATA[<h2 id="self"><a href="#self" class="headerlink" title="self"></a>self</h2><p>打开任何一个网页，浏览器会首先创建一个窗口，这个窗口就是一个 window 对象，也是 js 运行所依附的全局环境对象和全局作用域对象。self 指窗口本身，它返回的对象跟 window 对象是一模一样的。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>c# 有 this 关键字，它的主要作用就是指代当前对象实例（参数传递和索引器都要用到 this）。在 javascript 中，this 通常指向的是我们正在执行的函数本身，或者是指向该函数所属的对象（运行时）。</p><ol><li>不正确的方式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">thisTest</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 弹出undefined, this在这里指向??</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;btnTest&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;thisTest()&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p>分析：onclick 事件直接调用 thisTest 函数，程序就会弹出 undefined。因为 thisTest 函数是在 window 对象中定义的，所以 thisTest 的拥有者（作用域）是 window，thisTest 的 this 也是 window。而 window 是没有 value 属性的，所以就报错了。</p><ol start="2"><li>正确的方式</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;input id=<span class="string">&quot;btnTest&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;提交&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">thisTest</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btnTest&quot;</span>).<span class="property">onclick</span>=thisTest;  <span class="comment">//给button的onclick事件注册一个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="void"><a href="#void" class="headerlink" title="void"></a>void</h2><ol><li><p>定义</p><p>javascript 中 void 是一个操作符，该操作符指定要计算一个表达式但是不返回值。</p></li><li><p>语法<br>void 操作符用法格式如下：</p><p>（1）. javascript:void (expression)</p><p>（2）. javascript:void expression</p><p>注意：expression 是一个要计算的 js 标准的表达式。表达式外侧的圆括号是可选的，但是写上去你可以一眼就知道括弧内的是一个表达式（这和 typeof 后面的表达式语法是一样的）。</p></li><li><p>在 a 元素下使用 void(0),a 标签不导航到其他页面，不需要网页位置的回滚，都会采取 void(0)那种写法。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 字符串和正则表达式</title>
      <link href="/posts/2017-07-51792/"/>
      <url>/posts/2017-07-51792/</url>
      
        <content type="html"><![CDATA[<h2 id="更好的-Unicode-支持"><a href="#更好的-Unicode-支持" class="headerlink" title="更好的 Unicode 支持"></a>更好的 Unicode 支持</h2><h3 id="UTF-16-码位"><a href="#UTF-16-码位" class="headerlink" title="UTF-16 码位"></a>UTF-16 码位</h3><ul><li>UTF-16 引入了代理对（surrogate pair），其规定用两个 16 位编码单元表示一个码位。也就是说，字符串里的字符有两种，一种是由一个编码单元 16 位表示的 BMP 字符，一种是由两个编码单元 32 位表示的辅助平面字符。</li><li>ES6 强制使用 UTF-16 字符串编码，并按照这种字符编码来标准化字符串操作，在 JavaScript 中增加了专门针对代理对的功能。</li></ul><h3 id="codePointAt-方法"><a href="#codePointAt-方法" class="headerlink" title="codePointAt() 方法"></a>codePointAt() 方法</h3><p>codePointAt() 方法接受编码单元的位置而非字符串的位置作为参数，返回与字符串中给定位置对应的<strong>码位</strong>，既一个整数值。</p><p>对于 BMP 字符集中的字符，codePointAt() 和 charCodeAt() 方法的相同，而对于非 BMP 字符集来说返回值则不同。charCodeAt() 方法返回的只是位置 0 处的第一个编码单元，而 codePointAt() 返回完整的码位，即使这个码位包含多个编码单元。</p><p>要检测一个字符占用的编码单元数量，最简单的方法是调用字符的 codePointAt() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">is32Bit</span>(<span class="params">c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> c.<span class="title function_">codePointAt</span>(c) &gt; <span class="number">0xFFFF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span>)    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>用 16 位表示的字符集上界为十六进制 FFFF，所以超过这个上界的码位一定由两个编码单元来表示，总共 32 位。</p></blockquote><h3 id="String-fromCodePoint-方法"><a href="#String-fromCodePoint-方法" class="headerlink" title="String.fromCodePoint() 方法"></a>String.fromCodePoint() 方法</h3><p>String.fromCodePoint() 方法根据指定的码位生成一个字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">fromCodePoint</span>(<span class="number">134071</span>))    <span class="comment">// &#x27;𠮷&#x27;</span></span><br></pre></td></tr></table></figure><p>可以将 String.fromCodePoint() 看成是完整版的 String.fromCharCode()。对应 BMP 中所有的字符，两方法执行结果相同。只有传递非 BMP 字符的码位作为参数，二者的执行结果才有可能不同。</p><h3 id="normalize-方法（国际化应用中常使用）"><a href="#normalize-方法（国际化应用中常使用）" class="headerlink" title="normalize() 方法（国际化应用中常使用）"></a>normalize() 方法（国际化应用中常使用）</h3><p>normalize() 方法提供 Unicode 的标准化形式：</p><ol><li>以标准等价方式分解，然后以标准等价方式重组 (‘NFC’), 默认选项。</li><li>以标准等价方式分解 (‘NFD’)。</li><li>以兼容等价方式分解 (‘NFKC’)。</li><li>以兼容等价方式分解，然后以标准等价方式重组 (‘NFKD’)。</li></ol><p><strong>需牢记：在对比字符串之前，一定要先把它们标准化为同一种形式：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> normalized = values.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    retrun text.<span class="title function_">normalize</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">nomralized.<span class="title function_">sort</span>(<span class="title function_">funtion</span>(<span class="params">first, second</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (first &lt; second) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (first === second) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果相对原始数组进行排序，可以在比较函数中添加 normalize() 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">values.<span class="title function_">sort</span>(<span class="title function_">funtion</span>(<span class="params">first, second</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> firstNormalized = first.<span class="title function_">normalize</span>(),</span><br><span class="line">        secondNormalized = second.<span class="title function_">normalize</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (firstNormalized &lt; secondNormalized) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstNormalized === secondNormalized) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="正则表达式-u-修饰符"><a href="#正则表达式-u-修饰符" class="headerlink" title="正则表达式 u 修饰符"></a>正则表达式 u 修饰符</h3><p>解决默认将字符串中的每个字符按照 16 位编码单元处理的问题。</p><h4 id="u-修饰符实例"><a href="#u-修饰符实例" class="headerlink" title="u 修饰符实例"></a>u 修饰符实例</h4><p>当一个正则表达式添加了 u 修饰符时，它就从编码单元操作模式切换为字符模式，如此一来正则表达式就不会视代理对为两个字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&#x27;𠮷&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="property">length</span>)    <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^.$/</span>.<span class="title function_">test</span>(text))    <span class="comment">// false /^.$/匹配所有单字符字符串，&#x27;𠮷&#x27;由两个编码单元组成</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^.$/u</span>.<span class="title function_">test</span>(text))    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="计算码位数量"><a href="#计算码位数量" class="headerlink" title="计算码位数量"></a>计算码位数量</h4><p>es6 检测字符串的 length 属性仍然返回字符串编码单元的数量。可以通过正则表达式的 u 修饰符来解决：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">codePointlength</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = text.<span class="title function_">match</span>(<span class="regexp">/[\s\S]/gu</span>)</span><br><span class="line">    <span class="keyword">return</span> result ? result.<span class="property">length</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">codePointlength</span>(<span class="string">&#x27;abc&#x27;</span>))    <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">codePointlength</span>(<span class="string">&#x27;𠮷bc&#x27;</span>))    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><blockquote><p>此方法有效，但运行效率低（可以通过字符串迭代器来解决）</p></blockquote><h4 id="检测-u-修饰符支持"><a href="#检测-u-修饰符支持" class="headerlink" title="检测 u 修饰符支持"></a>检测 u 修饰符支持</h4><p>检测当前浏览器是否支持 u 修饰符，最安全的方式是通过以下函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hasRegExpU</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他字符串变更"><a href="#其他字符串变更" class="headerlink" title="其他字符串变更"></a>其他字符串变更</h2><h3 id="字符串中的子串识别"><a href="#字符串中的子串识别" class="headerlink" title="字符串中的子串识别"></a>字符串中的子串识别</h3><p><strong>indexOf() 拓展：</strong></p><ul><li>includes() 方法，如果在字符串中检测到指定文本则返回 true，否则返回 false</li><li>startsWith() 方法，从字符串起始位置检测</li><li>endsWith() 方法，从字符串结束部分检测</li></ul><p>以上 3 个方法都接收两个参数 &#x3D;&#x3D;&gt; (‘要搜索的文本’, ‘开始搜索的位置的索引’)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> msg = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">startsWith</span>(<span class="string">&#x27;Hello&#x27;</span>))    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">endsWith</span>(<span class="string">&#x27;!&#x27;</span>))    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">includes</span>(<span class="string">&#x27;o&#x27;</span>))    <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">startsWith</span>(<span class="string">&#x27;o&#x27;</span>))    <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">endsWith</span>(<span class="string">&#x27;World!&#x27;</span>))    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">includes</span>(<span class="string">&#x27;x&#x27;</span>))    <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">startsWith</span>(<span class="string">&#x27;o&#x27;</span>, <span class="number">4</span>))    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">endsWith</span>(<span class="string">&#x27;o&#x27;</span>, <span class="number">8</span>))    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg.<span class="title function_">includes</span>(<span class="string">&#x27;o&#x27;</span>, <span class="number">8</span>))    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>这三个方法如果没有按照要求传入字符串，而是传入正则表达式，会触发错误。indexOf() 和 lastIndexOf() 则不会，它们会把传入的正则表达式当作字符串并搜索它。</p></blockquote><h4 id="repeat-方法"><a href="#repeat-方法" class="headerlink" title="repeat() 方法"></a>repeat() 方法</h4><p>repeat() 方法接受一个 number 类型的参数，表示字符串重复的次数，返回值是当前字符串重复一定次数的新字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缩进指定数量的空格</span></span><br><span class="line"><span class="keyword">let</span> indent = <span class="string">&#x27; &#x27;</span>.<span class="title function_">repeat</span>(<span class="number">4</span>),</span><br><span class="line">    indentLevel = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当需要增加缩进时</span></span><br><span class="line"><span class="keyword">let</span> newIndent = indent.<span class="title function_">repeat</span>(++indentLevel)</span><br></pre></td></tr></table></figure><h2 id="其他正则表达式语法变更"><a href="#其他正则表达式语法变更" class="headerlink" title="其他正则表达式语法变更"></a>其他正则表达式语法变更</h2><h3 id="正则表达式-y-修饰符"><a href="#正则表达式-y-修饰符" class="headerlink" title="正则表达式 y 修饰符"></a>正则表达式 y 修饰符</h3><p>y 修饰符会影响正则表达式的搜索过程中的 sticky 属性，当在字符串中开始字符匹配时，它会通知搜索从正则表达式的 lastIndex 属性开始进行，如果在指定位置没能成功匹配，则停止继续匹配。<br>记住两点：</p><ol><li>只有调用 exec() 和 test() 这些正则表达式对象的方法时才会涉及 lastIndex 属性；</li><li>调用字符串方法，如 match()，不会触发粘滞行为。</li></ol><p><strong>检测 y 修饰符是否存在（通过属性名来检测）：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/hello\d/y</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="property">sticky</span>)    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>检测引擎的支持程度：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hasRegExpY</span> () &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> pattern = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hasRegExpY</span>()</span><br></pre></td></tr></table></figure><h3 id="正则表达式的复制"><a href="#正则表达式的复制" class="headerlink" title="正则表达式的复制"></a>正则表达式的复制</h3><p>es5 中通过给 RegExp 构造函数传递正则表达式作为参数来复制这个正则表达式，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re1 = <span class="regexp">/ab/i</span></span><br><span class="line">    re2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(re1)</span><br></pre></td></tr></table></figure><p>但是给 RegExp 构造函数提供第二个参数，为正则表达式指定一个修饰符，则代码无法运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re1 = <span class="regexp">/ab/i</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// es5中抛出错误，es6中正常</span></span><br><span class="line">    re2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(re1, <span class="string">&#x27;g&#x27;</span>)    <span class="comment">// es6中第二个参数修改第一个参数的修饰符</span></span><br></pre></td></tr></table></figure><h3 id="flags-属性"><a href="#flags-属性" class="headerlink" title="flags 属性"></a>flags 属性</h3><p>ES6 中用来获取正则表达式的修饰符<br>ES5 和 ES6 中通过 source 属性获取正则表达式的文本</p><p>ES5 中这样获取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFlags</span>(<span class="params">re</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> text = re.<span class="title function_">toString</span>()</span><br><span class="line">    <span class="keyword">return</span> text.<span class="title function_">substring</span>(text.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>)+<span class="number">1</span>, text.<span class="property">length</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/ab/g</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFlags</span>(re))    <span class="comment">// &#x27;g&#x27;</span></span><br></pre></td></tr></table></figure><p>flags 属性和 source 属性都是<strong>只读的原型属性访问器</strong>，对齐只设置了 getter 方法。访问 flags 属性会返回所有应用于当前正则表达式的修饰符字符串。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/ab/g</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">source</span>)    <span class="comment">// &#x27;ab&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">flags</span>)    <span class="comment">// &#x27;g&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h3><p>ES6 模板字面量语法支持创建专用领域语言（DSL, 是与 JavaScript 概念相反的编程语言，通常是指某些具体且有限的目标设计的语言）。</p><blockquote><p>模板字面量是拓展 ECMAScript 基础语法的语法糖，其提供一套生成、查询并操作来自其他语言里的内容的 DSL，且可以免受注入攻击。</p></blockquote><p>新特性：</p><ol><li>多行字符串</li><li>基本的字符串格式化（将变量的值嵌入字符串的能力）</li><li>HTML 转义（向 HTML 插入经过安全转换后的字符串的能力）</li></ol><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><ul><li>用反撇号（&#96;）替换单、双引号</li><li>在字符串中使用反撇号，要用反斜杠（\）将其转义</li><li>在模板字面量中，不需要转义单、双引号</li></ul><h4 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h4><p>在 ES6 之前，通常依靠数组或字符串拼接的方法来创建多行字符串，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = [</span><br><span class="line">    <span class="string">&#x27;Multiline &#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;string&#x27;</span></span><br><span class="line">].<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;Multiline \n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="简化多行字符串"><a href="#简化多行字符串" class="headerlink" title="简化多行字符串"></a>简化多行字符串</h4><ul><li>需要在字符串中添加新的一行，只需在代码中直接换行</li><li>在反撇号中所有的空白符都属于字符串的一部分，所以要千万小心缩进。如果要通过适当的缩进来对齐文本，可以考虑在多行模板字面量的第一行留白，并在后面几行中缩进。如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;Title&lt;/h1&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span>.<span class="title function_">trim</span>()</span><br></pre></td></tr></table></figure><ul><li>也可以在模板字面量中显式的使用、n, 来指明插入新行的位置</li></ul><h4 id="标签模板"><a href="#标签模板" class="headerlink" title="标签模板"></a>标签模板</h4><p>标签指在模板字面量第一个反撇号（&#96;）前方标注的字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = tag<span class="string">`Hello World`</span></span><br></pre></td></tr></table></figure><p>在这个示例中，应用于模板字面量<code>Hello World</code>的模板标签是 tag。</p><h5 id="定义标签"><a href="#定义标签" class="headerlink" title="定义标签"></a>定义标签</h5><p>标签可以是一个函数，调用时传入加工过的模板字面量各部分数据，但必须结合每个部分来创建结果。第一个参数是一个数组，包含 JavaScript 解释过后的<strong>字面量字符串</strong>，第一个参数后的所以参数都是每一个<strong>占位符的解释值</strong>。</p><p>标签函数通常使用不定参数特性来定义占位符，从而简化数据处理的过程，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tag</span> (literals, ...substitutions) &#123;</span><br><span class="line">    <span class="comment">// 返回一个字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>literals[0] 总是字符串的始端，literals[literals.length - 1] 总是字符串的结尾。这样，substitutions 的数量总比 literals 的数量少一个，也意味着 substitutions.length &#x3D;&#x3D;&#x3D; literals.length-1 总为 true。、</p><p>模拟模板字面量的默认行为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">passthru</span> (literals, substitutions) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据substitutions的数量来确定循环的执行次数(用literals常会越界)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; substitutions.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        result += literals[i]</span><br><span class="line">        result += substitutions[i]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并最后一个literal</span></span><br><span class="line">    result += literals[literals.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">10</span>,</span><br><span class="line">    price = <span class="number">0.25</span></span><br><span class="line">    message = passthru<span class="string">`<span class="subst">$&#123;count&#125;</span> items cost $<span class="subst">$&#123;(count*price).toFixed(<span class="number">2</span>)&#125;</span>.`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message)    <span class="comment">// &#x27;10 items cost $2.50.&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="在模板字面量中使用原始值"><a href="#在模板字面量中使用原始值" class="headerlink" title="在模板字面量中使用原始值"></a>在模板字面量中使用原始值</h5><p>通过模板标签可以访问到原生字符串信息（转换之前的原生字符串），最简单的方法是使用内建的 String.row 标签：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message1 = <span class="string">`Multiline\nstring`</span></span><br><span class="line">    message2 = <span class="title class_">String</span>.<span class="property">row</span><span class="string">`Multiline\nstring`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message1)    <span class="comment">// &#x27;Multiline</span></span><br><span class="line">                         <span class="comment">// string&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message2)    <span class="comment">// &#x27;Multiline\nstring&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6 块级作用域绑定</title>
      <link href="/posts/2017-07-50949/"/>
      <url>/posts/2017-07-50949/</url>
      
        <content type="html"><![CDATA[<p>原因：var 声明和变量提升（Hoisting）机制。</p><h2 id="块级声明"><a href="#块级声明" class="headerlink" title="块级声明"></a>块级声明</h2><p>块级声明用于声明在指定块之外无法访问的变量</p><p>块级作用域（词法作用域）：</p><ul><li>函数内部</li><li>块中{}</li></ul><h3 id="let-声明（变量）"><a href="#let-声明（变量）" class="headerlink" title="let 声明（变量）"></a>let 声明（变量）</h3><p>用 let 替代 var 来声明变量，可以把变量作用域限制在当前代码块中。由于 let 声明不会被提升，因此开发者通常使用 let 声明语句放在封闭代码块的顶部，一遍整个代码块都可以访问。</p><h3 id="禁止重声明"><a href="#禁止重声明" class="headerlink" title="禁止重声明"></a>禁止重声明</h3><p>同一作用域中不能用 let 重复定义已经存在的标识符，否则会抛出错误。但如果当前作用域内嵌另一个作用域，便可在内嵌作用域中用 let 声明同名变量。</p><h3 id="const-声明（常量）"><a href="#const-声明（常量）" class="headerlink" title="const 声明（常量）"></a>const 声明（常量）</h3><ul><li>const 和 let 声明的都是块级标识符</li><li>其值一旦被设定都不可更改（不可再次赋值）</li><li>每个通过 const 声明的常量必须进行初始化（赋值）</li><li><strong>和其他语言中常量不同的是：es6 中如果常量是对象，则对象中的值可以修改（修改对象的属性值）</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以修改对象属性的值</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抛出语法错误</span></span><br><span class="line">person = &#123;</span><br><span class="line">    name： <span class="string">&quot;Greg&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改绑定的值不会报错，但直接给 person 赋值，既修改 person 的绑定，会抛出错误。<br><strong>const 声明不允许修改绑定，但允许修改绑定的值</strong></p><h3 id="临时死区（Temporal-Dead-Zone-x2F-TDZ）"><a href="#临时死区（Temporal-Dead-Zone-x2F-TDZ）" class="headerlink" title="临时死区（Temporal Dead Zone&#x2F;TDZ）"></a>临时死区（Temporal Dead Zone&#x2F;TDZ）</h3><ul><li>临时死区（Temporal Dead Zone&#x2F;TDZ），常被用来描述 let 和 const 的不提示效果</li><li>只有执行过变量声明语句后，变量才会从 TDZ 中移出，然后才能正常访问</li><li>但在 let 声明的作用域外对变量使用 typeof 则不会报错：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> value); <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>typeof 是在声明变量 value 的代码块外执行的，此时 value 并不在 TDZ 中。也就意味着不存在 value 这个绑定，typeof 最终返回”undefined”</p><h2 id="循环中的块作用域绑定"><a href="#循环中的块作用域绑定" class="headerlink" title="循环中的块作用域绑定"></a>循环中的块作用域绑定</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">prosess</span>(items[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// i在这里不可访问，抛出错误</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br></pre></td></tr></table></figure><h3 id="循环中的函数"><a href="#循环中的函数" class="headerlink" title="循环中的函数"></a>循环中的函数</h3><ul><li>长久以来，var 声明让开发者在循环中创建函数变得异常困难，因为变量到了循环之外仍能访问。ES6 中 let 和 const 提供的块级绑定让我们无需再这么折腾</li><li>开发者在循环中使用立即调用函数表达式（IIFE），以强制生成计数器变量的副本</li></ul><h3 id="循环中的-let-声明"><a href="#循环中的-let-声明" class="headerlink" title="循环中的 let 声明"></a>循环中的 let 声明</h3><ul><li>每次循环的时候 let 声明都会创建一个新变量 i，并将其初始化为 i 的当前值</li><li><strong>let 声明在循环内部的行为是标准中专门定义的，它不一定与 let 的不提升特性相关，理解这点至关重要</strong></li></ul><h3 id="循环中的-const-声明"><a href="#循环中的-const-声明" class="headerlink" title="循环中的 const 声明"></a>循环中的 const 声明</h3><ul><li>对应 for 循环，可以在初始化变量时使用 const，但更改这个变量时就会抛出错误</li><li>在 for-in 和 for-of 循环中，因为在每次迭代不会修改已有绑定，而是创建一个新绑定，所以不会抛出错误</li></ul><h2 id="全局块作用域绑定"><a href="#全局块作用域绑定" class="headerlink" title="全局块作用域绑定"></a>全局块作用域绑定</h2><ul><li>当 var 被用于全局作用域时，它会创建一个新的全局变量作为全局对象（浏览器环境中的 window 对象）的属性</li><li>如果不想为全局对象创建属性，使用 let 和 const 则安全得多</li><li>如果希望在全局对象下定义变量，仍然可以使用 var。这种情况常见于在浏览器中跨 frame 或跨 window 访问</li></ul><h2 id="块级绑定最佳实践的进化"><a href="#块级绑定最佳实践的进化" class="headerlink" title="块级绑定最佳实践的进化"></a>块级绑定最佳实践的进化</h2><p><strong>新的理念：</strong><br>默认使用 const，只有确实需要改变变量的值时使用 let。因为大部分变量的值在初始化后不应再改变，而预料之外的变量值的改变是很多 bug 的源头。（某种程度上实现代码的不可变，从而防止某些错误的产生）。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决当元素设置了 display: none 属性时，它的 CSS 动画失效的问题</title>
      <link href="/posts/2017-07-35735/"/>
      <url>/posts/2017-07-35735/</url>
      
        <content type="html"><![CDATA[<p>在网页开发中，CSS 动画是非常常用的技术。然而，在实现动画时，我们有时会遇到一个问题：当元素设置了 <code>display: none</code> 属性时，它的 CSS 动画就会失效。这个问题该怎样解决呢？</p><h2 id="问题产生原因"><a href="#问题产生原因" class="headerlink" title="问题产生原因"></a>问题产生原因</h2><p>首先，我们需要了解 <code>display</code> 属性的作用。该属性用于指定元素应该生成什么类型的框（即块级框或行内框）。</p><p>当元素的 <code>display</code> 属性被设置为 <code>none</code> 时，它将被从文档流中移除，并且不会占据空间。同时，所有与该元素相关的 CSS 属性和样式也将被忽略。</p><p>这就是为什么 <code>display: none</code> 属性会导致 CSS 动画失效的原因。因为动画通常是通过在元素上添加 CSS 样式来实现的，而 <code>display: none</code> 属性会使得这些样式被忽略掉。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>那么，该怎样解决这个问题呢？其实，这个问题的解决方法并不难，我们可以采用以下两种方式来解决：</p><h3 id="1-将-display-属性设置为其他值"><a href="#1-将-display-属性设置为其他值" class="headerlink" title="1. 将 display 属性设置为其他值"></a>1. 将 display 属性设置为其他值</h3><p>如果你想要在元素隐藏时依然保留动画效果，那么可以考虑将 <code>display</code> 属性设置为其他的值，例如 <code>visibility: hidden</code> 或者 <code>opacity: 0</code>。这样元素就不会被完全移除，而是被隐藏起来了。同时，动画效果也会依然保留。</p><p>示例代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  <span class="comment">/* 或者 */</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.element</span><span class="selector-class">.show</span> &#123;</span><br><span class="line">  <span class="attribute">visibility</span>: visible;</span><br><span class="line">  <span class="comment">/* 或者 */</span></span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">animation-name</span>: my-animation;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> my-animation &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用-JavaScript-来控制动画"><a href="#2-使用-JavaScript-来控制动画" class="headerlink" title="2. 使用 JavaScript 来控制动画"></a>2. 使用 JavaScript 来控制动画</h3><p>另一种解决办法是使用 JavaScript 来控制动画的启动和停止。当元素被隐藏时，我们可以通过 JavaScript 来监听元素是否被显示出来，并在元素显示后启动相应的动画。</p><p>示例代码：</p><p>HTML:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;element&quot;</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;showElement()&quot;</span>&gt;</span>Show Element<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: my-animation;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> my-animation &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JavaScript:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showElement</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.element&quot;</span>);</span><br><span class="line">  element.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 等待下一帧后启动动画</span></span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    element.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过以上两种方法，我们就可以解决因为 <code>display: none</code> 属性导致的 CSS 动画失效问题了。第一种方式需要注意的是 <code>visibility</code> 和 <code>opacity</code> 对页面的渲染性能有一定的影响，应该根据具体情况选择使用。第二种方式则需要一定的 JavaScript 开发知识。在实际开发中，我们可以根据自己的需求来选择合适的解决方案。</p><!--`display: none` 和 `display: block` 切换，css3 动画会失效。`display: none` 会引起页面的重绘事件,是一个异步的延时事件，浏览器会先解析 css 动画代码，才执行 `display:none`。##　解决方案```css.hide {  position: absolute; // 脱离文档流，不占位  left: 0;   top: 0;  width: 100%;  height: 100%;  transition: 1s;  opacity: 0;  visibility: hidden;  pointer-events: none;  z-index: -1;}.show {  opacity: 1;  visibility: visible;  pointer-events: all;  z-index: 10;}``` -->]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell 脚本出错立即退出执行</title>
      <link href="/posts/2017-03-22644/"/>
      <url>/posts/2017-03-22644/</url>
      
        <content type="html"><![CDATA[<p>在编写 shell 脚本时，我们可能会遇到各种错误，例如命令不存在、文件不存在、权限不足等等。这些错误如果不及时处理，可能会导致脚本的执行结果不符合预期，甚至损坏系统数据。因此，很多程序员都会考虑如何在 shell 脚本出错时立即退出执行。</p><p>下面我将介绍几种实现该功能的方法：</p><h2 id="1-使用-set-命令"><a href="#1-使用-set-命令" class="headerlink" title="1. 使用 set 命令"></a>1. 使用 set 命令</h2><p>set 命令是 bash shell 内置的一个命令，用来设置 shell 的运行参数。通过设置 set -e 参数，可以让脚本在执行出错时立即退出。</p><p>示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 这里是脚本的具体逻辑 ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在该脚本中，当某条命令执行失败时（返回值非 0），脚本会立即退出并返回相应的错误信息。</p><h2 id="2-检查命令返回值"><a href="#2-检查命令返回值" class="headerlink" title="2. 检查命令返回值"></a>2. 检查命令返回值</h2><p>除了通过 set 命令来控制错误处理行为外，我们还可以在脚本中手动检查每个命令的返回值，如果发现错误就立即退出。</p><p>示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 这里是脚本的具体逻辑 ...</span></span><br><span class="line"></span><br><span class="line">command1</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error: command1 failed.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">command2</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error: command2 failed.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 继续执行后续命令 ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在该脚本中，每个命令执行完毕后，我们检查其返回值（通过 $? 变量），如果返回值不为 0，则说明命令出错，立即退出脚本。</p><h2 id="3-使用-trap-命令"><a href="#3-使用-trap-命令" class="headerlink" title="3. 使用 trap 命令"></a>3. 使用 trap 命令</h2><p>trap 命令可以用来捕获 shell 脚本的信号，例如 SIGINT、SIGTERM 等。通过设置 trap 命令来捕获错误信号，可以让脚本在发生错误时立即退出。</p><p>示例代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> cleanup &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error occurred, cleaning up...&quot;</span></span><br><span class="line">    <span class="comment"># ... 这里是清理逻辑 ...</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">trap</span> cleanup ERR</span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 这里是脚本的具体逻辑 ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在该脚本中，我们定义了一个 cleanup 函数，在函数内部实现错误处理和清理逻辑。然后通过设置 trap 命令来捕获 ERR 信号，一旦脚本发生错误，就会自动调用 cleanup 函数进行处理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上介绍了三种实现 shell 脚本出错立即退出的方法，分别是使用 set 命令、手动检查命令返回值和使用 trap 命令。对于不同的场景和需求，可以选择适合自己的方法来实现错误处理。无论采用哪种方法，都应该始终保持代码的可读性和易于维护性。</p><!-- ## 问题在 shell 脚本执行过程中，中间环节出错，程序仍然会继续往下执行。该如何立即停止程序？## 解决方案```shell#!/bin/bash# 开启监控set -o errexit # 或者 set -e# 关闭监控set +o errexit # 或者 set +e``` -->]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法之代码高亮</title>
      <link href="/posts/2017-03-56351/"/>
      <url>/posts/2017-03-56351/</url>
      
        <content type="html"><![CDATA[<p>MarkDown 是一种轻量级的标记语言，在学习和使用 MarkDown 过程中，难免要用到代码高亮。代码高亮显示是指将代码中的关键字、注释、字符串等不同类型的内容采用不同的颜色或字体来显示，以方便用户进行阅读和理解。在本文中我们将介绍如何使用 MarkDown 实现代码高亮。</p><h2 id="1-行内代码"><a href="#1-行内代码" class="headerlink" title="1. 行内代码"></a>1. 行内代码</h2><p>如果只需要插入一个单词或一句话的代码片段，可以使用行内代码的形式来呈现。行内代码是通过将代码用反引号（&#96;）包裹起来实现的，如下所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 `print(&quot;Hello World&quot;)` 输出 Hello World。</span><br></pre></td></tr></table></figure><p>这样的代码会以特殊的字体样式展示，与其他文本区分开来，方便用户识别。</p><h2 id="2-多行代码"><a href="#2-多行代码" class="headerlink" title="2. 多行代码"></a>2. 多行代码</h2><p>如果需要插入多行代码，使用多行代码块更加方便。在 MarkDown 中，使用三个反引号（&#96;&#96;&#96;）包裹多行代码即可，如下所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">​```python</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.array([1, 2, 3])</span><br><span class="line">print(a)</span><br><span class="line">​```</span><br></pre></td></tr></table></figure><p>多行代码块可以高亮显示语法关键字、函数名和注释等，让代码更加直观易懂。在前面的例子中，我们指定了多行代码的语言类型是 Python，这样 MarkDown 就会根据这个信息来对代码进行高亮显示。</p><h2 id="3-语言标识"><a href="#3-语言标识" class="headerlink" title="3. 语言标识"></a>3. 语言标识</h2><p>在使用多行代码块时，需要在第一行指定代码使用的语言类型，这样才能正确高亮显示。常见的语言标识包括：</p><ul><li><code>bash</code>：Bash 脚本语言</li><li><code>c</code>：C 语言</li><li><code>cpp</code>：C++语言</li><li><code>css</code>：CSS 样式表语言</li><li><code>html</code>：HTML 网页语言</li><li><code>java</code>：Java 语言</li><li><code>javascript</code>：JavaScript 脚本语言</li><li><code>python</code>：Python 语言</li><li><code>ruby</code>：Ruby 语言</li><li><code>sql</code>：SQL 数据库查询语言</li></ul><p>在选择语言标识时，需要关注代码本身的实际情况，选择匹配度最高的标识以达到最佳的高亮效果。</p><p>更多信息，可查询官网<a href="https://www.markdownguide.org/basic-syntax/#code">markdownguide</a>。</p><h2 id="4-第三方插件"><a href="#4-第三方插件" class="headerlink" title="4. 第三方插件"></a>4. 第三方插件</h2><p>虽然 MarkDown 已经具备了代码高亮的基本功能，但是如果你需要更加丰富的样式和更多的自定义选项，可以考虑使用第三方插件。比如 Typora 编辑器支持选择不同的代码高亮主题，并且支持多种编程语言的语法高亮。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在编写技术文章时，使用 MarkDown 格式来呈现代码块可以让代码更加直观易懂。MarkDown 支持行内代码和多行代码两种形式，多行代码块可以根据语言类型实现高亮显示，使得代码更加具有可读性。对于开发者来说，掌握 MarkDown 的代码高亮显示是写作中的必备技能。</p>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
